// Code generated by go-bindata.
// sources:
// ../../templates/entrypoint.go.tmpl
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package gscript

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEntrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4f\x6f\xdb\x3e\x0c\xbd\xfb\x53\x3c\x18\xf9\x01\x32\x9a\x3a\x69\x8e\x3f\xa0\x87\xae\xed\xb6\x02\x6b\x31\x6c\x58\x77\xc8\xb2\x42\xb6\x69\x57\x48\x2c\x25\x92\x9c\xa6\x30\xfc\xdd\x07\xca\x6e\xf3\x07\xbd\x18\x24\x4d\x3e\x3e\x92\x4f\x6b\x99\x2f\x65\x45\xa8\xa5\xd2\x51\xa4\xea\xb5\xb1\x1e\x22\x02\xe2\xec\xd5\x93\x8b\xd9\xca\x4d\xbd\xb6\xe4\xdc\xa4\x5c\x49\x4f\x21\xa4\xcc\x44\x99\xc6\xab\x55\xf0\xdc\xab\xce\x7b\xc3\xdb\xdc\xe8\x6d\x1c\xb1\x53\x29\xff\xdc\x64\x69\x6e\xea\x49\x45\x7a\x9a\xab\x82\x26\x95\xcb\xad\x5a\xfb\x38\x4a\xa2\xa8\x6c\x74\x1e\xfa\x8a\x04\x6d\x04\x6c\xa5\xc5\x4b\x05\x06\x4b\x7f\x4b\xe5\xbf\x58\xd3\xac\x23\xa0\x6d\xcf\x61\xa5\xae\x08\xa3\xa7\x31\x46\xdb\x1a\xff\x5f\x62\x94\x3e\xde\x3b\x74\x5d\x04\xbc\x54\xe9\x55\x51\x88\x8b\x24\x02\x2a\x03\x86\x1d\x10\x81\x82\x4a\x62\xd4\xf4\xc6\x68\x12\x49\x88\x55\x8e\x18\x61\xa0\x92\x3e\xd0\x8b\x88\xdb\x96\x81\xd3\xbb\x1b\x74\x5d\xfc\x9e\x96\x5e\x5b\x92\x9e\x1e\xef\x87\xca\xb6\x3d\x24\x42\x75\x46\x45\xe0\xb2\xad\xd3\x5b\x76\x1c\xce\x03\xa3\xbe\xf8\xaa\x28\xee\xc2\x3e\x7b\xf8\x90\x9e\x7e\x56\x2b\xd2\xb2\x26\xee\x33\xc6\x3e\xfe\x20\x6b\xfa\x2a\xdd\x33\xba\xee\xbd\x17\xe9\xe2\x08\xf0\x9b\x91\xc5\xcf\x40\x5a\xb0\xdb\x83\xbb\xf9\x11\xf9\xb4\x72\xf1\x42\x24\xfb\x11\x6e\x77\x94\x37\x9e\xbe\xaf\xa4\x0e\x53\x74\xe1\x7b\x80\xde\x6f\x90\x17\x2e\x92\xa8\x1b\xce\x52\x89\x25\x6c\xa3\x69\x8c\x0c\xf3\x05\x5b\x09\x9c\xb7\x4a\x57\x61\xb1\xa5\xb1\x50\x63\x3c\xf1\xf4\xfd\x46\xb2\x61\xe1\xd9\x5c\x2d\xf0\xf7\x12\xcb\xe0\x2d\xd9\xe4\x10\x37\x8e\x80\x0d\x17\xf4\x38\x62\xba\x9b\xcd\x98\x8a\x1b\x70\x06\xed\xa4\xbf\xf4\xa6\x31\x9e\xc4\x06\x67\x6f\xa9\x59\x82\x33\x6c\x38\xd9\x92\x6f\xac\x86\x63\xa2\xc7\xd7\x38\x91\xc5\x89\x68\x3e\xba\x55\xd7\xf5\xb3\x7e\x78\x04\x91\x60\xbe\xe0\x27\x10\xe6\x7a\xe3\xd8\x6b\x3e\xfd\x41\xb2\xb8\x5a\xad\x44\x78\x0f\x2c\x20\x0e\x90\x15\xe1\xc9\xb0\xff\xa9\x29\x4b\xb2\xa2\x47\x68\x87\x7b\xbe\x13\x52\xc5\x6e\x8c\x51\x16\xe8\xf4\x8d\xaf\x87\x17\x46\xfb\x83\xf7\x15\xaa\x44\x6d\x8a\x50\x82\x8b\xd9\xd1\x4f\xac\xad\xd2\xbe\x44\xfc\x47\x73\x20\xc6\x51\xe1\xa1\x76\x8e\xb2\xa7\xbb\xff\xa6\xb3\xdd\x18\x31\x33\x78\xcb\x18\xe4\x10\xbc\x2e\x49\x4e\x36\x7d\x20\x96\xbd\xf9\x2f\x00\x00\xff\xff\xb4\x13\x75\x9c\x39\x04\x00\x00")

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1081, mode: os.FileMode(420), modTime: time.Unix(1511857680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00")

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1511857680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

