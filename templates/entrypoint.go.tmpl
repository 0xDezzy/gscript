package main

import (
  "bytes"
  "compress/flate"
  "io/ioutil"
  "sync"
  "strconv"

  "github.com/gen0cide/gscript/engine"
  {{- if eq $.EnableLogging true }}
  "github.com/gen0cide/gscript/logging"
  "github.com/sirupsen/logrus"
  {{ end }}
)

func main() {
  var wg sync.WaitGroup
  {{- range $_, $pri := $.UniqPriorities }}
  {{- range $_, $vm := (index $.SortedVMs $pri) }}
  wg.Add(1)
  go func() {
    defer wg.Done()
    gse := engine.New("{{ $vm.ID }}")
    {{- if eq $.EnableLogging true }}
    gse.Logger.Formatter = &logging.GSEFormatter{}
    gse.Logger.Out = logging.LogWriter{Name: "{{ $vm.ID }}"}
    gse.Logger.Level = logrus.DebugLevel
    {{- end }}
    gse.CreateVM()
    gse.SetTimeout({{ $vm.Timeout }})
    {{ range $_, $embed := $vm.Embeds -}}
    gse.AddImport("{{ $embed.Filename }}", {{ $embed.NameHash }})
    {{ end -}}
    gse.LoadScript(gse.Imports["{{ $vm.ID }}.gs"]())
    gse.ExecutePlan()
  }()
  {{ end -}}
  wg.Wait()
  {{ end -}}
}

func g(k rune, b []rune) string {
  for i, _ := range b {
    b[i] ^= k
    k ^= b[i]
  }
  q := string(0x22)
  s, _ := strconv.Unquote(q + string(b) + q)
  return s
}
