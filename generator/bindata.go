// Code generated by go-bindata.
// sources:
// generator/templates/docs.md.tmpl
// generator/templates/vm_functions.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDocsMdTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\x0b\x33\xab\x60\xf2\x01\x82\x8b\x82\xd6\x8d\x56\xa8\xe2\xd6\xc6\xe4\x65\x88\xd8\xcc\x98\x64\x8a\x12\xf2\xef\x92\x74\x06\xc1\x8d\xb8\xcc\x7b\xb9\xe7\x3c\x6e\x87\x9d\x4a\xee\x44\xd8\xce\x5e\x27\x37\xfa\xc8\x58\xce\x08\xca\x0f\x84\xfe\xe5\x02\xbd\xc5\xe5\x15\x7a\x59\xf7\x11\xa5\x30\xd6\x75\x38\xe4\x8c\xde\xca\x3d\x69\x72\x27\x0a\x8f\x29\x38\x3f\xa0\x94\x43\x0b\xf7\x56\x5e\x53\xd4\xc1\x4d\x15\xb8\x64\x3a\x6c\xc2\x30\x1f\xc9\x27\xdc\xb9\x98\x7e\x49\x54\x93\x58\x79\xf3\x39\x91\x4e\x64\x36\x61\x78\xfa\x9a\xa8\x09\xc1\xc1\x79\xc5\x2a\xb9\x53\x47\x42\x29\x9c\x63\x19\xdc\x8e\xf5\x5b\x1d\xb1\x9c\x05\xc8\x9b\xd5\xb6\xa7\x34\x07\x4f\x06\x0f\xaf\x6f\xa4\x13\xb6\x8e\xde\x4d\xfc\x43\x7b\x0e\xfd\x98\x51\xa1\xce\x82\x3e\xaa\x6c\xd9\x8e\xcf\xf7\x48\x61\xa6\x7f\xdc\x76\x06\x91\x37\x10\xa5\xac\x97\xb6\x62\x84\x10\xad\xb3\xf5\xcd\xbe\x03\x00\x00\xff\xff\xb9\xcc\xb7\x2c\x91\x01\x00\x00"

func templatesDocsMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDocsMdTmpl,
		"templates/docs.md.tmpl",
	)
}

func templatesDocsMdTmpl() (*asset, error) {
	bytes, err := templatesDocsMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docs.md.tmpl", size: 401, mode: os.FileMode(420), modTime: time.Unix(1520555236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVm_functionsGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5b\x8f\xe2\x36\x14\x7e\xcf\xaf\x38\x8d\x18\xc9\xa9\x68\xf2\x4e\x4b\x25\xc4\x40\xb5\xd2\x32\xbb\x62\x10\x7d\xa8\xaa\x95\x27\x39\x09\xee\x3a\x76\xe4\x9c\x70\x29\xca\x7f\xaf\x6c\x27\x40\xd8\x6d\x67\x7a\x7b\x02\x9f\xeb\x77\xbe\xf3\xd9\x49\x12\x98\xeb\x0c\xa1\x40\x85\x86\x13\x66\xf0\x72\x82\x42\x5f\xce\xdf\xc3\xe3\x07\x78\xfa\xb0\x81\xc5\xe3\xbb\x4d\x1c\x54\x3c\xfd\xcc\x0b\x84\xf3\x19\x46\xf1\xc7\xee\xd0\xb6\x41\x20\xca\x4a\x1b\x02\x16\x04\x00\x61\x21\x68\xd7\xbc\xc4\xa9\x2e\x13\xa3\x5f\xd0\xd0\x67\x23\x4a\x54\x89\x26\xd2\x61\x10\x05\x41\xde\xa8\x14\x18\xc2\xb7\x0b\x55\x08\x85\x11\xcc\x0d\x72\xc2\xed\x8a\x45\x70\x0e\x00\x30\xde\xae\x60\x0a\x36\x3e\x7e\xc2\x03\x8b\x9c\xed\x9d\xfa\x0d\x53\xda\x72\x53\x3b\xc3\xf9\x0c\x86\xab\x02\x61\xf4\x69\x0c\xa3\x1c\x26\x53\x18\xc5\xcb\x46\xa5\x35\x7c\xd7\xb6\x5d\x95\xf8\x19\x89\x85\x16\x6e\x1e\x3f\xf1\xd2\x82\x0d\xc7\xce\x33\xb0\x75\xf5\x50\x65\x5d\xee\xa7\x31\xa0\x31\xb6\xa6\xab\xb2\x6e\x14\xdb\xae\x3e\x1a\x94\x9a\x67\x36\x58\xe4\xce\xff\xcd\x14\x94\x90\x0e\xb3\xed\xf7\x5e\x17\x05\x9a\xf8\x67\x41\xbb\xa5\x40\x99\xb1\x90\x0c\x4f\x31\x1c\x43\x48\xa6\xc1\x30\x8a\x97\x9c\xb8\xcc\x59\xf8\x7c\x52\xc4\x8f\xb6\x86\x36\x20\x14\x54\xbe\xf4\x04\x1e\xea\xd0\xb5\x8e\x17\xd6\xc5\x22\xdb\xac\xed\xc6\x17\x24\xb8\x14\xbf\xa3\x6f\xc3\xa2\xa0\x0d\x82\xe0\x4a\x83\xc8\x8e\xf7\x44\xd8\xd5\x04\x49\x02\x77\xe3\x82\xa8\x81\x2b\xe0\x0d\xe9\xeb\xe2\xed\x52\x48\x68\x15\xdb\x84\x65\x77\x98\xc0\x20\xd1\xba\xba\xb5\xf7\x9e\x1b\x15\x24\x09\x3c\x62\x9d\x1a\x51\xdd\xa6\xde\x98\xba\xa0\x59\x43\x3b\x6d\x7a\xbf\x3f\x59\xd7\x17\xb2\xb8\x83\xcd\x52\x2e\xa5\x57\x45\x8f\x6f\xce\xa5\x8c\xbc\x69\xcb\x65\x83\x6e\x15\x22\x07\x89\xca\x45\xc7\x33\x53\x34\x25\x2a\x7a\x2f\x6a\x8a\xe0\x47\xdb\x53\xa2\xb2\x45\x17\xc7\x0a\x53\xc2\x6c\x66\x8a\xcd\xa9\x42\x4b\xd6\x5f\x2c\xb2\x67\xc7\xee\x72\x28\xa7\xa8\x5b\x55\xb8\xd1\x1a\x4a\xae\x4e\xc0\xbb\x9e\xb5\xdd\xac\x43\x11\x46\xae\xb0\x41\x6a\x8c\xea\x26\xe0\xb2\x46\x87\x99\xf5\x3b\xfe\x73\xdc\x3f\xfc\xdf\xb8\x73\x3c\xfc\x63\xd8\x57\x05\x72\x2f\x41\xee\x24\xf8\x15\xa4\xfe\x6e\xed\xb9\x71\xab\xe7\x17\x39\xfa\xd3\x4f\xda\x46\x81\x8b\x31\xfc\x30\x33\x85\xb3\x8b\xec\x08\x6d\x7b\xb9\x8f\x03\x76\xd8\x4d\x44\x64\xfb\x69\x43\xec\xef\xdc\xcf\x57\xe9\xc9\x59\x38\xd7\x8d\xcc\x40\x69\x02\x74\x0d\x20\xb7\xb9\xdd\x55\x0d\x07\x93\xbc\x8d\xb0\xfa\x20\x28\xdd\xc1\xde\x8e\xf3\xc5\xa0\x31\xa3\x53\x85\xfe\x1d\x4c\x79\x8d\xf7\xe4\x4c\x5c\x87\x21\x7f\x5f\x2d\x73\x97\x67\x9b\x67\x98\xf3\x46\xd2\xe4\x5f\xd1\xd1\x73\x0f\x16\x27\x94\xa2\x2e\x39\xa5\xbb\x89\x25\xc7\x6d\x1b\x1e\xea\x31\x14\x9a\xe0\x61\x73\xe5\xe7\x02\x23\x1c\xc3\xfe\xad\xaa\xba\x3e\xc7\x1e\xcb\xda\x65\x3c\x93\x11\xaa\xb0\x63\xbb\xd7\xb9\x77\xa5\x28\xf6\x68\x2e\x4e\xaf\xa1\xed\x6a\x8d\x64\xe3\xec\x9f\xba\xd2\xaa\xc6\xf3\x50\xb2\xc6\x4b\xd6\xdc\x49\xd6\xb7\xba\x55\xed\xb5\xde\x2f\x6e\x26\x73\xa1\xe6\x57\x98\xc2\xc0\x72\x8f\x7e\x5f\xae\x91\xc6\xfe\xc7\xb1\x78\xf9\xae\x6c\xb4\x1f\xba\x2f\xdd\x49\xf7\x26\xf2\x3f\x51\xb0\x9f\x06\x52\xad\xf6\x68\x6a\xfb\x10\xe7\x5c\x48\xec\x35\x7c\x6d\x77\xfb\xd5\x79\x75\x43\x9d\xdb\x65\xdb\x4f\x51\x37\x73\xdb\xfe\x11\x00\x00\xff\xff\x47\x9a\xe4\xda\x55\x08\x00\x00"

func templatesVm_functionsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVm_functionsGoTmpl,
		"templates/vm_functions.go.tmpl",
	)
}

func templatesVm_functionsGoTmpl() (*asset, error) {
	bytes, err := templatesVm_functionsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vm_functions.go.tmpl", size: 2133, mode: os.FileMode(420), modTime: time.Unix(1520557369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/docs.md.tmpl": templatesDocsMdTmpl,
	"templates/vm_functions.go.tmpl": templatesVm_functionsGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"docs.md.tmpl": &bintree{templatesDocsMdTmpl, map[string]*bintree{}},
		"vm_functions.go.tmpl": &bintree{templatesVm_functionsGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

