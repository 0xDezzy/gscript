// Code generated by go-bindata.
// sources:
// generator/templates/docs.md.tmpl
// generator/templates/vm_functions.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDocsMdTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\x0b\x33\xab\x60\xf2\x01\x82\x8b\x82\xd6\x8d\x56\xa8\xe2\xd6\xc6\xe4\x65\x88\xd8\xcc\x98\x64\x8a\x12\xf2\xef\x92\x74\x06\xc1\x8d\xb8\xcc\x7b\xb9\xe7\x3c\x6e\x87\x9d\x4a\xee\x44\xd8\xce\x5e\x27\x37\xfa\xc8\x58\xce\x08\xca\x0f\x84\xfe\xe5\x02\xbd\xc5\xe5\x15\x7a\x59\xf7\x11\xa5\x30\xd6\x75\x38\xe4\x8c\xde\xca\x3d\x69\x72\x27\x0a\x8f\x29\x38\x3f\xa0\x94\x43\x0b\xf7\x56\x5e\x53\xd4\xc1\x4d\x15\xb8\x64\x3a\x6c\xc2\x30\x1f\xc9\x27\xdc\xb9\x98\x7e\x49\x54\x93\x58\x79\xf3\x39\x91\x4e\x64\x36\x61\x78\xfa\x9a\xa8\x09\xc1\xc1\x79\xc5\x2a\xb9\x53\x47\x42\x29\x9c\x63\x19\xdc\x8e\xf5\x5b\x1d\xb1\x9c\x05\xc8\x9b\xd5\xb6\xa7\x34\x07\x4f\x06\x0f\xaf\x6f\xa4\x13\xb6\x8e\xde\x4d\xfc\x43\x7b\x0e\xfd\x98\x51\xa1\xce\x82\x3e\xaa\x6c\xd9\x8e\xcf\xf7\x48\x61\xa6\x7f\xdc\x76\x06\x91\x37\x10\xa5\xac\x97\xb6\x62\x84\x10\xad\xb3\xf5\xcd\xbe\x03\x00\x00\xff\xff\xb9\xcc\xb7\x2c\x91\x01\x00\x00"

func templatesDocsMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDocsMdTmpl,
		"templates/docs.md.tmpl",
	)
}

func templatesDocsMdTmpl() (*asset, error) {
	bytes, err := templatesDocsMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docs.md.tmpl", size: 401, mode: os.FileMode(420), modTime: time.Unix(1520555236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVm_functionsGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xdb\x8e\xdb\x36\x10\x7d\xd7\x57\x4c\x09\x2f\x20\x15\x8e\xfc\xee\x76\x0b\x6c\xf7\x52\x04\xc8\x6e\x82\x5d\xc3\x7d\x08\x82\x80\x2b\x8d\x64\x36\x14\xe9\x92\x23\xef\xba\x86\xff\xbd\x18\x52\xb2\x2d\xe5\xd2\xb4\x45\x90\x27\x9b\x9c\xeb\x39\x67\x86\x9a\xcd\xe0\xd2\x96\x08\x35\x1a\x74\x92\xb0\x84\xc7\x2d\xd4\xf6\x70\xfe\x09\xae\x5e\xc3\xdd\xeb\x05\x5c\x5f\xbd\x5c\xe4\xc9\x5a\x16\x1f\x64\x8d\xb0\xdb\xc1\x24\x7f\xd3\x1d\xf6\xfb\x24\x51\xcd\xda\x3a\x82\x34\x49\x00\x44\xad\x68\xd5\x3e\xe6\x85\x6d\x66\xce\x3e\xa2\xa3\x0f\x4e\x35\x68\x66\x96\xc8\x8a\x24\x4b\x92\xaa\x35\x05\xa4\x08\x3f\x5e\x9b\x5a\x19\xcc\xe0\xd2\xa1\x24\x5c\xde\xa6\x19\xec\x12\x00\xcc\x97\xb7\x70\x0e\xec\x9f\xdf\xe1\x53\x9a\x85\xbb\x97\xe6\x0f\x2c\x68\x29\x9d\x0f\x17\xbb\x1d\x38\x69\x6a\x84\xc9\xfb\x29\x4c\x2a\x98\x9f\xc3\x24\xbf\x69\x4d\xe1\xe1\xc5\x7e\xdf\x65\xc9\x1f\x90\x52\xc1\xed\x56\xf9\x9d\x6c\xb8\x59\x31\x0d\x96\xc1\x5d\x97\x0f\x4d\xd9\xc5\xbe\x9f\x02\x3a\xc7\x39\x43\x96\xfb\xd6\xa4\xcb\xdb\x37\x0e\xb5\x95\x25\x3b\xab\x2a\xd8\x7f\x38\x07\xa3\x74\xe8\x99\xeb\xbd\xb2\x75\x8d\x2e\xff\x5d\xd1\xea\x46\xa1\x2e\x53\x41\x4e\x16\x28\xa6\x20\xc8\xb5\x28\xb2\xfc\x46\x92\xd4\x55\x2a\x1e\xb6\x86\xe4\x33\xe7\xb0\x0e\x94\x81\x75\x4c\x3d\x87\x33\x2f\x42\xe9\xfc\x9a\x4d\x69\xc6\xc5\xf6\x1d\x7c\x45\x4a\x6a\xf5\x17\xc6\x32\x69\x96\xec\x93\x24\x39\xd2\xa0\xca\xe7\x31\x11\x2c\x4d\x32\x9b\xc1\x08\x2e\x28\x0f\xd2\x80\x6c\xc9\x1e\x85\x67\x51\x48\x59\x93\x73\xc0\x4d\x77\x98\xc3\x20\x90\x4d\x9d\xec\xbd\xe5\x64\x0a\x66\x33\xb8\x42\x5f\x38\xb5\x3e\x0d\x3d\xb9\xea\x9c\x2e\x5a\x5a\x59\xd7\xdb\xe3\x89\x4d\x1f\x8d\xc5\xa8\xed\xb4\x90\x5a\xc7\xa9\xe8\xfb\xbb\x94\x5a\x67\xf1\x6a\x29\x75\x8b\x41\x0a\x55\x81\x46\x13\xbc\xf3\x0b\x57\xb7\x0d\x1a\x7a\xa5\x3c\x65\xf0\x0b\xd7\xd4\x68\x38\xe9\xf5\xf3\x1a\x0b\xc2\xf2\xc2\xd5\x8b\xed\x1a\x99\xac\x2f\x08\xd9\xb3\xc3\x5a\x0e\xc7\x29\xfb\x92\xde\x51\x45\xb1\xb0\x16\x1a\x69\xb6\x20\xbb\x76\x3c\x8b\x1e\x1a\x14\x59\xa8\xe9\x90\x5a\x67\x3a\x70\x52\x7b\x0c\x70\xd2\x5e\xfe\xcf\x43\xfa\xf9\x3b\x42\xaa\xf0\xe9\x3f\x23\x3a\xce\xad\x8c\x83\x2b\xc3\xe0\x7e\x02\x44\xdc\xc8\xdd\xee\x45\xd8\xba\x3f\x61\x22\xf3\xdf\x2c\x9b\x40\xbc\x7d\xf7\xb8\x25\x14\x8c\x13\x62\xce\x89\x3c\x0c\x79\x5c\x5e\x2e\xba\xb0\xbf\x6e\x09\x1f\xb4\x2a\x70\x48\x61\x1a\x22\x54\xf9\xcc\x6f\x40\xff\x08\x68\x1f\xa6\x19\x60\x23\xdd\x28\x65\x3c\x75\xd5\x83\x8f\x93\x4f\x17\xae\x3e\x49\x73\x78\x38\x3e\x5f\x88\x21\x5a\x47\xe9\xbf\x79\x48\xfe\x8f\x58\x55\x2a\x2e\x6d\xab\x4b\x30\x96\x00\x43\x6d\xa8\xd8\xbf\x7b\x6e\xc4\x00\xe4\xd7\xc9\xe7\x9f\x14\x15\x2b\xd8\x30\xd2\x8f\x38\xc8\x53\xda\xae\x31\xbe\xe5\x85\xf4\x38\xe6\x6d\x1e\x2a\x0c\xa9\xfd\x64\x9a\x51\x1c\x17\x2f\xb1\x92\xad\xa6\xf9\xb7\x62\xaa\x57\x0c\x18\x02\x34\xca\x37\x92\x8a\xd5\x9c\x79\x0b\x63\x09\x67\x7e\x0a\xb5\x25\x38\x5b\x1c\xa9\x3b\x74\x28\xa6\xb0\xf9\xda\xf1\x3f\x7e\x6d\xc6\x87\x49\x95\xdf\x87\xf0\x07\x72\xca\xd4\x87\x61\xee\x4d\x05\xaa\x0d\xba\x83\x31\x8e\xe1\xf2\xf6\x1e\x89\xfd\xf8\x8f\x5f\x5b\xe3\x71\x37\x5c\x34\x17\x17\xcd\x8d\x16\x2d\x96\x3a\xdd\xb5\x63\xbe\xb7\x01\xa0\x3b\x50\xf8\x0e\xce\x61\x70\x33\xee\x7e\xd3\xdc\x23\x4d\xe3\x4f\xa0\xf4\xf0\x0d\x5d\xd8\xc8\x40\x9f\xba\x9b\xfe\x13\xcf\x6f\xbd\x04\x11\x28\x14\xd6\x6c\xd0\x79\xfe\x1e\x55\x52\x69\xec\xd7\xe0\xd8\xc9\xe9\xc7\xf7\x1f\x95\xec\xcc\x21\x9a\xbf\xc8\x1d\x1d\xfb\xfd\xdf\x01\x00\x00\xff\xff\x39\x5b\x36\xf1\x5c\x09\x00\x00"

func templatesVm_functionsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVm_functionsGoTmpl,
		"templates/vm_functions.go.tmpl",
	)
}

func templatesVm_functionsGoTmpl() (*asset, error) {
	bytes, err := templatesVm_functionsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vm_functions.go.tmpl", size: 2396, mode: os.FileMode(420), modTime: time.Unix(1520577362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/docs.md.tmpl": templatesDocsMdTmpl,
	"templates/vm_functions.go.tmpl": templatesVm_functionsGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"docs.md.tmpl": &bintree{templatesDocsMdTmpl, map[string]*bintree{}},
		"vm_functions.go.tmpl": &bintree{templatesVm_functionsGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

