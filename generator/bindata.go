// Code generated by go-bindata.
// sources:
// generator/templates/comment.go.tmpl
// generator/templates/docs.md.tmpl
// generator/templates/vm_functions.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommentGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6f\xe2\x30\x10\x85\xef\xfc\x8a\x77\xc8\x61\x77\xb5\xe0\x3b\x15\x07\xa4\xa2\x56\x3d\x54\x15\xed\xbd\x32\xc9\xc4\x31\x25\x76\x34\x76\x28\x55\x94\xff\x5e\xd9\x4e\x81\x80\x38\xf4\x38\x33\x4f\x6f\xbe\x37\x23\x04\xba\x0e\xd9\xec\x59\xd6\x84\xbe\xc7\x34\x95\xf7\xe4\x72\xd6\x8d\xd7\xd6\xa0\xef\x27\x42\x4c\x84\xc0\x8b\xcc\x3f\xa4\xa2\xa1\x8a\xba\xa1\x75\xd2\x2c\x5b\x5f\x59\x1e\x8a\xc1\x2c\xf5\x4e\x9a\x27\xb9\x97\xc9\x7e\x68\x3c\x12\x13\xb4\x83\xaf\xe8\x6c\x88\x9a\x7c\x65\x0b\x38\xad\x8c\xf4\x2d\xd3\x3c\x68\x93\xe5\x9a\x72\xd2\x7b\xe2\x57\xcf\xda\xa8\xb3\xf5\xac\xda\x9a\x8c\x77\x17\xce\x12\x3b\xed\x3c\x6c\x19\x77\xc8\x1f\x15\x4a\xcb\x97\x5b\xcb\xd6\xe4\x21\xf7\x7c\xd2\x75\x53\xb0\x34\x8a\x90\xbd\xff\x47\x26\x31\x5f\x20\x9b\xad\x0e\x0d\xe5\x9e\x8a\x25\xab\xb7\xaf\x86\x5c\x5a\x0e\xfc\x8b\x64\xf2\x78\xc9\x3f\xa9\x7c\xb0\x41\x85\xbe\xff\x1b\xfd\xc8\x14\x27\xda\x35\xf9\x96\xcd\x6d\xd6\x52\xd3\xae\x70\xd0\x26\x32\x72\x54\xc3\x6e\xb6\x94\xfb\x2b\x3a\x1e\xd3\x25\xeb\x0b\x40\xbb\xd9\xce\x02\x15\x8f\x21\x79\x0c\x19\x19\xa7\x47\xc8\xd5\x41\xd6\xcd\x2e\x7c\x1d\x23\x4a\x03\x4a\x93\x40\x5a\xd9\x4f\x78\x8b\xd6\x11\x7c\xa5\xdd\xf1\x88\x81\x5d\xa5\xc3\xa6\xef\xed\x25\x07\x0c\x2c\x6e\xfc\xf1\xee\xf7\xb9\x84\xb8\x0e\x36\x8e\xf1\x1d\x00\x00\xff\xff\xc1\x69\x89\x83\xe5\x02\x00\x00"

func templatesCommentGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommentGoTmpl,
		"templates/comment.go.tmpl",
	)
}

func templatesCommentGoTmpl() (*asset, error) {
	bytes, err := templatesCommentGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/comment.go.tmpl", size: 741, mode: os.FileMode(420), modTime: time.Unix(1520657252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDocsMdTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\x0b\x33\xab\x60\xf2\x01\x82\x8b\x82\xd6\x8d\x56\xa8\xe2\xd6\xc6\xe4\x65\x88\xd8\xcc\x98\x64\x8a\x12\xf2\xef\x92\x74\x06\xc1\x8d\xb8\xcc\x7b\xb9\xe7\x3c\x6e\x87\x9d\x4a\xee\x44\xd8\xce\x5e\x27\x37\xfa\xc8\x58\xce\x08\xca\x0f\x84\xfe\xe5\x02\xbd\xc5\xe5\x15\x7a\x59\xf7\x11\xa5\x30\xd6\x75\x38\xe4\x8c\xde\xca\x3d\x69\x72\x27\x0a\x8f\x29\x38\x3f\xa0\x94\x43\x0b\xf7\x56\x5e\x53\xd4\xc1\x4d\x15\xb8\x64\x3a\x6c\xc2\x30\x1f\xc9\x27\xdc\xb9\x98\x7e\x49\x54\x93\x58\x79\xf3\x39\x91\x4e\x64\x36\x61\x78\xfa\x9a\xa8\x09\xc1\xc1\x79\xc5\x2a\xb9\x53\x47\x42\x29\x9c\x63\x19\xdc\x8e\xf5\x5b\x1d\xb1\x9c\x05\xc8\x9b\xd5\xb6\xa7\x34\x07\x4f\x06\x0f\xaf\x6f\xa4\x13\xb6\x8e\xde\x4d\xfc\x43\x7b\x0e\xfd\x98\x51\xa1\xce\x82\x3e\xaa\x6c\xd9\x8e\xcf\xf7\x48\x61\xa6\x7f\xdc\x76\x06\x91\x37\x10\xa5\xac\x97\xb6\x62\x84\x10\xad\xb3\xf5\xcd\xbe\x03\x00\x00\xff\xff\xb9\xcc\xb7\x2c\x91\x01\x00\x00"

func templatesDocsMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDocsMdTmpl,
		"templates/docs.md.tmpl",
	)
}

func templatesDocsMdTmpl() (*asset, error) {
	bytes, err := templatesDocsMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docs.md.tmpl", size: 401, mode: os.FileMode(420), modTime: time.Unix(1520657252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVm_functionsGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\xa6\xaa\x03\x48\x85\x43\xf5\x6c\x34\x05\xd2\x20\xe9\x25\x5e\x2c\x12\xc3\x3d\x2c\x16\x0b\x9a\x1a\xc9\xec\x52\xa4\x4a\x8d\x9c\xb8\x82\xfe\xbd\x20\x29\xd9\xb2\x37\xd9\x6e\x5b\x04\x3d\x18\x96\xc8\x99\xf7\xe6\x3d\xce\x88\x59\x06\xef\xb9\xf8\xcc\x4b\x04\xd4\xa5\xd4\x08\xb2\x01\xda\x22\xd4\xc3\x2a\x6d\x39\x81\xac\x6a\x85\x15\x6a\x0a\x7b\x65\x23\xac\xac\x09\xd6\xd2\x52\xcb\x15\x2c\xb9\xd8\xba\xd4\x64\xbd\x4c\x59\x94\x65\xe0\x7e\xeb\x25\xdc\xb5\x5a\x90\x34\xba\x39\x02\x60\xbe\x88\xba\x0e\x2c\xd7\x25\xc2\x4c\xc9\xcd\x3b\x5e\xe1\xdc\x3f\xc1\xe2\x0a\x66\xec\x5e\x6e\x1a\xb8\xec\xfb\x28\xcb\x1c\xca\xbd\xdc\x58\x6e\xf7\xd0\x75\x87\x68\x38\x6c\x4e\xf0\xf5\x59\xc4\x94\xe5\xd3\x1c\x66\x85\x47\x57\x72\xc3\x5c\xd2\xc8\x00\x3e\xab\x60\x0f\x28\x50\xee\xd0\x3e\x92\x95\xba\x84\xbe\x87\x4b\xd8\x12\xd5\xcd\x22\xcb\x4a\x93\x1b\xc1\x8c\x2d\xb3\x52\xd2\xb6\xdd\x30\x61\xaa\xac\x44\xfd\xa3\x90\x39\x66\x83\x15\x59\x30\x2f\xfb\xfe\xd6\xff\xb3\x00\x3b\x56\xdb\x75\x80\x3a\xf7\x9c\x93\xc7\x2c\x8b\x46\x93\x5d\x38\x1b\xcf\xa1\xef\xa3\x48\x56\xb5\xb1\x04\x49\x14\x01\xc4\x13\x5e\x6b\x36\x68\xe9\xb3\x95\x15\xea\xcc\x10\x99\x38\x4a\xa3\xa8\x68\xb5\x80\x04\xe1\x87\xc0\x9e\xc2\x8d\x45\x4e\xb8\x5e\x26\x29\x74\x11\x00\xb2\xf5\x12\xae\xc0\xc5\xb3\x77\xf8\x94\xa4\x7e\x4d\xea\xdf\x51\xd0\x9a\xdb\xc6\x2f\xbc\xe4\xd7\xc4\xac\x80\xc2\x1e\x91\x92\xf8\x44\x5d\x3c\x07\x64\xbb\xea\x64\x6d\xc0\x1b\x95\x02\x7c\x9a\x03\x5a\xeb\x30\x3d\xca\x43\xab\x93\x5d\xf5\xde\xa2\x32\x3c\x77\xc1\xb2\xf0\xfb\xdf\x5d\x81\x96\xca\xd7\xec\xf8\xee\x4d\x59\xa2\x65\xbf\x49\xda\xde\x49\x54\x79\x12\x93\xe5\x02\xe3\x39\xc4\x64\x5b\x8c\x53\x76\xc7\x89\xab\x22\x89\x1f\xf7\x9a\xf8\xb3\xc3\x30\xd6\x35\x43\x1d\xa0\x17\x70\xd1\xc4\x9e\x9a\xdd\xba\xad\x24\x75\x64\xfd\x20\x5f\x92\xe4\x4a\xfe\x89\x81\x26\x49\xa3\x3e\x8a\x26\x6d\x23\xf3\xe7\x73\x23\xfa\xfe\x4b\xaf\xcf\xa4\x27\x82\x2b\x15\xac\x1e\xdb\xf3\x86\x2b\x95\x86\xa5\x35\x57\x2d\x7a\x7d\xb2\x00\x85\xda\x47\xb3\x6b\x5b\xb6\x6e\x38\xee\x65\x43\x29\xfc\xec\xac\x53\xa8\x1d\xe8\xed\x73\x8d\x82\x30\xbf\xb6\xe5\x6a\x5f\xa3\xab\xe0\x2b\xee\x14\x03\xa1\x33\xe8\xf4\x8c\xd2\xaf\x99\x18\xac\x89\x57\xc6\x40\xc5\xf5\x1e\xf8\x50\x8e\x1f\x2b\x5f\x60\x9c\x7a\x4e\x8b\xd4\x5a\x3d\x88\xe3\xaa\x41\x2f\x27\x19\x3d\x7d\x5d\xd2\x4f\xff\xa3\xa4\x02\x9f\xfe\xb5\xa2\x63\x33\xf0\xd0\x0d\xdc\x77\xc3\x0b\x22\x42\x9b\x77\xdd\xa5\x6f\xe5\x3f\x60\xc6\xd9\xaf\xc6\x6d\x41\xfc\xe1\xe3\x66\x4f\x18\x3b\x9d\x10\x30\x67\x7c\x54\x31\x4c\x84\x23\x5d\x99\x5f\xf6\x84\x8f\x4a\x0a\x3c\xb5\x30\xf1\x19\x32\x7f\x76\x83\x35\x4e\x96\x6a\xfc\x87\x02\x60\xc7\xed\x19\x64\x78\x1b\xd8\x7d\x8c\xe5\x4f\xd7\xb6\x9c\xc0\x1c\xa6\xf1\x75\x22\x27\xd1\x58\x4a\xfe\xc9\x74\xfe\x97\xc3\x2a\x92\xf8\xc6\xb4\x2a\x07\x6d\x08\xd0\x73\x43\xe1\xe2\x87\x19\x8e\x4f\x44\x7e\xdb\xf1\x35\x4f\x92\xc4\x16\x76\x4e\xe9\x17\x1e\xb0\x84\xf6\x35\x86\x0f\xa4\xe0\x0d\x9e\xfb\xb6\xf0\x0c\xa7\xd6\xbe\x08\x73\x96\xe7\xc8\x73\x2c\x78\xab\x68\xf1\x56\x4e\x8d\x27\x06\x4e\x02\x54\xb2\xa9\x38\x89\xed\xc2\xf9\xe6\xdb\x12\x2e\x9a\x39\x94\x86\xe0\x62\x75\xb4\xee\x50\x61\x3c\x87\xdd\xb7\xb6\xff\xf1\x13\x7e\xfe\xe2\xaf\x4d\x97\x7e\xbc\x34\x7d\x33\xbf\x72\xa3\x86\x36\x5c\x2f\x1f\x90\x5c\x9c\x7b\x68\x6a\xa3\x1b\xec\x4e\x07\xcd\x86\x41\xb3\x67\x83\x16\xa8\xa6\xb3\x76\xc4\xfb\xe0\x05\xda\x83\x85\x1f\xe1\x0a\x4e\x56\xce\xab\xdf\x55\x0f\x48\xf3\xf0\xe7\x2d\x3d\x5c\x4c\x2b\x13\x1c\x18\xa1\x87\xee\x9f\x44\xbe\xf5\x10\x04\xa1\x20\x8c\xde\xa1\x6d\xa4\xd1\x50\x70\xa9\x70\x1c\x83\x63\x25\xd3\x1b\xed\x6f\x4f\x72\xd8\xf6\xd9\xee\x9a\x1b\xec\xe8\xfb\xbf\x02\x00\x00\xff\xff\x1d\x96\x14\x52\x00\x0a\x00\x00"

func templatesVm_functionsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVm_functionsGoTmpl,
		"templates/vm_functions.go.tmpl",
	)
}

func templatesVm_functionsGoTmpl() (*asset, error) {
	bytes, err := templatesVm_functionsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vm_functions.go.tmpl", size: 2560, mode: os.FileMode(420), modTime: time.Unix(1520657252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/comment.go.tmpl": templatesCommentGoTmpl,
	"templates/docs.md.tmpl": templatesDocsMdTmpl,
	"templates/vm_functions.go.tmpl": templatesVm_functionsGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"comment.go.tmpl": &bintree{templatesCommentGoTmpl, map[string]*bintree{}},
		"docs.md.tmpl": &bintree{templatesDocsMdTmpl, map[string]*bintree{}},
		"vm_functions.go.tmpl": &bintree{templatesVm_functionsGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

