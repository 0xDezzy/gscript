// Code generated by go generate; DO NOT EDIT.
package {{ $.Package }}

import (

  "github.com/robertkrimen/otto"
)

func (e *Engine) CreateVM() {
  e.VM = otto.New()
  e.InjectVars()
  {{ range $_, $f := $.Funcs -}}
  e.VM.Set("{{ $f.Name }}", e.VM{{ $f.Name }})
  {{ end -}}
  _, err := e.VM.Run(VMPreload)
  if err != nil {
    e.Logger.WithField("trace", "true").Fatalf("Syntax error in preload: %s", err.Error())
  }
  e.InitializeLogger()
}


{{ range $idx, $f := $.Funcs }}


// VM{{ $f.Name }} is an autogenerated function.
// Function: {{ $f.Name }}
// Package: {{ $f.Package }}
// Description: {{ $f.Description }}
// Author: {{ $f.Author }}
func (e *Engine) VM{{ $f.Name }}(call otto.FunctionCall) otto.Value {
  if len(call.ArgumentList) > {{ len $f.ExpectedArgTypes }} {
    e.Logger.WithField("function", "{{ $f.Name }}").WithField("trace", "true").Error("Too many arguments in call.")
    return otto.FalseValue()
  }
  if len(call.ArgumentList) < {{ len $f.ExpectedArgTypes }} {
    e.Logger.WithField("function", "{{ $f.Name }}").WithField("trace", "true").Error("Too few arguments in call.")
    return otto.FalseValue()
  }
  {{ range $aidx, $a := $f.ExpectedArgTypes -}}
  {{- if eq $a.GoType "[]byte" }}  
  {{ $a.Name }} := e.ValueToByteSlice(call.Argument({{ $aidx }}))
  {{ else }}
  var {{ $a.Name }} {{ $a.GoType }}
  rawArg{{ $aidx }}, err := call.Argument({{ $aidx }}).Export()
  if err != nil {
    e.Logger.WithField("function", "{{ $f.Name }}").WithField("trace", "true").Errorf("Could not export field: %s", "{{ $a.Name }}")
    return otto.FalseValue()
  }
  switch v := rawArg{{ $aidx }}.(type) {
  case {{ $a.GoType }}:
    {{ $a.Name }} = rawArg{{ $aidx }}.({{ $a.GoType }})
  default:
    e.Logger.WithField("function", "{{ $f.Name }}").WithField("trace", "true").Errorf("Argument type mismatch: expected %s, got %T", "{{ $a.GoType }}", v)
    return otto.FalseValue()
  }
  {{ end -}}
  {{ end -}}
  {{ $f.ReturnString }} := e.{{ $f.ReceiverString }}
  rawVMRet := VMResponse{}
  {{ range $ridx, $r := $f.ExpectedReturnTypes -}}
    rawVMRet["{{ $r.Name }}"] = {{ $r.Name }}
  {{ end -}}
  vmRet, vmRetError := e.VM.ToValue(rawVMRet)
  if vmRetError != nil {
    e.Logger.WithField("function", "{{ $f.Name }}").WithField("trace", "true").Errorf("Return conversion failed: %s", vmRetError.Error())
    return otto.FalseValue()
  }
  return vmRet
}

{{ end }}