// Code generated by go generate; DO NOT EDIT.
package engine

import (
	"github.com/robertkrimen/otto"
)

func (e *Engine) CreateVM() {
	e.VM = otto.New()
	e.InjectVars()

	e.VM.Set("Asset", e.VMAsset)

	_, err := e.VM.Run(VMPreload)
	if err != nil {
		e.Logger.WithField("trace", "true").Fatalf("Syntax error in preload: %s", err.Error())
	}
}

// VMAsset is an autogenerated function.
// Function: Asset
// Package: core
// Description: Retrieves a packed asset from the VM embedded file store.
// Author: Alex
func (e *Engine) VMAsset(call otto.FunctionCall) otto.Value {
	if len(call.ArgumentList) > 1 {
		e.Logger.WithField("function", "Asset").Error("Too many arguments in call.")
		return otto.FalseValue()
	}

	if len(call.ArgumentList) < 1 {
		e.Logger.WithField("function", "Asset").Error("Too few arguments in call.")
		return otto.FalseValue()
	}

	var assetName string

	rawArg0, err := call.Argument(0).Export()
	if err != nil {
		e.Logger.WithField("function", "Asset").Error("Could not export field: %s", "assetName")
		return otto.FalseValue()
	}

	switch v := rawArg0.(type) {
	case string:
		assetName = rawArg0.(string)
	default:
		e.Logger.WithField("function", "Asset").Error("Argument type mismatch: expected %s, got %T", "string", v)
		return otto.FalseValue()
	}

	fileData, err := e.Asset(assetName)

	rawVMRet := VMResponse{}

	rawVMRet["fileData"] = fileData

	rawVMRet["err"] = err

	vmRet, vmRetError := e.VM.ToValue(rawVMRet)
	if vmRetError != nil {
		e.Logger.WithField("function", "Asset").Error("Return conversion failed: %s", vmRetError.Error())
		return otto.FalseValue()
	}

	return vmRet

}
