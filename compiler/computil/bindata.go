// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f\x29\xc9\x07\x04\x00\x00\xff\xff\xfd\x5e\x58\x46\x1a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 26, mode: os.FileMode(420), modTime: time.Unix(1531615133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x7d\x4f\xe4\xb8\x19\xff\x9b\xf9\x14\x4f\x53\xa8\x92\x55\xc8\xb0\xd7\xaa\x95\x68\xa9\x04\xcc\xdc\x1e\xb7\x2c\xac\x18\x6e\x4f\x15\xb7\xe2\x3c\xc9\x33\xc1\x4b\xc6\xce\xd9\x1e\x60\x16\xcd\x77\xaf\x1e\xdb\x79\x65\x78\xd9\x52\xb5\x52\xd5\x3f\x10\x13\xe7\x79\x7f\xf9\xf9\xb1\x53\xb2\xf4\x9a\xe5\x08\x73\xc6\xc5\x60\xc0\xe7\xa5\x54\x06\xc2\x01\x40\x30\x5d\x1a\xd4\xc1\x60\x23\x48\xe5\xbc\x54\xa8\xf5\x30\xff\xca\xcb\x80\x5e\xa5\x6a\x59\x1a\x39\x64\xf4\xbe\x79\x4c\x79\x79\x85\x8a\x38\x50\xa4\x32\xe3\x22\x1f\x4e\x99\xc6\x3f\xff\xc9\x12\xcd\xe6\x86\x5e\x71\x19\x0c\xe8\x31\xe7\xe6\x6a\x31\x4d\x52\x39\x1f\xe6\x28\x76\x52\x9e\xe1\x30\xd7\xa9\xe2\xa5\x19\xa2\xc8\xb9\xc0\xa0\x47\xa6\xe4\x14\x95\xb9\x56\x7c\x8e\x62\x28\x8d\x91\x44\x70\x7f\x0f\x7c\x06\x9b\xc9\x0f\x4c\x8f\x70\xba\xc8\x73\x2e\xf2\xb1\x60\xd3\x02\x33\xd8\x5e\xad\x06\x00\xcf\xe8\xca\x2c\x17\x99\x4d\xc2\xb6\x01\x45\x06\x96\xaf\x25\xf9\x58\x7e\xbb\xdc\x42\x92\xd4\xa1\x36\x4c\x64\x4c\x65\x3d\xf1\x03\x80\xe1\x10\x8e\x6c\xb4\xb9\xc8\x61\xce\xf4\xb5\x76\x4a\x15\x13\x39\xc2\x26\x2f\x63\xd8\x9c\x73\xd8\xdd\x83\xcd\xe4\x98\x8b\x6b\x54\xc9\x07\xa6\xaf\x31\x73\x5c\x1a\xbc\x15\xf7\xf7\x44\x97\x9c\xe0\xed\x7e\xc1\x19\x2d\x43\x40\x6b\xbc\x84\xd5\xca\x87\xc8\x6b\x8d\x06\x83\x1b\xa6\x6c\x76\xc9\x16\xaf\xe9\x32\x86\x4d\x9c\x4f\x31\x73\xba\xc6\xf4\xb3\x96\x3e\x1c\x5a\x05\xf6\x7d\x72\x34\x22\xe9\x57\xb2\xc8\x34\x98\x2b\x84\x8c\x19\x06\x33\xa9\xc0\xbe\xce\x30\x83\x19\x2f\xb0\xc5\x70\xaa\x78\x7e\xc2\xe6\xd8\xb6\xb5\x2d\x6a\xcf\x99\xea\x96\x46\x24\x8d\x4c\xee\x86\x2a\x1a\x0c\xbc\x11\x9e\xe9\x56\xb1\xd2\xe9\xcf\x51\xa0\xe6\x1a\x3e\x7d\xb0\x56\x58\x9a\x4a\x9d\x59\x96\xd8\xe6\xd2\x46\x2d\x52\x03\xf7\x03\x80\x31\xbc\x71\x15\x96\x8c\xed\xbf\x01\xc0\x7b\xb8\xf8\x4c\xf5\xfe\xc2\x8a\x1a\xc1\x9b\xaa\x6e\x92\x91\xff\xd1\xb5\x7a\x65\xad\x3e\xc1\xdb\x96\x09\xa9\x42\x66\xb0\x6b\xba\x5a\x08\xc3\xe7\x68\xed\x77\x95\xd3\x75\x63\xb6\x10\x69\x57\x4c\x18\xc1\x9b\x96\x50\x72\xc8\x20\xa5\xce\xfb\x74\x82\xb7\x61\xd0\x96\x11\xc4\x2e\xca\x8e\x21\x88\xe1\x8f\x3b\x31\x04\xe3\x3b\x4c\x17\x06\x83\xe8\x45\xa5\xce\x0a\xd2\x50\x15\x33\xe9\x98\xf8\xdf\xc7\xb6\xce\x43\xc1\x8b\x4a\x4d\xa3\x76\xc6\x0a\x8d\xfe\x5f\x64\xe5\x18\x4c\x26\x68\x3c\x0f\x2b\xa2\x27\x9a\xee\x41\xf0\xbd\x29\x99\x75\xb6\x0e\x3f\xb9\x6b\x30\xea\xd4\x39\x80\x24\x9a\x3f\x34\x5e\xdf\x5b\xd6\xf1\x2e\x18\x8c\xab\x4a\x7c\x36\xcb\x00\xa3\x5d\xc8\x6a\x86\x96\x99\xf4\xa7\xd0\x2c\x94\x00\xe9\x53\x6d\x75\x7d\xbf\x10\xa9\xe1\x52\xbc\xc7\x25\x04\x0e\x4b\x2f\x99\xd6\x68\x74\x40\xb9\xe2\xbe\x73\xdd\x12\x70\x61\xe4\xb7\x17\x43\x28\xdb\xf9\x8f\x5e\xa2\x38\x8c\x00\x95\xa2\x0e\xe9\x40\x0c\xf2\x6c\x6d\xeb\x6f\xf7\x7a\x9f\x67\xae\x57\x1f\xef\x6b\x99\x8c\x13\x0f\x4b\x17\x41\xc3\x13\x7c\x86\x3d\x20\xa3\xc3\xc8\xf7\x17\xdc\xfb\xc8\x0e\x87\xf0\x93\xa0\xbd\x07\x95\x6d\xe8\x92\xfe\x73\x73\x05\xa9\x14\xda\x40\x86\x69\xc1\x14\x66\xc0\xa6\xf2\x06\x3d\x8f\x8f\x78\xe3\xfc\x28\xec\x01\x8a\x2b\xb2\x55\x53\x0c\xce\x15\xcf\x28\x78\xf1\x68\xb2\x4a\x85\x85\x64\x59\x27\x4d\x94\x9a\x2a\x25\xfe\x3d\x14\x7c\xaa\x98\x5a\xbe\x36\x45\x2d\x75\x9d\xe4\x54\x45\x95\x8c\x93\x63\xc9\xb2\x89\xd5\x10\x56\xe4\x49\xae\x83\xb8\x1b\xec\xcb\xcb\x8f\x67\xe3\xe3\xd3\xfd\x51\xf0\x39\x8c\xa2\xe7\x6a\xd1\x59\x6c\x9d\x24\x79\xce\xc5\x35\x6e\x3c\x2c\xcd\x4f\x1f\xbe\xb1\xfa\x1a\x55\x2f\x71\xb0\x07\x1c\x3d\x17\xc7\x27\xe7\x67\xff\xf8\x78\x7a\x74\x72\xfe\xb4\x97\xe8\x31\x8d\x3c\xf0\xbf\x1f\x6c\x14\xcc\xd8\x15\x14\x46\x2d\xa1\x94\x5c\x18\x08\x33\x9c\x71\x81\x19\x4c\x97\x70\x83\x4a\x73\x29\x62\x58\xe8\x05\x2b\x8a\x25\x8c\xb0\x2c\xe4\x92\xb4\xbe\xd0\xff\x96\x11\xfd\xbe\x7b\x16\x71\x64\x32\x4a\x8e\xc4\x17\x4c\x8d\x25\x39\x94\x42\xcb\x02\xc3\x07\x30\x49\xf1\x71\xbc\xfb\xb6\xc9\x2d\xc5\x65\x4c\xda\xa8\x93\xe9\xf5\x21\x2b\x8a\xca\xae\x9f\xb9\xb9\x3a\xe7\x73\x94\x0b\x13\x06\xce\x21\x8b\xfb\x3e\x19\xa8\xd4\x73\x85\x23\x98\xe1\x37\x2e\xb0\xdc\xda\xe7\x07\x80\xa5\x60\x73\x9e\xda\x40\x15\x34\xa3\x64\xe0\x28\x6d\xd7\x93\x90\x35\x28\xe7\x77\xeb\xd7\x03\x5c\x63\x54\x27\xd0\x34\xe2\x50\x20\xec\xca\x00\xec\xef\x3d\xdb\xfc\x6e\xea\xda\xde\x86\x83\xf1\xbb\xa3\x13\x38\xd9\x3f\x3f\xfa\x34\x86\x8f\xfb\x87\xef\xf7\xdf\x8d\xe1\xe8\xc3\xc7\xd3\xb3\xf3\x49\x07\x22\x85\x8e\x61\xb3\xbc\xce\x1d\x3e\xbe\x93\x1f\xdd\xb4\x7c\xb0\x24\x8b\x75\xc9\x52\x6c\xa3\x65\x33\xcf\x91\xcd\xe5\x75\xee\x8b\xf8\x23\x33\x57\x14\xba\x85\xc8\x50\x81\xa8\x59\x2b\x2a\x37\xd7\x55\xbd\x17\x4a\xc5\x73\x2e\x6c\x50\x6f\x99\xb6\x54\x42\xd7\xe8\x76\x29\xca\xf5\x7c\xb4\xe3\x55\x33\x80\x8d\x8c\x37\xb6\x82\xdc\xc6\x96\x5d\xb7\x53\x3f\x30\x30\x88\x3d\x29\x89\x6c\x11\xd5\x8d\xe9\x5f\x4f\x96\xf3\xa9\x2c\xce\xa9\xfe\x76\x61\xce\xca\x0b\x6d\x14\x17\xf9\xe7\x37\x1d\xf5\x94\xb2\xfb\x55\x5c\x43\x72\x3b\xae\x33\x9e\xdd\xc5\xb0\x39\xb3\x71\x25\x15\x93\x45\x9a\xa2\xd6\xb3\x45\x51\x2c\xed\xb4\x9b\x11\xbb\x6e\xed\xc5\xc3\x21\xec\x67\x74\xa8\xa8\x6b\xcb\xb5\x2f\x2a\x5b\x4e\xbd\xba\x83\x9e\xed\x09\x3d\xcf\xea\x32\xa2\x78\x19\x09\xda\x3a\x02\x86\x3c\xf1\x6a\x2e\xc5\x6c\x6d\x78\x2d\x3f\xcf\xee\xd6\x46\xda\xba\xea\x05\x74\xa2\xd7\xd1\x58\xc7\x0f\x60\xc2\x73\xc1\xcc\x42\x35\x74\xf5\x4a\x97\x90\xd8\x77\x41\x26\xad\x51\xc6\x92\xdb\x9f\x15\xd9\xaa\xb6\x7d\x7d\x69\x24\xad\x84\x5d\xac\xb1\x8b\xb6\xe9\x17\xf8\x5d\xe5\xb0\xda\x58\xeb\xb2\xb7\x88\x40\x99\xf1\x49\xa8\xce\x94\xeb\x76\x11\xe2\x71\x1d\xd9\x80\x7c\xa7\x5c\xdd\x66\x60\x0b\x3e\x88\x1f\x75\xc9\xf5\x02\x9f\x59\x59\xbf\xb3\xed\x5d\xcf\x16\x2d\x58\x73\xd1\xa9\x0c\xdd\xde\x1e\xf4\x47\x03\x87\x07\xe3\x93\xd1\xe3\x68\xf0\x72\x94\xac\xe6\xe3\x4b\x3f\x25\xbc\x04\x2f\x2b\x9e\x66\xb2\xf8\x0f\x20\xe7\x3a\x43\x5f\x88\xa1\x00\xc2\x94\xd4\x01\x17\xbd\x76\xaf\xd0\x66\xf5\x6a\x98\xf5\xbb\x62\x7d\xc2\xe0\x53\xbd\x1e\x65\x2b\x0a\x38\xf6\xb1\xf3\x36\xec\x36\x98\xf9\xdf\x80\x4c\x5f\xbb\xaf\x00\xcb\xff\xa3\xe5\xff\x00\x5a\xf6\xe1\x92\x1e\xa9\x77\xf6\x80\x8e\x3b\x22\x0b\x85\x29\x9f\x06\xb8\x2e\xd6\x76\x90\xf6\x01\x6c\xac\xc7\xda\x3e\xd2\xb6\x7a\x8a\xb8\xc8\x04\x52\xb4\x0e\x47\x3b\x28\xfa\xf8\x29\xca\x86\xf6\x74\xf4\xde\xbf\xf6\x38\x87\xf6\x4a\x90\x02\x76\x8d\xee\xb0\xd4\x1f\xc3\xed\xdc\xea\x60\xab\x23\xa7\x7b\x54\x7c\x70\xe4\x3b\x1d\x9d\x8d\xd6\xa8\x3f\x1b\xd1\xc1\xd1\x30\xfe\xb4\x01\x28\xec\x32\x9d\x2b\x9d\x7e\xc2\xb9\x9e\x9c\x3d\xaf\xff\x7e\xb0\xd1\xba\x24\x73\x1d\x38\x75\x00\x35\xaa\xa5\xbf\xc7\xe5\xbe\x52\x6c\x69\x73\xb4\x61\x19\xf8\x0c\xe6\x32\xb3\x1c\xf0\x17\xbf\x6e\x53\x59\x2a\x2e\xcc\x0c\x82\x5f\xc4\x2f\xf6\x5c\xe4\xe9\xab\x0c\xd3\x53\x4d\xb3\x73\xb7\x75\x17\x43\x40\x1a\xed\xbb\xe6\x6e\xa3\xef\xfb\x08\x78\xed\xb2\xec\x36\x7c\xe7\x66\xce\xdf\x39\x3c\xb9\x7f\xb4\x4f\xd6\x1a\x1c\x4e\x75\xd2\x31\xad\x8f\x18\x0c\x75\x72\x82\xb7\x87\xf6\xca\x37\xec\x65\xf0\x99\x92\xf2\xf1\xad\x2e\x52\xb2\xe9\x5b\x92\x28\xf0\x36\xb4\x57\xce\xc9\xc1\x62\x36\x43\x15\xd9\x57\xdf\xad\x7f\xb5\xa1\x55\x4a\x6f\xdc\xea\x09\xde\x9e\x21\xcb\x50\x85\x4e\x74\xa8\xad\x09\x94\x5c\x7e\x03\x17\x64\xeb\x41\x21\xd3\xeb\x09\xff\x8a\xd5\x35\x9f\x36\x0a\xd9\x9c\x64\xb8\x6b\x6b\x12\x72\xfa\xfd\x41\x38\x8d\x81\xdf\x5c\xec\x7e\x8e\x06\x1b\x36\xa2\x68\xdd\x75\xf7\xd8\x44\x33\x72\x8b\xa1\x5f\x99\x98\x6c\xec\x2f\xbb\x63\xd0\x2a\x25\xbd\x28\x52\x67\x8e\x85\x3e\x2f\x7e\x62\xf5\xb9\xf5\xfb\xc9\xae\xd7\x1f\xc3\xd9\x2e\x78\x3d\x2b\x17\xb5\xe6\x18\xc7\x65\x72\x28\xcb\x65\x98\x4d\xdf\xc6\x8d\xd0\xe8\xaf\x2f\x0b\xec\x46\xfe\x55\xd5\xa2\xf2\xaf\xbc\x6c\x85\x29\x9b\xbe\x8d\x06\x1b\xfd\x14\x6d\x6c\xf4\xe5\x6c\xac\x06\x1b\xde\x9e\xb6\x39\xdf\xc5\x90\x7f\x55\x2f\x96\x90\x7f\x55\xc9\x61\x21\x35\x1d\x64\x2b\x82\x6c\xfa\x5d\x72\x40\xc9\x0b\xab\xe3\xfc\xc8\x5e\xf9\x50\x01\x8f\x5a\x53\x92\xdb\xdd\xa0\xc6\xdf\x9f\xdd\x5d\x91\x1e\x34\xbb\xe3\x65\xbd\x35\x56\xf7\xe4\x8f\x6d\x8f\xab\x7e\xf3\xb4\x76\x87\xaa\x8d\xec\x58\xa6\xba\x4d\xe4\xc8\xea\xd3\xdf\xe3\xbb\xe4\x13\x63\x58\x5f\x5f\x48\xfe\x81\x34\x46\xd6\x02\xe8\xc8\x1e\xb9\xa5\x4f\xac\x58\xb8\x96\xa3\x8d\x5c\xe5\x8b\x39\x0a\x03\x13\x26\xb8\x59\xc2\xe1\x15\xa6\xf6\x6b\x01\x9f\x41\x81\xc2\x4a\x4a\x2a\xa2\x63\xae\x4d\x04\x7f\x27\xa5\x05\x0a\x67\xf7\xbe\xca\x75\x75\x57\xdc\xb9\x82\x39\x63\x5c\x63\x18\x30\xcf\x1b\xc4\x10\x18\x29\x61\xce\xc4\x12\xaa\x45\x0d\x25\x61\x47\x46\x13\x40\x1d\x95\x2d\x5d\xdd\x2a\x77\xf7\xc6\xc8\xf7\xf4\xe3\x96\xfd\xed\x55\x96\xcd\xf0\xf6\x35\x86\x75\x86\x4e\xe6\x30\x9d\xd9\xd2\xa9\x8d\x69\x0d\x9a\x6e\x5a\x69\x6a\xaf\xce\xc3\xef\x49\x3e\x6b\x1d\x8a\x08\x69\x58\x6b\xd1\xa6\x9c\x25\xe3\x3b\x33\xe1\x79\x45\xa4\xda\x14\x75\x67\x76\x42\x14\xb6\x28\xa2\x64\x7c\x47\x5b\x76\xf8\x82\xa3\x4e\x2b\x62\x5f\x34\x5a\x36\x0a\x43\x2a\x17\x45\x06\x42\x1a\x70\x6b\x75\xe8\x60\x2b\x03\x39\xeb\x45\xad\x63\xdd\x23\x21\xac\xa6\x27\x7d\xcb\x4d\x7a\x05\x37\xe4\x41\xc7\xaf\x24\x34\xcb\x12\x23\x6f\xa0\xbf\xf3\x62\xc9\x09\x62\xa6\x3f\xb0\xb2\xa4\xfe\xae\x87\xd4\x94\x69\xf4\xa1\xa2\x77\x98\x9d\x2f\x4b\xac\xbe\x62\xed\xd6\x53\x5d\x27\xb2\x7b\xfd\xd8\x86\x37\x51\x7b\xd2\xf2\xc2\x5b\xa2\x6b\xca\x4a\x62\x4f\x5e\xcf\xfe\x1e\x53\xd4\x75\xe4\x60\xc1\x0b\x73\x24\xce\x15\x13\xba\x60\x14\x9a\x33\xfc\x6d\xc1\x55\xf3\x7d\xa2\xa3\xdb\x93\xff\x38\x21\xcf\x5e\xed\x54\x86\x33\xb6\x28\xcc\xee\xa3\xc9\xb7\x1f\xbd\x52\x29\xfc\x2d\x26\xd5\x40\x9d\x72\xfb\x6e\xce\xf5\x9c\x51\xe6\xb6\xa9\x24\x30\xa5\x51\x68\x4b\xc7\x90\x4b\x03\x5b\xe7\x55\xeb\xb4\x0c\x09\x62\xb8\x79\x70\xab\xbe\xea\x75\x92\x22\x37\x62\xd8\x54\x75\x2b\x9d\xf9\x61\xf0\x89\x6e\x72\x24\xae\x97\x54\xaf\x97\x54\x6b\xd1\x86\x46\x75\x7a\xa9\x33\x54\xdb\xd7\x68\x8e\x51\x90\xf6\x1a\x59\x2a\x0b\x5a\x9f\x95\x72\x53\x53\xee\xb4\xbe\x6f\x12\xec\x5a\xe8\xef\x1d\x8a\xea\x2f\x96\xb3\xe4\x1d\x0a\x54\xcc\xa0\x13\x3a\xb1\x83\x11\x04\x2a\x68\x72\xd7\xde\x1e\xba\xa7\x89\x07\x8d\x14\x76\x65\xee\xab\xbc\x12\xc8\x82\x5e\xc1\xe1\x6f\xb5\xc5\x6f\xa1\x7d\xb6\x9b\x70\x91\x17\x58\x55\x00\x8d\xbe\x78\x67\x60\x1b\x98\x31\x38\x2f\x0d\x41\xa2\x7f\x67\xae\x98\x7d\xf4\x57\x2f\xb6\x6a\x3e\xb1\xa2\x8b\x3f\xa7\xb4\xe7\x9c\x4b\xbb\xeb\x84\x6a\x27\xf2\xa4\xeb\x31\x67\x5d\xe1\xb9\x15\x87\x39\x55\xf5\xc1\x8c\xf1\x02\x33\xbb\x83\x7a\x8e\x1d\xb0\xf0\xb0\xb7\x75\x1e\xc1\x36\x6c\xdd\x04\x31\xa8\x1d\x6b\x4a\xd4\x3b\x9c\x79\x06\x67\x6c\xdd\x0a\x85\xc6\x4e\x18\xce\xaf\xb8\x6e\x50\xec\x8a\x69\x98\x2f\x0a\xc3\xcb\x3a\x34\x1a\xb6\xfd\x05\x0c\x05\xd8\x9e\x91\x18\xfc\x38\x01\x66\x87\x76\x3b\x0c\xaf\x8d\x64\x2a\xe7\x25\x33\x7c\xca\x0b\x6e\x96\x5e\xdf\x17\x7d\x3a\xfd\xb2\x26\x6e\xa7\x53\x92\x1f\xfe\x7a\xf1\xf9\xd7\x7f\x21\x70\xee\xfb\x52\x17\xad\xdd\x87\xe2\xc6\x17\xa6\x35\xcf\x85\xed\x62\xf7\x19\x9b\x0e\xbe\x3e\x7e\x9d\xd8\xf9\x1f\xdd\xce\x8c\x61\xf3\xf2\xd1\xc6\xf4\x81\xf4\xcd\xe8\xc6\x8e\x07\x2d\x09\xf5\x9d\x9d\x8d\x41\x32\x41\xff\xc9\xc6\x13\x51\x1a\x5b\x8f\x51\xcd\xf4\x58\x1c\x5e\x51\x42\x5b\xd9\xc3\x1a\x6a\xe9\xee\x5a\xd2\x09\x4f\x53\x5c\x5d\x54\x6d\x07\xa0\x3a\xa5\x52\x63\x66\x20\x6d\x66\xbb\x15\xe9\x22\xe0\x3a\x25\x7a\x78\xc4\xef\x55\xe9\xda\x1a\x15\x55\x73\xea\xd8\x96\x91\xd5\x5a\x53\x30\x91\x55\xba\x16\xc2\x7f\x99\x4a\xda\x58\xf4\x6f\xc5\x99\x2a\x0f\x54\xc8\x3f\x55\xea\x1a\xef\x5a\xbe\xad\x06\x83\x16\xfc\x93\x63\x8c\x3a\x27\x83\x1f\x18\x57\x1a\xa6\x58\xc8\xdb\x81\xbd\xf7\xdb\xfe\x67\x00\x00\x00\xff\xff\x04\xfb\xc2\xd3\x54\x24\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 9300, mode: os.FileMode(420), modTime: time.Unix(1531634597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

