// Package computil Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1558444147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xef\x8f\xda\x46\x10\xfd\xee\xbf\xe2\xd5\x22\x92\xad\x80\x49\xf3\x31\x2d\x1f\xee\x94\x4b\x8a\x72\x49\xaf\xe1\x2e\x55\x15\xa5\x68\xb1\x07\xdf\x16\xdf\xae\x99\x5d\xdb\x20\xc4\xff\x5e\xad\x7f\xa4\x18\x5d\xdb\x6b\x45\xe0\x0b\xde\xf1\xec\x9b\x79\xef\x2d\x3b\xe4\x22\x5e\x89\x94\xf0\x20\xa4\xf2\x3c\xf9\x90\x6b\xb6\xf0\xcd\xd6\xc4\x22\xcb\x7c\xcf\x5b\x16\x2a\xae\x5f\x06\x21\x76\x1e\xb0\xdb\x41\x2e\x21\x54\x82\x41\x34\x35\x37\xac\x93\x22\xb6\x52\xab\xcb\x42\x66\x09\x02\x45\xb0\x82\x53\xb2\x3f\xcf\xe0\x57\x52\x25\xba\x32\x7e\x88\xd1\x7e\xef\x01\xc0\x78\x8c\x94\x45\x4c\xcb\x22\xcb\xb6\xa0\x8d\xb4\xa8\xee\x49\x81\x29\x26\x59\x4a\x95\xc2\xc8\x54\x89\xcc\xc0\xde\x0b\x8b\x4a\x17\x59\x82\xc2\x14\xc2\xa5\xe7\x2c\x95\x85\xb1\x22\x5e\xc1\x3a\x14\x53\x63\x1a\x99\x1a\xbc\x9a\xe0\x41\xac\x28\x88\xef\x85\x82\x36\xd1\xac\x86\x19\xe2\xfb\xb0\xad\xdb\xe0\x46\x1f\xb4\x95\xcb\x6d\xe0\xf6\x0c\xd1\xb2\x8c\x66\xd3\xb7\xbf\xdc\x4d\x6f\x7b\x81\xe9\xf5\x75\x6f\x7d\xfb\xf1\xe2\xa6\x17\xb8\xb8\xfc\xd8\xdf\x31\xbb\x7d\xf7\xe6\xfa\x28\xf4\xdb\x2c\xec\x7a\xfc\xd6\xd5\xbb\x52\xa9\x86\xf3\xac\xb5\xcb\x7d\x96\x9a\xbf\x3e\x03\x73\x4c\xf0\xe3\xa8\x56\xed\x6b\x4c\x9b\xe8\x6a\x23\x6d\xf0\x22\x6c\x43\x8d\x5b\xfb\x20\xac\x1d\x1f\x81\x54\x82\xda\xc2\xc6\xfe\xc7\xac\x3f\xb0\xd8\x39\x01\x53\x30\x41\xa8\x2d\x72\xa1\x64\x6c\x20\x98\x60\x2a\x91\x65\xba\xa2\x04\x56\x23\x67\x2a\xe9\x31\x43\x13\x5a\x12\x1f\x93\x90\x4b\xb0\x73\x99\x29\xd6\x25\x71\x10\xfe\x00\xc6\x77\x13\x28\x99\x1d\x90\x7b\x3a\x91\x52\x30\xaa\x14\x66\xab\xe2\xe8\x57\x21\xed\x5b\xd6\x45\xde\x26\xb1\x50\x29\x61\x30\x1f\x62\x90\xb3\x74\x55\x07\xd1\x9d\x92\xeb\x1b\x96\x9a\xa5\x95\x64\x3a\x31\x7a\xb9\xe5\x83\x4b\x0d\xa4\x4a\x68\x83\x41\x34\xd3\x6c\x29\xf9\xf4\xde\xd4\x28\x61\xb3\xa5\x4a\xa3\x8b\x24\x09\xea\x63\x79\xec\xd4\xbf\x6b\x7b\x0a\x75\xff\x46\xdf\xa7\x2a\xfc\x88\xc6\x9d\xca\x9d\xce\x3d\xa5\x0f\x1c\xad\xd2\xe8\xb5\x56\xd4\xe6\x88\xdd\xce\x49\x16\x4d\x5f\x63\xbf\x77\x75\x3f\x50\x75\x18\x6a\xd3\xdc\x65\xd3\xcb\x9c\xf4\x3b\x62\xb2\x05\x2b\xef\xaf\x2e\x88\x6b\x16\xbd\x4d\x51\xbb\x78\x53\xa8\x5a\xd5\x77\xb4\x85\xdf\xdc\x75\x73\x61\x0c\x59\xe3\xf7\x2a\x3a\x8c\x23\xe6\x7d\xbc\xab\xe8\x5a\xa7\x29\x71\x74\xc5\xac\x79\x19\xf8\xf5\x37\x1a\x48\x77\x8d\x35\xa8\xf5\x4f\xef\xd3\x7b\x3c\x33\xaf\xf0\xac\xf4\x87\xf0\x0f\x51\xfc\xa1\x2b\x14\xfe\x13\x91\xff\xc0\xc3\x58\xa1\x12\xc1\xc9\x3c\x93\x0b\x16\xbc\x3d\x11\x23\xf5\x07\xc5\x35\xa3\x0e\x1f\x2d\xfe\x59\xb8\xe5\x4c\x99\x16\xc9\x69\xb8\xb8\x86\x5b\x40\x47\xe8\x1c\xa6\x28\x61\x65\x49\xa7\x3e\x5c\x0d\xea\xd9\x0e\x56\xcc\x32\xb7\xa7\xe6\xd0\xa0\x9e\xe5\x10\xd1\x86\xe2\xc2\x9e\xc8\x85\x06\xcc\x31\xf8\x7f\x6d\x77\xa3\xa8\xbe\x1f\x47\xdd\x4c\x70\x13\xe8\xf8\xc5\xbe\xfd\xf3\x95\x06\x2b\x70\xa1\x68\x88\x05\x3e\x7f\x71\x4f\x21\x8c\x65\xd7\x82\xeb\xdc\x29\x58\xcf\xa8\x66\x12\x2d\x5a\x3a\x8b\xcf\xf2\x0b\x7e\x9f\x60\x55\xaf\x56\xee\xd1\x85\xbc\xa6\x8b\xb5\xdb\xd0\x80\x04\x2f\x36\x2f\x5f\xba\xd2\x66\x88\x79\x1b\x8e\xb5\x2a\xa3\x3b\xb5\x2e\xb4\xa5\x60\x8d\xe7\x5d\xea\x22\xc4\x73\xac\x5d\x72\xc3\x0a\xc6\x75\x39\x1e\x63\x34\x1a\xe1\x56\xa8\x34\xa3\x04\x3f\x09\xc9\x06\x97\x94\xe9\xca\x1b\x8f\x3d\xcf\xfb\x33\x00\x00\xff\xff\x6c\x62\x39\x20\x63\x0a\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 2659, mode: os.FileMode(420), modTime: time.Unix(1558445220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(420), modTime: time.Unix(1558444147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\xf0\x13\x00\x00\xff\xff\xb6\x85\x38\x24\xf1\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1558445230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1558444147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f\x29\xc9\x07\x04\x00\x00\xff\xff\xfd\x5e\x58\x46\x1a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 26, mode: os.FileMode(420), modTime: time.Unix(1558444147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xff\x4f\xe3\x48\xb2\xff\x99\xfc\x15\xf5\xfc\xe0\xc9\x19\x19\x67\x66\xf5\xf4\x9e\xc4\x1d\x27\x31\x24\x3b\xcb\x0e\x03\x23\xc2\xb2\x3a\xb1\x88\xe9\xd8\x15\xd3\x83\xd3\xf6\x76\x77\x02\x19\x94\xff\xfd\x54\xdd\xed\xaf\x71\x20\xb3\xac\xee\x74\xd2\xfd\x30\x9a\x60\x57\xd7\xf7\xfa\x74\x75\xb5\x73\x16\xdd\xb3\x04\x61\xc6\xb8\xe8\xf5\xf8\x2c\xcf\xa4\x06\xbf\x07\xe0\x4d\x96\x1a\x95\xd7\xdb\xf1\xa2\x6c\x96\x4b\x54\x6a\x90\x7c\xe3\xb9\x47\xaf\x22\xb9\xcc\x75\x36\x60\xf4\xbe\xfa\x33\xe2\xf9\x1d\x4a\x5a\x81\x22\xca\x62\x2e\x92\xc1\x84\x29\xfc\xbf\xff\x35\x44\xd3\x99\xa6\x57\x3c\xf3\x7a\xf4\x67\xc2\xf5\xdd\x7c\x12\x46\xd9\x6c\x90\xa0\x78\x1b\xf1\x18\x07\x89\x8a\x24\xcf\xf5\x00\x45\xc2\x05\x7a\x2d\x32\x99\x4d\x50\xea\x7b\xc9\x67\x28\x06\x99\xd6\x19\x11\x3c\x3d\x01\x9f\xc2\x6e\xf8\x13\x53\x43\x9c\xcc\x93\x84\x8b\x64\x24\xd8\x24\xc5\x18\xf6\x57\xab\x1e\xc0\x0b\xb2\x62\xb3\x8a\xd4\x26\x66\xfb\x80\x22\x06\xb3\xae\xc6\xf9\x34\xfb\x7e\xbe\x69\x46\x5c\x07\x4a\x33\x11\x33\x19\xb7\xd8\xf7\x00\x06\x03\x38\x31\xde\xe6\x22\x81\x19\x53\xf7\xca\x0a\x95\x4c\x24\x08\xbb\x3c\x0f\x60\x77\xc6\xe1\xe0\x10\x76\xc3\x53\x2e\xee\x51\x86\x9f\x98\xba\xc7\xd8\xae\x52\xe0\xb4\x78\x7a\x22\xba\xf0\x0c\x1f\x8e\x52\xce\xe8\x31\x78\xf4\x8c\xe7\xb0\x5a\x39\x17\x39\xa9\xfd\x5e\x6f\xc1\xa4\x89\x2e\xe9\xe2\x24\xdd\x06\xb0\x8b\xb3\x09\xc6\x56\xd6\x88\x7e\x96\xdc\x07\x03\x23\xc0\xbc\x0f\x4f\x86\xc4\xfd\x2e\x4b\x63\x05\xfa\x0e\x21\x66\x9a\xc1\x34\x93\x60\x5e\xc7\x18\xc3\x94\xa7\x58\x5b\x70\x2e\x79\x72\xc6\x66\x58\xd7\xb5\xce\xea\xd0\xaa\x6a\x1f\x0d\x89\x1b\xa9\xdc\x74\x55\xbf\xd7\x73\x4a\xb8\x45\x0f\x92\xe5\x56\x7e\x82\x02\x15\x57\x70\xf5\xc9\x68\x61\x68\x0a\x71\x7a\x99\x63\x7d\x95\xd2\x72\x1e\x69\x78\xea\x01\x8c\xe0\x8d\xcd\xb0\x70\x64\xfe\xeb\x01\x7c\x84\xeb\x1b\xca\xf7\x2d\x33\x6a\x08\x6f\x8a\xbc\x09\x87\xee\x47\x53\xeb\x95\xd1\xfa\x0c\x1f\x6a\x2a\x44\x12\x99\xc6\xa6\xea\x72\x2e\x34\x9f\xa1\xd1\xdf\x66\x4e\xd3\x8c\xe9\x5c\x44\x4d\x36\x7e\x1f\xde\xd4\x98\x92\x41\x1a\x29\x74\xce\xa6\x33\x7c\xf0\xbd\x3a\x0f\x2f\xb0\x5e\xb6\x0b\xbc\xc0\x0a\xf8\x80\xfa\x92\xcf\x30\x9b\x6b\x58\xad\x02\xf0\x46\x8f\x18\xcd\x35\x7a\xfd\xad\x52\x9f\xa5\x24\xb1\x48\x6e\x92\x39\x76\xbf\x4f\x4d\xde\xfb\x82\xa7\x01\x78\xae\x90\x0b\x05\x2a\x85\xa6\x2c\x55\xe8\xfe\xeb\x1b\x8e\x1a\xc3\x31\x6a\xb7\x9a\xa5\xfd\x67\xca\x71\x2d\x2c\x4e\xa9\xd8\xb8\xa1\x0c\x0c\x39\x42\x63\xbf\x51\x01\x00\x19\xd1\xfc\x4f\xe5\x8f\x27\xb3\x74\x74\x00\x1a\x83\x22\x47\x5f\x8c\x3f\xc0\xf0\x00\xe2\x72\x41\x4d\x4d\xfa\x27\x51\xcf\xa5\x80\xcc\x25\x81\x91\xf5\xe3\x5c\x44\x9a\x67\xe2\x23\x2e\xc1\xb3\x28\x7b\xcb\x94\x42\xad\x3c\x8a\x22\x77\x35\x6d\x1f\x01\x17\x3a\xfb\xfe\x34\xf1\xb3\x7a\x66\xf4\xb7\x11\xec\xf7\x01\xa5\xa4\xda\x69\x80\x0f\xf2\xb8\x13\x14\xf6\x5b\xa8\xc0\x63\x5b\xc5\x9b\x2b\x3e\x0b\x47\xa1\x03\xac\x6b\xaf\x5a\xe3\xdd\xc0\x21\x90\xd2\x7e\xdf\x55\x1e\x3c\x39\xcf\x0e\x06\xf0\x8b\xa0\x5d\x09\xa5\x29\xf5\x9c\xfe\xe7\xfa\x0e\xa2\x4c\x28\x0d\x31\x46\x29\x93\x18\x03\x9b\x64\x0b\x74\x6b\x9c\xc7\x2b\xe3\x87\x7e\x0b\x6a\x82\x36\xf6\x9c\x0f\x3f\xfa\x7d\x9b\x7a\xab\x2a\x45\xac\x81\x8e\x9d\xe0\xe9\xc6\x10\xe6\x12\xd3\x8c\xc5\x8d\xe0\x51\xc0\x8a\x40\xb9\xf7\x90\xf2\x89\x64\x72\xf9\xda\xc0\xd5\xc4\x35\x42\x56\xa4\x5a\x38\x0a\x4f\x33\x16\x8f\x8d\x04\xbf\x20\x0f\x13\xe5\x05\xcd\x10\xdc\xde\x7e\xbe\x18\x9d\x9e\x1f\x0d\xbd\x1b\x32\xff\x85\x0c\xb5\x1a\x1b\x23\x89\x9f\x35\xb1\xc3\x8c\xf5\x84\xbd\xfa\xf4\x9d\x39\x59\x89\xda\xc6\xc0\x16\x9c\xb4\x4c\x1c\x9d\x5d\x5e\xfc\xfd\xf3\xf9\xc9\xd9\xe5\xf3\x56\xa2\xc3\x3c\xb2\xc0\xfd\x5e\xdb\x58\x98\x36\x4f\x50\x68\xb9\x84\x3c\xe3\x42\x83\x1f\xe3\x94\x0b\x8c\x61\xb2\x84\x05\x4a\xc5\x33\x11\xc0\x5c\xcd\x59\x9a\x2e\x61\x88\x79\x9a\x2d\x49\xea\x96\xf6\xd7\x94\x68\x57\xe3\x8b\x38\x94\x85\xc3\xf0\x44\x7c\xc5\x48\x1b\x92\xe3\x4c\xa8\x2c\x45\x7f\x0d\x3c\xc9\x3f\x76\xed\x91\x29\x7d\x43\x71\x1b\x90\x34\xaa\x6f\x7a\x7d\xcc\xd2\xb4\xd0\xeb\x57\xae\xef\xdc\xe6\xe0\x7b\xd6\x20\xb3\x2f\xf0\xa9\x59\xf1\x5f\x87\x54\x1a\xae\x60\x73\x26\x78\xe4\xa3\x94\xfd\x26\xfa\xa1\x94\x2f\x65\x97\x60\x9a\x2f\xac\xf7\xb9\x31\xc2\x75\x15\x4b\xc1\x66\x3c\x32\xde\x4c\xa9\xf1\x89\xc1\x52\x1a\xc0\x20\x26\x1d\x00\xe9\x5a\x80\xd7\x63\x63\xa5\x54\x23\x1a\xd4\x37\x91\xed\xe6\x49\x0f\xcc\x6f\xe3\x06\xd7\xca\xed\xef\xc3\xfb\xd1\x87\x93\x33\x38\x3b\xba\x3c\xb9\x1a\xc1\xe7\xa3\xe3\x8f\x47\x1f\x46\x70\xf2\xe9\xf3\xf9\xc5\xe5\xb8\x81\xae\x42\x05\xb0\x9b\xdf\x27\x16\x5a\x3f\x64\x9f\x6d\x0b\xfe\x7e\x49\x1a\xab\x9c\x45\x58\x07\xda\xaa\x49\x24\x9d\xf3\xfb\xc4\x65\xfa\x67\xa6\xef\xc8\x75\x73\x11\xa3\x04\x51\x2e\x2d\xa8\x6c\xb3\x58\x14\xa8\x9f\x49\x9e\x70\x61\x9c\xfa\xc0\x94\xa1\x12\xd4\xe5\x59\x08\xbc\x15\x79\xf7\x3a\xda\x2c\x8b\xc6\xc2\x78\xc6\x29\x5b\xa0\x75\xa5\xcb\x81\xdd\xe4\xd7\x14\xf4\x02\x47\x4a\x2c\x6b\x44\x65\xf5\xba\xd7\xe3\xe5\x6c\x92\xa5\x97\x94\xa4\x07\x30\x63\xf9\xb5\xd2\x92\x8b\xe4\xe6\x4d\x43\x3c\x85\xec\x69\x55\xac\xb9\x5c\xe6\xa8\x9e\xa1\xa6\xf7\x15\x35\x95\x87\x7e\x8e\xdc\x10\x54\xf4\x57\x4c\x3e\x47\x7d\xc5\x64\x41\x5b\x76\xb7\x2e\xc2\x53\x1e\x3f\x06\xb0\x3b\x35\x11\x26\x63\xc7\xf3\x28\x42\xa5\xa6\xf3\x34\x5d\x9a\x66\x3e\x26\x43\x54\xad\xa1\x18\x0c\xe0\x28\xa6\x33\x53\x99\xe5\x16\x6d\x50\x9a\xc4\x6e\x55\x00\xb4\xbc\x18\xd2\xdf\xd3\x32\xa1\x29\x72\x3a\x03\x65\x5c\x0a\x9a\x7c\xea\xc4\xdc\x8a\x69\x67\xa0\xcd\x7a\x1e\x3f\x76\xc6\xdc\x38\xdd\x31\x68\xc4\xb1\x21\xb1\x8c\x24\xc0\x98\x27\x82\xe9\xb9\xac\xe8\xca\x27\x4d\x42\x5a\x7e\x00\x59\x58\xeb\xc7\x0c\xb9\xdd\xb3\x1d\xd9\xaa\xd4\xbd\x3b\x49\xc3\x5a\xea\x5c\x77\xe8\x45\xbd\xc6\x16\x76\x17\x31\xac\xfa\x80\x7a\x48\xe9\x94\xa4\xcb\x78\x7e\xc8\x4c\xea\x35\xe3\x37\x34\xad\x09\x85\x90\x81\x39\x7e\x30\x73\x20\x2b\x8e\x26\xed\x70\xe9\xb0\xde\x28\x91\x79\x7a\xa3\x8a\x3a\x24\x8c\xea\x8a\x8d\x49\xf1\xae\xd8\xe8\xb5\x0a\x03\xf8\x91\x45\x3a\x93\xcb\x75\x8f\x17\xfc\x6b\xa4\x1c\xd3\xf8\xb9\xf4\x37\x04\x4f\xdb\x07\xc9\x38\xec\xba\xa5\x9a\x0d\xcd\xcb\x76\x3f\x1f\x9b\xc8\x96\x5b\x54\x0b\x8f\xad\xf5\x5a\x7c\x6e\x45\xb4\x51\x4a\xb4\xd1\xbb\x16\x11\xba\xdc\x1b\x75\xb8\xf7\x8a\xa5\x73\x3c\xe8\x46\xe0\xb0\xb1\x68\x6b\xaf\x59\x3b\xac\xdb\x22\x9b\xa7\xce\x69\x2f\x9b\xf3\xbc\xd3\x16\xd6\x69\x0b\x56\x7a\xed\x8a\xa5\x3c\x26\xd0\x6b\xb8\x6d\xb1\x51\xce\x82\x6d\xf4\x1b\x61\x63\x97\xd7\x16\xac\xc3\x6d\x35\xb4\xf8\xe2\x88\xea\x70\xf1\xe5\x3b\x1c\x5c\xf1\xdf\xda\xc3\x64\xf0\x75\x5b\x39\xeb\xe2\x2d\x4c\x6f\xfb\xb8\xdc\xb5\x4d\x43\x43\x58\xe0\x90\xbb\x98\xb3\x75\x75\xca\xb4\xc6\x36\x14\x55\x23\xdb\xd8\x6d\x6d\xc3\x6b\xf6\x6b\x2f\xd8\x68\x8a\xdd\xca\xbb\x9a\xb4\x46\x57\x66\xbd\x52\x28\xba\xbf\xdf\x6b\x1f\x7f\x6c\x3b\x33\x3a\x1b\x6e\x6e\x66\xb6\x6f\xf2\x8a\x19\xc1\xad\x3b\x09\x6d\xd3\xee\x15\x6b\xaa\xd3\xd3\x3f\xa1\xf1\xeb\x52\x74\xcb\x16\x10\x40\xe8\x9c\x8a\xe0\xba\x85\x91\x45\xb3\xb4\x7a\x75\x97\xe8\x3a\xff\x72\xca\xc2\x27\xaa\xbb\x49\x2c\x28\xe0\xd4\xf9\xce\xe9\x70\x50\xb5\x7c\xff\x8a\x8e\xcf\xe5\xee\x1f\xee\xf5\x5c\xc2\xfe\xa7\xc5\xfa\xf7\x6e\xb1\xba\xb6\x24\xaa\x9d\x43\x60\x79\x8e\x22\xf6\x85\xce\x9f\x07\xb8\x26\xd6\x36\x90\x76\x0d\x36\xba\xb1\xb6\x8d\xb4\xb5\x9a\xa2\x55\xa4\xc2\xa6\xc3\x6e\x03\x45\xd7\x27\x45\xcd\x6e\x71\xd3\xf8\x6c\x7d\xa4\x7e\x3e\xfc\xe8\x38\x39\x48\x44\x73\xa3\x42\xbe\xbd\x47\x3b\x3b\xa2\xc7\xed\xe9\xb9\x19\xe3\xf5\xc0\x64\x6c\xe7\x78\xab\x39\x5a\xab\x0d\xc9\x1a\x84\x17\xc3\x9e\xab\xaf\x2e\xcd\x2e\x86\x10\x65\x42\x33\xfe\xbc\x6e\x28\xcc\x63\x8c\x37\x6a\x49\xf0\xd9\xc5\xfd\xd0\x69\xf9\x54\x0e\x53\x8b\x1b\x10\x53\xe0\x13\xe3\x41\xbb\x68\x24\x0a\xd9\x04\xdc\x55\x61\xd3\x22\x3e\x85\x59\x16\x9b\x55\xf0\xff\xb5\x77\x26\x63\x72\xc9\x85\x9e\x82\xf7\x9b\xf8\xcd\x8c\x98\x6a\xeb\xea\x99\xd8\xa0\x7d\xfb\xb8\xf7\x18\x80\x47\x1a\xec\x37\xf7\x79\x37\xe8\xad\x67\x62\xe3\x86\x62\x08\xbc\xf4\x55\xd6\xc4\x9b\xc6\x65\x89\x1b\xf6\x3e\xbb\x7d\xd5\x47\x9a\x0a\x2c\x4c\x06\x70\xef\x7c\xd6\x88\xf0\xa4\x9c\xe7\x30\x54\xe1\x19\x3e\x1c\x9b\xfb\x38\xff\xfe\x85\x6c\x76\xee\x2f\xa6\xd7\xf1\xe4\x1d\xf1\x10\xf8\xe0\x9b\x1b\xc0\xf0\xfd\x7c\x3a\x45\x33\xde\x89\x27\x3f\x74\xbf\xda\x51\xd2\x34\xdf\xf6\xe9\x19\x3e\x5c\x20\x8b\x51\xfa\x96\xb5\xaf\xcc\xa0\x95\x12\x80\x2f\xe0\x9a\xb4\x7b\x9f\x66\xd1\xfd\x98\x7f\xc3\xe2\xd6\x45\x69\x89\x6c\x46\x3c\xec\x2d\x22\x31\x39\xff\xf1\xbd\x3f\x09\x80\x2f\xae\x0f\x6e\xfa\xbd\x1d\xe3\x4d\x34\x06\xda\x6b\x45\xa2\x19\xda\x87\xbe\x7b\x32\xd6\xf1\xc8\xdd\x3d\x06\xa0\x64\x44\x72\x51\x44\x56\x1d\x83\xba\x8e\xfd\xd8\xc8\xb3\xcf\x9f\xc6\x07\x4e\x7e\x00\x17\x07\xe0\xe4\xac\xac\xd7\xaa\x29\x19\xcf\xc2\xe3\x2c\x5f\xfa\xf1\xe4\x5d\x50\x31\xed\xff\x65\x3b\xc7\xee\x24\xdf\x64\xc9\x2a\xf9\xc6\xf3\x9a\x9b\xe2\xc9\xbb\x7e\x6f\xa7\x1d\xa2\x9d\x9d\x36\x9f\x9d\x55\x6f\xc7\xe9\x53\x57\xe7\x87\x00\x92\x6f\x72\x6b\x0e\xc9\x37\x19\x1e\xa7\x99\x42\xbf\xdf\x2b\x08\xe2\xc9\x0f\xe1\x7b\x0a\x9e\x5f\x4c\x4b\xab\xc3\xec\xb0\xd6\xa0\xd9\x8d\x15\x4a\xe8\xff\xd5\x0e\xe8\x55\x0b\xfa\xa6\x8d\x6b\xcb\x4d\x3b\xf3\x5a\xe1\xd4\x36\xa6\xa2\x84\x4c\x47\x28\x9b\x05\x64\xc9\xca\xb9\xd9\xe6\x0d\xfa\x99\x0e\xb0\x2d\xcf\x27\xfb\x20\xd3\x3a\x2b\x19\x1c\xb3\x34\xed\xdb\x47\xe6\xdc\x61\x82\x4b\x3d\x84\x4c\xe6\x33\x14\x1a\xc6\x4c\x70\xbd\x84\xe3\x3b\x8c\xcc\xe5\x2d\x9f\x42\x8a\xc2\x70\x0a\x0b\xa2\x53\xae\x74\x1f\xfe\x46\x42\x53\x14\x56\xef\x23\x99\xa8\xe2\xea\xae\x31\xe1\xbe\x60\x5c\xa1\xef\x31\xb7\xd6\x0b\xc0\xd3\x59\x06\x33\x26\x96\x50\x3c\x54\x90\x13\x6e\xc4\xd4\x7c\x94\x5e\xd9\x53\xc5\x1d\x5b\x73\x5b\x2e\x66\xb2\x9b\x35\xfb\xeb\xab\x34\x9b\xe2\xc3\x6b\x14\x6b\xf4\xbb\xcc\xe2\xbd\x3d\x8e\x96\xca\xd4\x7a\x5c\xdb\x28\x55\xb9\x57\xc6\xe1\xbf\x89\x3f\xab\x0d\x71\x08\x69\x58\xed\xa1\x09\x39\x0b\x47\x8f\x7a\xcc\x93\x82\x48\xd6\x29\xca\xca\x6c\xb8\xc8\xaf\x51\xf4\xc3\xd1\x23\x75\x0b\xfe\x16\xa7\xac\x9a\xc7\xbe\x2a\x34\xcb\xc8\x0d\x51\x36\x4f\x63\x10\x99\x06\xfb\xac\x74\x1d\xec\xc5\x90\x4d\x5b\x5e\x6b\x68\xb7\xc1\x85\x45\xe3\xa6\x1e\xb8\x8e\xee\x60\x41\x16\x34\xec\x0a\x7d\xbd\xcc\xb1\x0f\x4f\xb5\xab\x4d\xfc\xbd\xe6\x0c\xef\xfa\xc6\x74\xc0\x53\x16\xe1\xd3\xaa\xb6\x37\x46\x4c\x21\x5c\xdf\xd8\x1d\xe7\xa0\xdc\x4c\xf9\x54\xd9\x83\x4e\x6d\xd5\x53\xb5\xd7\x52\x79\xde\x06\xf0\x68\x15\xa1\xb8\x2e\xa0\x6a\x6b\xed\xf2\xb2\xd7\xe3\x53\x15\xc0\x63\xbf\x7c\x5d\xb1\x69\x04\xef\x90\x56\xad\xed\xbf\xe5\x05\x09\x0b\xcf\x10\x63\xf5\x89\xe5\x39\xa1\x55\xd3\x00\x1b\x78\x7a\x87\xf1\xe5\x32\xc7\xe2\x13\x89\x83\x4d\xa2\x5a\x99\xe2\x2f\xfa\x1d\x92\x6b\xac\x4b\xca\x82\x63\x8b\x5f\x2b\x1a\xad\x45\xfd\xa6\x21\xef\xe7\x3c\xd5\x27\xe2\x52\x32\xa1\x52\x46\x81\xbe\xc0\xdf\xe7\x5c\x56\x57\xdc\x0d\xd9\x8e\xfc\xe7\x31\x59\xf6\x6a\xa3\x62\x9c\xb2\x79\xaa\x0f\x36\xa6\xb2\x19\x69\x46\x99\x70\x57\x5e\x94\xd1\x65\x02\x9b\x77\x33\xae\x66\x8c\xf2\x70\x9f\x12\x1c\x23\xea\x06\xf7\x54\x00\x49\xa6\x61\xef\xb2\x00\x82\x9a\x22\x5e\x00\x8b\xb5\x2b\xd8\x55\x0b\x17\x24\x99\x11\xc0\xae\x2c\x81\xe1\xc2\xb5\xca\xcf\x60\x83\x25\xb1\xc8\x20\x5b\xc8\x20\x6b\x0f\x8d\x6b\x64\x03\x19\x1a\xa7\x13\xf3\x1a\xf5\x29\x0a\x92\x5e\xe2\x64\xa1\x41\xed\xcb\x84\x44\x97\x94\x6f\x6b\x1f\xcf\xd0\x26\x62\x36\xb2\xd6\xe9\xb2\xfc\x1c\x66\x1a\x7e\x40\x81\x92\x69\xb4\x4c\xc7\xa6\xe0\xc0\x93\x5e\x15\xbb\xfa\x66\xb7\x3e\xf3\x6a\xc0\x82\xdf\xe4\x79\x24\x93\x82\x21\xf3\x5a\x09\x47\x38\xe0\x34\x7e\x07\xf5\x43\xf2\x98\x8b\x24\xc5\x22\x03\xa8\xfb\xc7\x47\x0d\xfb\xc0\xb4\xc6\x59\xae\x09\xe0\xdd\x3b\x7d\xc7\xcc\x9f\x6e\x86\x65\xb2\xe6\x8a\xa5\x4d\x34\x3d\xa7\x1d\xf4\x32\x33\x7b\xa8\x2f\xdf\x16\xf5\xde\x8d\xa0\x5d\x89\x67\x9f\x58\x04\x2d\xb2\x0f\xa6\x8c\xa7\x18\x1b\xc0\x71\x2b\xde\x82\x01\xbb\xc3\xbd\xcb\x3e\xec\xc3\xde\xc2\x0b\x40\xbe\x35\xaa\xf4\x5b\xa7\x5c\xb7\xc0\x2a\x5b\x96\x42\xaa\xb0\xe1\x86\xcb\x3b\xae\x2a\x4c\xbe\x63\x0a\x66\xf3\x54\xf3\xbc\x74\x8d\x82\x7d\x37\xc9\x22\x07\x9b\xc3\x26\x83\x9f\xc7\xc0\xa4\x64\xee\xc6\xbf\xd3\x93\x51\x36\xcb\x99\xe6\x13\x9e\x72\xbd\x74\xf2\xbe\xaa\xf3\xc9\xd7\x0e\xbf\x9d\x4f\x88\xbf\xff\xe5\xfa\xe6\xcb\x1f\x70\x9c\xfd\x18\xa1\xb9\xf7\xd8\xaf\x90\x2a\x5b\x98\x52\x3c\x11\xa6\x8a\xed\x37\x52\x73\x89\x85\xff\x1a\xbe\xab\x8e\x48\xb5\xca\x0c\x60\xf7\x76\x63\x61\x3a\x47\xba\x62\xb4\x4d\xd4\x5a\x49\x42\x39\xfc\x34\x3e\x08\xc7\xe8\xee\xf7\x1d\x11\x85\xb1\xf6\x67\xbf\xb6\x15\x75\xfb\xe1\x15\x29\xb4\x17\xaf\xe7\x50\x4d\x76\x53\x93\x86\x7b\xaa\xe4\x6a\xa2\x6a\xdd\x01\xc5\x24\x82\x0a\x33\x86\xcc\x44\xb6\x99\x91\xd6\x03\xb6\x52\xfa\xeb\xb3\x92\x56\x96\x76\xe6\xa8\x28\x8a\x53\x05\x26\x8d\x8c\xd4\x92\x82\x89\xb8\x90\x35\x17\xee\x33\x86\xb0\x8e\x45\x7f\x2a\xce\x14\x71\xa0\x44\xfe\xa5\x10\x57\x59\x57\xb3\xcd\x0e\x4f\x0a\xf8\xff\xee\xab\xf2\x6a\x81\x16\x1b\xef\xe9\xd6\x8e\x1a\xe5\xa5\x9a\xfb\xa6\x48\x01\x13\xc0\xcc\x59\x85\x4f\xd2\x12\xb2\xcd\xde\xe6\xe2\x96\xc9\xcd\xd7\x79\xdb\x9e\x38\x0a\xb1\xdb\x1e\x39\x16\xf6\x63\x3b\x3a\x75\x6f\xbe\xf8\x30\xd2\xfb\xbd\x2d\x10\x78\x61\x3f\xae\x7b\x66\x20\xf0\xa7\x40\xef\xc2\x29\xd1\xfa\x2c\xc4\x61\x6e\x15\x6f\x17\xbe\xe2\x27\xe5\x34\x23\xd0\x8c\xe1\x27\xc6\xa5\x82\x09\xa6\xd9\x43\xcf\xcc\xce\xf7\xff\x11\x00\x00\xff\xff\xf2\x6a\x18\xb5\xac\x2c\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 11436, mode: os.FileMode(420), modTime: time.Unix(1558444147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs":        debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved":      hard_reserved,
	"obfstring.go.tmpl":  obfstringGoTmpl,
	"preload.gs":         preloadGs,
	"soft_reserved":      soft_reserved,
	"vm_file.go.tmpl":    vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs":        &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved":      &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl":  &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs":         &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved":      &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl":    &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
