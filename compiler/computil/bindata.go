// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531353062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531353062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(420), modTime: time.Unix(1531366263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531353062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531353062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0a\x80\x50\x0c\x03\xd0\x3d\x97\xc9\x51\x74\xf9\xe0\xea\x50\xaa\xa8\xe4\xd3\x06\xcf\xff\x1f\x2f\x7d\x41\x70\x74\x54\x13\x2c\xc9\x04\x67\xdd\xff\xe9\x20\x52\xca\x37\x90\x9a\x4f\x62\xec\x07\x64\x0b\x9b\xad\x15\x00\x00\xff\xff\xe0\xe3\x66\x7a\x3a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 58, mode: os.FileMode(420), modTime: time.Unix(1531353062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\x1b\xb9\xf1\x7f\x6d\x7d\x8a\xf9\xef\xdf\x2e\x56\xc1\x7a\xe5\x5c\x8b\x16\x70\xeb\x02\x8e\xa5\xcb\xb9\x71\xec\xc0\xf2\xe5\x50\xf8\x02\x1f\xb5\x3b\x5a\x33\xde\x25\xb7\x24\x65\x5b\x09\xf4\xdd\x8b\x21\xb9\x8f\x96\x6c\x5d\x73\x38\xa0\x40\x5f\x18\x96\xc8\xe1\x3c\xcf\x6f\x86\x54\xc9\x92\x3b\x96\x21\x14\x8c\x8b\xc1\x80\x17\xa5\x54\x06\xc2\x01\x40\x30\x5b\x1a\xd4\xc1\x60\x27\x48\x64\x51\x2a\xd4\x7a\x94\x7d\xe1\x65\x40\x5b\x89\x5a\x96\x46\x8e\x18\xed\x37\x5f\x13\x5e\xde\xa2\xa2\x13\x28\x12\x99\x72\x91\x8d\x66\x4c\xe3\x9f\xff\x64\x89\xe6\x85\xa1\x2d\x2e\x83\x01\x7d\xcd\xb8\xb9\x5d\xcc\xe2\x44\x16\xa3\x0c\xc5\x41\xc2\x53\x1c\x65\x3a\x51\xbc\x34\x23\x14\x19\x17\x18\xf4\xc8\x94\x9c\xa1\x32\x77\x8a\x17\x28\x46\xd2\x18\x49\x04\x5f\xbf\x02\x9f\xc3\x6e\xfc\x03\xd3\x63\x9c\x2d\xb2\x8c\x8b\x6c\x22\xd8\x2c\xc7\x14\xf6\x57\xab\x97\x24\xa5\xf6\x0c\x29\x4d\xac\xf6\x01\x45\x0a\xf6\x54\x8b\xef\x99\xfc\xb5\x5c\x73\x49\x3c\x47\xda\x30\x91\x32\x95\xf6\x98\x0f\x00\x46\x23\x38\xb5\x9e\xe6\x22\x83\x82\xe9\x3b\xed\x44\x2a\x26\x32\x84\x5d\x5e\x46\xb0\x5b\x70\x38\x3c\x82\xdd\xf8\x8c\x8b\x3b\x54\xf1\x7b\xa6\xef\x30\x75\xa7\x74\xad\xe3\x6e\xc1\xe3\x73\x7c\x38\xce\x39\xa3\x45\x08\x68\x8d\x97\xb0\x5a\x79\xe7\x78\x99\xc3\xc1\xe0\x9e\x29\x08\x07\xa4\x87\x97\x72\x13\xc1\x2e\x16\x33\x4c\x9d\x9c\x09\x7d\xf4\x9c\x47\x23\xcb\xdc\xee\xc6\xa7\x63\xe2\x7c\x2b\xf3\x54\x83\xb9\x45\x48\x99\x61\x30\x97\x0a\xec\x76\x8a\x29\xcc\x79\x8e\xad\x03\x17\x8a\x67\xe7\xac\xc0\x46\xcb\x36\xa3\x23\xa7\xa4\x5b\x1a\x13\x2f\x52\x76\xd0\x72\xd0\x70\x30\xf0\x0a\xf8\x23\x0f\x8a\x95\x4e\x76\x86\x02\x35\xd7\xf0\xf1\xbd\xd5\xc0\xd2\x54\xa2\xcc\xb2\xc4\xf6\x29\x6d\xd4\x22\x31\xf0\x75\x00\x30\x81\x57\x2e\xa7\xe2\x89\xfd\x37\x00\x78\x07\xd7\x9f\x28\xc3\xb7\xca\xa1\x31\xbc\xaa\x32\x25\x1e\xfb\x0f\xdd\xa0\xae\xac\xce\xe7\xf8\xd0\x52\x20\x51\xc8\x0c\x76\x15\x57\x0b\x61\x78\x81\x56\x7b\x97\x2d\x5d\x23\xe6\x0b\x91\x74\xd9\x84\x43\x78\xd5\x62\x4a\xe6\x18\xa4\x90\x79\x8b\xce\xf1\x21\x0c\xda\x3c\x82\xc8\x79\xd8\x1d\x08\x22\xf8\xe3\x41\x04\xc1\xe4\x11\x93\x85\xc1\x60\xb8\x45\x72\xb3\x9c\xf8\x57\xe9\x4b\x12\xa6\xfe\xf3\x99\xcd\xec\x50\xf0\xbc\x12\xd2\x08\x9d\xb3\x5c\xa3\xff\x37\xb4\x5a\xc6\x53\x34\xfe\x04\xcb\x87\xcf\x94\xd8\x13\xb7\x5b\x82\xd4\x9a\x59\x3b\x9e\x0c\x35\x38\xec\xe4\x35\x80\x24\x9a\x3f\x34\xf6\x92\x7f\x00\x26\x87\x60\x30\xb2\x1f\x5f\x8e\x2e\xc0\xf8\x10\xd2\x9a\xbc\xa5\x22\xfd\x29\x34\x0b\x25\x40\xfa\x10\x5b\x49\xdf\x2f\x44\x62\xb8\x14\xef\x70\x09\x81\xc3\xcc\x1b\xa6\x35\x1a\x1d\x50\x8c\xb8\xaf\x52\xb7\x04\x5c\x18\xf9\xeb\x93\x20\x94\xed\xb8\x0f\xb7\x11\x1c\x0e\x01\x95\xa2\xba\xe8\xc0\x09\xf2\x74\x6d\xa9\xef\x77\x6a\x9d\xa7\xae\x3a\x37\xd5\xb1\x8c\x27\xb1\x87\x9f\xeb\xa0\x39\x11\x7c\x82\x23\x20\x85\xc3\xa1\xaf\x28\x70\x21\x18\x8d\xe0\x47\x41\xdd\x05\x95\x2d\xe0\x92\xfe\x73\x73\x0b\x89\x14\xda\x40\x8a\x49\xce\x14\xa6\xc0\x66\xf2\x1e\xed\x09\xef\xe9\xc6\xe8\x71\xd8\x03\x8f\xa1\x8f\x89\x4f\x00\x67\x80\x3f\x26\x78\xbe\x31\x44\xa5\xc2\x5c\xb2\xb4\x13\x1c\x0a\x48\x15\x08\xbf\x0f\x39\x9f\x29\xa6\x96\xdf\x1a\x98\x96\xb8\x4e\x48\xaa\x54\x8a\x27\xf1\x99\x64\xe9\xd4\x4a\x08\x2b\xf2\x38\xd3\x41\xd4\x75\xf3\xcd\xcd\x87\xcb\xc9\xd9\xc5\xf1\x38\xf8\x14\x0e\x87\x2f\x65\xa0\xd3\xd8\x1a\x49\xfc\x9c\x89\x6b\xcc\x78\x9a\x90\x1f\xdf\xff\xca\x9c\x6b\x44\x6d\x63\x60\x0f\x28\x7a\x26\x4e\xce\xaf\x2e\xff\xf9\xe1\xe2\xf4\xfc\xea\x79\x2b\xd1\x23\x18\x59\xe0\x3f\x3f\x69\x0a\xcc\xd8\x15\x14\x46\x2d\xa1\x94\x5c\x18\x08\x53\x9c\x73\x81\x29\xcc\x96\x70\x8f\x4a\x73\x29\x22\x58\xe8\x05\xcb\xf3\x25\x8c\xb1\xcc\xe5\x92\xa4\x6e\x69\x7f\x4b\x89\x7e\xb5\xbd\x80\x32\x32\x1e\xc7\xa7\xe2\x33\x26\xc6\x12\x9c\x48\xa1\x65\x8e\xe1\x13\x58\x24\xef\xb8\x93\xc7\xb6\xb0\x2d\xc5\x4d\x44\xb2\xa8\x7a\x69\xfb\x84\xe5\x79\xa5\xd5\x4f\xdc\xdc\x5e\xf1\x02\xe5\xc2\x84\x81\x33\xc7\x62\xbc\x0f\x05\x2a\xf5\x52\xda\x08\x66\xf8\xbd\x73\x2b\xb7\xfa\xf9\x36\xbf\x14\xac\xe0\x89\x75\x53\x4e\x33\x48\x0a\x8e\xd2\x56\x3b\x31\x59\x83\x6c\xbe\x2f\x7f\x3b\xa8\x35\x4a\x75\xdc\x4c\x43\x0c\x39\xc2\xae\x0c\xc0\x7e\x3e\xb2\xa5\xef\x90\x6c\x7f\x1f\xde\x4c\xde\x9e\x9e\xc3\xf9\xf1\xd5\xe9\xc7\x09\x7c\x38\x3e\x79\x77\xfc\x76\x02\xa7\xef\x3f\x5c\x5c\x5e\x4d\x3b\xb0\x28\x74\x04\xbb\xe5\x5d\xe6\x30\xf1\xad\xfc\xe0\x26\xe1\x37\x4b\xd2\x58\x97\x2c\xc1\x06\x21\x9b\x69\x8d\x34\x2e\xef\x32\x9f\xc0\x1f\x98\xb9\x25\xc7\x2d\x44\x8a\x0a\x44\x7d\xb0\xa2\x72\x53\x5b\x55\x77\xa1\x54\x3c\xe3\xc2\xba\xf4\x81\x69\x4b\x25\xb4\xc7\xb5\x1b\x51\xae\x3f\x45\xfd\xad\xea\xf5\xd6\x2b\x5e\x51\x07\xb3\x8d\x1e\x87\xae\x23\x3f\x51\x2e\x70\x8d\x8d\xd8\xb5\x48\xea\x72\xb4\x9b\xd3\x65\x31\x93\xf9\x15\x65\xdd\x21\x14\xac\xbc\xd6\x46\x71\x91\x7d\x7a\xd5\x11\x4c\x81\xfa\xba\x8a\x1a\x10\xf6\x9e\x9c\xf3\xf4\x31\x82\xdd\xb9\xf5\x24\x31\x9f\x2e\x92\x04\xb5\x9e\x2f\xf2\x7c\x69\xe7\xd7\x94\x8e\xb6\x3a\xce\x71\x4a\xd7\x83\x3a\x93\x5c\xa9\xa2\xb2\xc9\xd3\xcb\x32\xe8\x69\x1c\xd3\xf7\x79\x9d\x34\xe4\x21\x23\x41\x5b\x03\xc0\x90\x05\xd6\x99\xf3\xb5\xce\xb4\x67\x79\xfa\xb8\xd6\xaf\xd6\xbc\xbe\xaf\x3a\x92\x2a\x6f\xf1\x4c\x30\xb3\x50\x0d\x4d\xbd\xd2\x10\xd1\xb1\x43\x90\x71\x6b\x34\xb1\xa4\xf6\x63\xe5\xc3\x4d\x41\x8f\x5b\x01\xb9\x5e\xa3\x07\x35\xdd\x2d\x6c\xec\xb7\x4a\xca\x64\x5b\xe2\xe4\x7c\xef\xe7\xea\x02\xb8\xae\x29\x54\x05\xd6\x20\x76\x27\x03\x1d\xb2\xdb\x0c\x0e\xa2\x8d\xb6\x50\x72\xf3\xb9\xe5\xf4\x7f\xb6\x56\xfd\x80\xd0\x42\xa8\x35\x5d\xdd\x15\xf3\xe4\x7c\xbc\xb9\x94\xb7\x87\xb8\x6a\x94\xbd\xf1\x0d\x7e\x1b\xb0\xab\xce\x34\x43\xc1\xef\x00\x7b\xeb\x14\xdd\x12\x00\x01\x84\x29\x29\xa9\xaf\x7b\x55\x5b\xc1\xc5\xea\x9b\x31\xd2\x37\xb4\xfa\x32\xc0\x67\x7a\x1d\x44\x56\xfb\x70\xe6\x3d\xe7\x35\x38\x6c\x00\xef\xf7\xc5\x3b\x9f\xa1\xff\x21\xd2\xfd\x0f\xea\xfe\x2b\xa0\xae\x0f\x20\x54\x0d\x47\x40\xf7\x0e\x91\x86\xc2\x94\xcf\x03\x54\xeb\x68\x1f\x27\x9f\x00\xc1\x76\x48\xd9\xaa\x12\x3a\x45\x2a\x6c\x8d\x84\xeb\xaf\x34\xd6\x9d\x17\xe3\x77\x7e\xdb\x23\x17\xda\xd7\x37\x72\xd6\x1d\xba\x9b\x4b\x7f\x26\xb6\x63\xa4\x03\xa2\x0e\x9f\xee\x8d\xed\xc9\xed\xeb\x62\x7c\x39\x5e\x23\xfe\x72\x4c\x37\x38\xc3\xf8\xf3\x0a\xa0\xb0\xcb\x74\xc1\x73\xf2\x09\xb9\x7a\x7c\x8e\xbc\xfc\xaf\x83\x9d\xd6\xbb\x94\xab\xb0\x99\x83\x9c\x71\xcd\xfd\x1d\x2e\x8f\x95\x62\x4b\x1b\xa3\x1d\x7b\x80\xcf\xa1\x90\xa9\x3d\x01\x7f\xa9\xd7\xa1\x54\x5c\x98\x39\x04\x3f\x8b\x9f\xed\x15\xc5\x53\x57\xf1\xed\xd0\x1c\x3c\xee\x3d\x46\x10\x90\x3c\xbb\xd7\x3c\x2d\xf4\x2d\x1f\x03\xaf\x0d\x96\xdd\x92\xee\x3c\x86\xf9\x4b\xff\xb3\xfd\xa0\x7d\xc5\xd5\xe0\x10\xa8\x13\x8c\x59\x3d\xef\x33\xd4\xf1\x39\x3e\x9c\xd8\xb7\xd5\xb0\x17\xbf\x17\x12\xca\x7b\xb7\x7a\xc9\x48\x67\xaf\x89\xa3\xc0\x87\xd0\xbe\xed\xc6\x6f\x16\xf3\x39\xaa\xa1\xdd\xfa\x6e\xfd\xd6\x8e\x56\x09\xed\xb8\xd5\x73\x7c\xb8\x44\x96\xa2\x0a\x1d\xeb\x50\x5b\x15\x28\xb4\xfc\x1e\xae\x49\xd7\x37\xb9\x4c\xee\xa6\xfc\x0b\x56\xaf\x6b\xda\x28\x64\x05\xf1\x70\xef\xc3\xc4\xe4\xe2\xfb\x37\xe1\x2c\x02\x7e\x7f\x7d\xf8\x69\x38\xd8\xb1\x1e\x45\x6b\xae\x7b\x30\x26\x9a\xb1\x5b\x0c\xfd\xca\xd4\xa4\x13\xff\xaa\x1c\x81\x56\x09\xc9\x45\x91\x38\x75\x2c\xc0\x79\xf6\x53\x2b\xcf\xad\x7f\x9d\x1e\x7a\xf9\x11\x5c\x1e\x82\x97\xb3\x72\x5e\x6b\xee\x54\x5c\xc6\x27\xb2\x5c\x86\xe9\xec\x75\xd4\x30\x1d\xfe\x75\x3b\xc7\xee\x64\x5f\x54\xcd\x2a\xfb\xc2\xcb\x96\x9b\xd2\xd9\xeb\xe1\x60\xa7\x1f\xa2\x9d\x9d\x3e\x9f\x9d\xd5\x60\xc7\xeb\xd3\x56\xe7\xbb\x08\xb2\x2f\x6a\x6b\x0e\xd9\x17\x15\x9f\xe4\x52\xd3\xad\xb2\x22\x48\x67\xdf\xc5\x6f\x28\x78\x61\x75\xb3\x1e\xdb\x97\x17\x4a\xe0\x71\x6b\xea\x71\xbd\x0b\x6a\xe4\xfd\xc9\x3d\xd9\xe8\x41\xd3\xfb\x6e\xea\xc6\x57\x3d\x4a\x6f\x6a\x7e\xab\x55\xb7\x76\x5a\xed\xa0\xaa\x22\x3b\x65\xa9\x6e\x0d\x39\xb2\xfa\x26\xb6\xb9\x0d\x3e\x33\x55\xf5\xe5\x85\x64\x1e\x48\x63\x64\xcd\x80\xae\xcf\x43\xb7\xf4\x91\xe5\x0b\x57\x71\xd4\xa9\x55\xb6\x28\x50\x18\x98\x32\xc1\xcd\x12\x4e\x6e\x31\xb1\x2f\xf3\x7c\x0e\x39\x0a\xcb\x29\xae\x88\xce\xb8\x36\x43\xf8\x3b\x09\xcd\x51\x38\xbd\x8f\x55\xa6\xab\x37\xda\xce\x63\xc8\x25\xe3\x1a\xc3\x80\xf9\xb3\x41\x04\x81\x91\x12\x0a\x26\x96\x50\x2d\x6a\x28\x09\x3a\x52\x6a\xf1\xb5\x57\xf6\x74\xf5\x9a\xdb\x6d\x8a\xd5\x43\xd8\x66\xcd\xfe\xf6\x4d\x9a\xcd\xf1\xe1\x5b\x14\xeb\x8c\x4c\xcc\x01\x3a\xb3\x99\x53\x2b\x53\xcf\x47\x6e\x20\x69\x12\xaf\x8e\xc2\xff\x13\x77\x56\x5f\x64\x08\x64\x58\x6b\xc9\x86\x9b\xc5\x93\x47\x33\xe5\x99\x23\x51\xed\xfd\xba\x24\x3b\xce\x09\x5b\x14\xc3\x78\xf2\x48\x9d\x3a\x7c\x01\x46\x5b\x7e\xfa\xac\xd1\x1e\x21\xe3\x13\xb9\xc8\x53\x10\xd2\x80\x5b\xab\x1d\x06\x7b\x29\xc8\x79\xcf\x57\x1d\xcd\x9e\x89\xa8\x7e\xe0\x26\xb9\x85\x7b\xd2\xbc\x63\x4f\x1c\x9a\x65\x89\x43\xab\x5a\xc2\x34\xf6\xed\x3f\xb4\x2a\x77\x3c\xf4\x84\x43\xef\x88\x45\x7e\x9c\xb3\x45\x6e\x0e\x37\x18\x6c\x7f\x54\x49\xa4\xf0\x2f\x67\x64\x77\x6d\xa6\xdd\x2b\xb8\x2e\x18\x69\xbc\x4f\x6e\xc0\x84\x3a\xfe\x9e\x8e\x20\x93\x06\xf6\xae\xaa\x24\x69\x09\x0d\x22\xb8\xef\xbd\xe3\xae\xba\xcf\x09\x8a\xd4\x8d\x60\x57\xd5\x19\x73\xe9\x07\x9e\x8d\x49\xe3\x08\x5c\xca\xa8\x4e\xca\xa8\xd6\x92\x75\x99\xea\xa4\x4c\x67\x64\xb4\xdb\x68\xce\x50\x90\xe4\xba\x78\x2a\xe9\xad\x5f\x2d\x32\x53\x53\x1e\xd4\x3f\x99\x11\xae\x58\x6c\xeb\x8d\xf5\x9e\xf3\x3c\x7e\x8b\x02\x15\x33\xe8\x18\x4e\x6d\xdb\x87\x40\x05\xcd\xc3\x7b\x1b\xfd\xba\x53\xf2\x93\x8c\x09\xbb\x3c\x8f\x55\x56\x31\x64\x41\x33\xd4\x52\x5a\xff\xab\xd6\xf5\x75\xad\xeb\x94\x8b\x2c\xc7\x2a\xe0\x34\xd0\xe1\xa3\x81\x7d\x60\xc6\x60\x51\x1a\xaa\x75\xbf\x67\x6e\x99\xfd\x6a\x87\x5c\x85\xe6\x23\xcb\xbb\xa5\x75\x41\x40\x7a\x25\x2d\x94\x86\xea\x60\xfb\x62\x72\x2b\xae\x94\xaa\x04\x83\x39\xe3\x39\xa6\xb6\x1d\xf8\x13\x07\x60\x33\xff\x68\xef\x6a\x08\xfb\xb0\x77\x1f\x44\xa0\x0e\xac\x0a\xc3\xee\xb8\xec\x94\xf3\x41\xcd\x35\xd6\xc6\x5e\xdd\x72\xdd\x94\xe3\x2d\xd3\x50\x2c\x72\xc3\xcb\xda\x01\x1a\xf6\xfd\x73\x00\x39\xd0\xce\xf7\x0c\xfe\x31\x05\x66\x07\x4e\x3b\xca\xad\xf5\x57\x22\x8b\x92\x19\x3e\xe3\x39\x37\xcb\x01\xc0\x67\x7d\x31\xfb\xbc\xc6\x3b\x17\x33\xe2\x1d\xfe\x72\xfd\xe9\x97\x35\xcd\x7c\x83\x77\xdc\x6f\x13\x5d\xa4\x71\x3f\x29\x36\xea\x33\xad\x79\x26\x6c\x35\xba\x9f\x3b\xe9\x5e\xe6\x9d\x54\x3b\xe8\x49\x71\x45\xb0\x7b\xb3\xb9\xb6\x7c\x2d\xb9\xd6\xd8\xab\x28\x37\xa0\x58\x33\xe3\x29\xfa\xa7\x7d\xbf\x4d\x71\x69\x7d\xfd\xcd\xf3\x60\x2f\x7d\x9a\x08\x2d\x79\x5d\xe9\x9d\xfc\x68\xc3\x4c\x63\x60\x75\x4d\xa2\xea\x49\x41\xda\x10\x35\xc9\xe4\x6c\x74\x49\x3d\x5c\x03\x14\x2f\x24\x98\xa8\xea\x47\x47\x36\x0f\xac\xb4\x9a\x82\x89\xb4\x92\xb3\x10\xfe\xf7\x89\xb8\x81\x89\xdf\x10\x02\x2a\x6f\x53\x16\xfe\x58\x89\x5a\x6b\xd5\x6a\xd0\xb8\x89\xa6\xb7\x2b\x46\x19\x9f\xc2\x0f\x8c\x2b\x0d\x33\xcc\xe5\xc3\xc0\xbe\x1e\xed\xff\x3b\x00\x00\xff\xff\x67\x84\x9d\x63\x33\x22\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 8755, mode: os.FileMode(420), modTime: time.Unix(1531397574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

