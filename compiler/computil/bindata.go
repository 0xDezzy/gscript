// Code generated by go-bindata.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
// DO NOT EDIT!

package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f\x29\xc9\x07\x04\x00\x00\xff\xff\xfd\x5e\x58\x46\x1a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 26, mode: os.FileMode(420), modTime: time.Unix(1532895396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\x1b\xb9\x11\xfe\x6c\xfd\x8a\xe9\xd6\x2e\x76\x03\x79\x95\x5c\x8b\x16\x70\xeb\x02\x8e\xa5\xcb\xf9\xe2\xd8\x81\xe5\xf3\xa1\xf0\x19\x0e\xb5\x3b\x5a\x33\x5e\x71\xf7\x48\x4a\xb6\x62\xe8\xbf\x17\x43\x72\x5f\xbd\x92\x95\xcb\xa1\x45\x81\x7e\x08\x22\x93\xc3\x79\x9f\x87\x43\x72\x73\x16\xdd\xb3\x04\x61\xc6\xb8\xe8\xf5\xf8\x2c\xcf\xa4\x06\xbf\x07\xe0\x4d\x96\x1a\x95\xd7\xdb\xf1\xa2\x6c\x96\x4b\x54\x6a\x90\x7c\xe1\xb9\x47\x53\x91\x5c\xe6\x3a\x1b\x30\x9a\xaf\xfe\x8c\x78\x7e\x87\x92\x56\xa0\x88\xb2\x98\x8b\x64\x30\x61\x0a\xff\xfa\x17\x43\x34\x9d\x69\x9a\xe2\x99\xd7\xa3\x3f\x13\xae\xef\xe6\x93\x30\xca\x66\x83\x04\xc5\xeb\x88\xc7\x38\x48\x54\x24\x79\xae\x07\x28\x12\x2e\xd0\x6b\x91\xc9\x6c\x82\x52\xdf\x4b\x3e\x43\x31\xc8\xb4\xce\x88\xe0\xe9\x09\xf8\x14\x76\xc3\x1f\x98\x1a\xe2\x64\x9e\x24\x5c\x24\x23\xc1\x26\x29\xc6\xb0\xbf\x5a\xf5\x00\x5e\x90\x15\x9b\x55\xa4\x36\x31\xdb\x07\x14\x31\x98\x75\x35\xce\xa7\xd9\xd7\xf3\x4d\x33\xe2\x3a\x50\x9a\x89\x98\xc9\xb8\xc5\xbe\x07\x30\x18\xc0\x89\xf1\x36\x17\x09\xcc\x98\xba\x57\x56\xa8\x64\x22\x41\xd8\xe5\x79\x1f\x76\x67\x1c\x0e\x0e\x61\x37\x3c\xe5\xe2\x1e\x65\xf8\x81\xa9\x7b\x8c\xed\x2a\x05\x4e\x8b\xa7\x27\xa2\x0b\xcf\xf0\xe1\x28\xe5\x8c\x86\xc1\xa3\x31\x9e\xc3\x6a\xe5\x5c\xe4\xa4\x06\xbd\xde\x82\x49\x13\x5d\xd2\xc5\x49\xba\xed\xc3\x2e\xce\x26\x18\x5b\x59\x23\xfa\x59\x72\x1f\x0c\x8c\x00\x33\x1f\x9e\x0c\x89\xfb\x5d\x96\xc6\x0a\xf4\x1d\x42\xcc\x34\x83\x69\x26\xc1\x4c\xc7\x18\xc3\x94\xa7\x58\x5b\x70\x2e\x79\x72\xc6\x66\x58\xd7\xb5\xce\xea\xd0\xaa\x6a\x87\x86\xc4\x8d\x54\x6e\xba\x2a\xe8\xf5\x9c\x12\x6e\xd1\x83\x64\xb9\x95\x9f\xa0\x40\xc5\x15\x5c\x7d\x30\x5a\x18\x9a\x42\x9c\x5e\xe6\x58\x5f\xa5\xb4\x9c\x47\x1a\x9e\x7a\x00\x23\x78\x65\x33\x2c\x1c\x99\xff\x7a\x00\xef\xe1\xfa\x86\xf2\x7d\xcb\x8c\x1a\xc2\xab\x22\x6f\xc2\xa1\xfb\xd1\xd4\x7a\x65\xb4\x3e\xc3\x87\x9a\x0a\x91\x44\xa6\xb1\xa9\xba\x9c\x0b\xcd\x67\x68\xf4\xb7\x99\xd3\x34\x63\x3a\x17\x51\x93\x8d\x1f\xc0\xab\x1a\x53\x32\x48\x23\x85\xce\xd9\x74\x86\x0f\xbe\x57\xe7\xe1\xf5\xad\x97\xed\x02\xaf\x0f\x7f\x7e\xdd\x07\x6f\xf4\x88\xd1\x5c\xa3\x17\x6c\x95\xea\x2c\x25\x09\x45\x32\x93\x8c\xb1\xfb\x7d\x6a\xf2\xdc\x17\x3c\x2d\xc4\x54\x62\xa7\x2c\x55\xe8\xfe\x0b\x0c\x1f\x8d\xe1\x18\xb5\x5b\xc3\xd2\x60\x43\xd1\x3d\x73\xbe\x53\x25\x36\xc6\x96\xee\x27\x73\x35\x06\x8d\x3c\x07\xc8\x88\xe6\x4f\x95\xd5\x4f\x66\xe9\xe8\x00\x34\xf6\x8b\x4c\x7c\x31\xca\x00\xc3\x03\x88\xcb\x05\x35\x35\xe9\x9f\x44\x3d\x97\x02\x32\x17\x6a\x23\xeb\xfb\xb9\x88\x34\xcf\xc4\x7b\x5c\x82\x67\xb1\xf4\x96\x29\x85\x5a\x79\x14\x2b\xee\x2a\xd7\x0e\x01\x17\x3a\xfb\xfa\x64\xf0\xb3\x7a\xfc\x83\x6d\x04\xfb\x01\xa0\x94\x54\x21\x0d\x88\x41\x1e\x77\x96\xfe\x7e\xab\xf6\x79\x6c\x6b\x75\x7d\x5d\x67\xe1\x28\x74\xb0\x74\xed\x55\x6b\xbc\x1b\x38\x04\x52\xda\x0f\x5c\x7d\xc1\x93\xf3\xec\x60\x00\x3f\x09\xda\x7b\x50\x9a\x82\xce\xe9\x7f\xae\xef\x20\xca\x84\xd2\x10\x63\x94\x32\x89\x31\xb0\x49\xb6\x40\xb7\xc6\x79\xbc\x32\x7e\xe8\xb7\x00\xc5\x26\xd9\xaa\x4a\x06\x6b\x8a\x5b\x28\x78\xba\x36\x58\xb9\xc4\x34\x63\x71\x23\x4c\x14\x9a\x22\x24\x6e\x1e\x52\x3e\x91\x4c\x2e\xbf\x35\x44\x35\x71\x8d\xe0\x14\x49\x15\x8e\xc2\xd3\x8c\xc5\x63\x23\xc1\x2f\xc8\xc3\x44\x79\xfd\xa6\xb3\x6f\x6f\x3f\x5e\x8c\x4e\xcf\x8f\x86\xde\x8d\x1f\x04\x2f\xe5\xa2\xd5\xd8\x18\x49\xfc\xac\x89\x1d\x66\x3c\x4f\xcd\xab\x0f\x5f\x99\x7d\x95\xa8\x6d\x0c\x6c\x01\x47\xcb\xc4\xd1\xd9\xe5\xc5\xbf\x3e\x9e\x9f\x9c\x5d\x6e\xb6\x12\x1d\xa6\x91\x05\xee\xf7\xb3\x8d\x82\x69\x33\x82\x42\xcb\x25\xe4\x19\x17\x1a\xfc\x18\xa7\x5c\x60\x0c\x93\x25\x2c\x50\x2a\x9e\x89\x3e\xcc\xd5\x9c\xa5\xe9\x12\x86\x98\xa7\xd9\x92\xa4\x6e\x69\x7f\x4d\x89\x76\xdd\xbd\x88\x38\x59\x38\x0c\x4f\xc4\x67\x8c\xb4\x21\x39\xce\x84\xca\x52\xf4\x9f\xc1\x24\xf9\xc7\xae\x3d\x32\x45\x6e\x28\x6e\xfb\x24\x8d\x2a\x99\xa6\x8f\x59\x9a\x16\x7a\xfd\xcc\xf5\xdd\x25\x9f\x61\x36\xd7\xbe\x67\x0d\x32\xb8\xef\x82\x81\x52\xbe\x94\x38\x82\x69\xbe\xb0\x8e\xe5\x46\x3f\xd7\x00\x2c\x05\x9b\xf1\xc8\x38\x2a\xa5\x1e\x25\x06\x4b\x69\xaa\x9e\x98\x74\xa0\x9c\xdb\xad\xbf\x1d\xe0\x2a\xa5\x1a\x8e\xa6\x16\x87\x1c\x61\x46\x7a\x60\x7e\x1f\x9a\xe2\xb7\x5d\xd7\xfe\x3e\xbc\x1d\xbd\x3b\x39\x83\xb3\xa3\xcb\x93\xab\x11\x7c\x3c\x3a\x7e\x7f\xf4\x6e\x04\x27\x1f\x3e\x9e\x5f\x5c\x8e\x1b\x10\x29\x54\x1f\x76\xf3\xfb\xc4\xe2\xe3\xbb\xec\xa3\xed\x96\xdf\x2e\x49\x63\x95\xb3\x08\xeb\x68\x59\xf5\x73\xa4\x73\x7e\x9f\xb8\x24\xfe\xc8\xf4\x1d\xb9\x6e\x2e\x62\x94\x20\xca\xa5\x05\x95\xed\xeb\x8a\xda\xf3\x33\xc9\x13\x2e\x8c\x53\x1f\x98\x32\x54\x42\x95\xe8\x76\x2b\xf2\xee\x75\xb4\xe3\x15\x3d\x80\xf1\x8c\x53\xb6\x80\xdc\x4a\x97\x03\xbb\x53\x3f\x53\xd0\xeb\x3b\x52\x62\x59\x23\x2a\x0b\xd3\x4d\x8f\x97\xb3\x49\x96\x5e\x52\xfe\x1d\xc0\x8c\xe5\xd7\x4a\x4b\x2e\x92\x9b\x57\x0d\xf1\x14\xb2\xa7\x55\xb1\xe6\x72\x99\xa3\xda\x40\x4d\xf3\x15\x35\x65\xbe\xde\x44\x6e\x08\x2a\xfa\x2b\x26\x37\x51\x5f\x31\x59\xd0\x96\x8d\xa8\x8b\xf0\x94\xc7\x8f\x7d\xd8\x9d\x9a\x08\x93\xb1\xe3\x79\x14\xa1\x52\xd3\x79\x9a\x2e\x4d\xdf\x1d\x93\x21\xaa\xd6\x15\x0c\x06\x70\x14\xd3\xf1\xa6\xcc\x72\x0b\x24\x28\x4d\x62\xb7\x2a\x00\x5a\x5e\x0c\xe9\xef\x69\x99\xd0\x14\x39\x9d\x81\x32\x2e\x05\x4d\x3e\x75\x62\x6e\xc5\xb4\x33\xd0\x66\x3d\x8f\x1f\x3b\x63\x6e\x9c\xee\x18\x34\xe2\xd8\x90\x58\x46\x12\x60\xcc\x13\xc1\xf4\x5c\x56\x74\xe5\x48\x93\x90\x96\x1f\x40\x16\xd6\x9a\x2a\x43\x6e\x7e\x16\x64\xab\x52\xf7\xee\x24\x0d\x6b\xa9\x73\xdd\xa1\x17\x35\x0c\x5b\xd8\x5d\xc4\xb0\xda\xe2\xeb\x21\xa5\x03\x8d\x2e\xe3\xf9\x2e\x33\xa9\xd7\x8c\xdf\xd0\xf4\x17\x14\x42\x06\xe6\xa4\xc0\xcc\xd9\xa9\x38\x45\xb4\xc3\xa5\xc3\x7a\xb7\x43\xe6\xe9\xb5\x2a\xea\x90\x30\xaa\x2b\x36\x26\xc5\xbb\x62\xa3\x9f\x55\x18\xc0\xf7\x2c\xd2\x99\x5c\x3e\xf7\x78\xc1\xbf\x46\xca\x31\x8d\x37\xa5\xbf\x21\x78\xda\x3e\x48\xc6\x61\xd7\x2d\xd5\x6c\x68\x5e\xb6\x7b\x73\x6c\x22\x5b\x6e\x51\x2d\x3c\xb6\xd6\x6b\xf1\xb9\x15\xd1\x5a\x29\xd1\x5a\xef\x5a\x44\xe8\x72\x6f\xd4\xe1\xde\x2b\x96\xce\xf1\xa0\x1b\x81\xc3\xc6\xa2\xad\xbd\x66\xed\xb0\x6e\x8b\x6c\x9e\x3a\xa7\xbd\x6c\xce\x66\xa7\x2d\xac\xd3\x16\xac\xf4\xda\x15\x4b\x79\x4c\xa0\xd7\x70\xdb\x62\xad\x9c\x05\x5b\xeb\x37\xc2\xc6\x2e\xaf\x2d\x58\x87\xdb\x6a\x68\xf1\xc9\x11\xd5\xe1\xe2\xd3\x57\x38\xb8\xe2\xbf\xb5\x87\xc9\xe0\xeb\xb6\x72\xd6\xc5\x5b\x98\xde\xf6\x71\xb9\x6b\x9b\x86\x86\xb0\xc0\x21\x77\x71\x25\xd6\xd5\x04\xd3\x1a\xdb\x50\x54\x3d\x6a\x63\xb7\xb5\xbd\xac\xd9\xaf\xbd\xfe\x5a\x53\xec\x56\xce\xa7\x86\xd7\x1f\x4c\x77\x52\x1e\x8d\x6a\x5d\x99\xf5\x4a\xa1\xe8\xfe\x7e\xaf\x7d\xb2\xb1\xed\xcc\xe8\x6c\xb8\xbe\x99\xd9\xbe\xc9\x2b\x8e\xf7\xb7\xee\x90\xb3\x4d\xbb\x57\xac\xa9\x0e\x46\xff\x81\xc6\xaf\x4b\xd1\x2d\x5b\x40\x00\xa1\x73\x2a\x82\xeb\x16\x46\x16\xcd\xd2\xea\x9b\xbb\x44\xd7\xd4\x97\x17\x24\x7c\xa2\xba\x9b\xc4\x82\x02\x4e\x9d\xef\x9c\x0e\x07\x55\xcb\xf7\xdf\xe8\xf8\x5c\xee\xfe\xe6\x5e\xcf\x25\xec\xff\x5b\xac\xff\xed\x16\xab\x6b\x4b\xa2\xda\x39\x04\x96\xe7\x28\x62\x5f\xe8\x7c\x33\xc0\x35\xb1\xb6\x81\xb4\xcf\x60\xa3\x1b\x6b\xdb\x48\x5b\xab\x29\x5a\x45\x2a\x90\xa0\x2e\x1c\x6d\xa0\xe8\xfa\x4b\x20\xe3\xda\xf3\xe1\x7b\x37\xed\x70\x0e\xcd\x8b\x06\x39\xec\x1e\xed\x5d\x4f\xfb\x16\xc1\x1c\xbb\x2d\x6c\x35\xf8\x34\x6f\xba\x9e\xdd\x58\x9d\x0f\x2f\x86\x1d\xe2\x2f\x86\x10\x65\x42\x33\xbe\x59\x01\x14\x66\x18\xe3\x42\x3e\xe1\x5c\x8b\xcf\xa1\x93\xff\xd4\xdb\xa9\xdd\xf1\xdb\x0a\x9c\x58\x80\x1a\x96\xdc\xdf\xe3\xf2\x48\x4a\xb6\x34\x31\xda\x31\x0b\xf8\x14\x66\x59\x6c\x56\xc0\xdf\xdc\xb8\x09\x65\x2e\xb9\xd0\x53\xf0\x7e\x11\xbf\x98\x6b\x1d\x47\x5f\x44\x98\xfe\x2a\x69\x5e\x3f\xee\x3d\xf6\xc1\x23\x89\x66\xae\xba\x9a\x6d\xdb\x3e\x04\x5e\x9a\x9c\x35\x0b\xbe\xf1\xb0\xe0\xae\x4c\x37\xee\x1f\xf5\x8b\x41\x05\x16\xa7\x1a\xe1\x98\x94\x37\x24\x0c\x55\x78\x86\x0f\xc7\xe6\xc5\xca\x6f\x45\xf0\x85\x94\x72\xfe\x2d\xee\x81\xe3\xc9\x1b\xe2\x28\xf0\xc1\x37\x2f\x66\xe1\xdb\xf9\x74\x8a\x32\x30\x53\xdf\x75\x4f\xed\x28\x69\x3a\x60\x3b\x7a\x86\x0f\x17\xc8\x62\x94\xbe\x65\xed\x2b\xa3\x02\x05\x97\x2f\xe0\x9a\x74\x7d\x9b\x66\xd1\xfd\x98\x7f\xc1\xe2\x95\x42\x69\x89\x6c\x46\x3c\xec\xab\x1b\x31\x39\xff\xfe\xad\x3f\xe9\x03\x5f\x5c\x1f\xdc\x04\xbd\x1d\xe3\x51\x34\xe6\xda\x67\x38\xa2\x19\xda\x41\xdf\x8d\x8c\x75\x3c\x72\x6f\x75\x7d\x50\x32\x22\xb9\x28\x22\xab\x8e\x81\x3e\xc7\x7e\x6c\xe4\xd9\xf1\xa7\xf1\x81\x93\xdf\x87\x8b\x03\x70\x72\x56\xd6\x6b\xd5\x2d\x14\xcf\xc2\xe3\x2c\x5f\xfa\xf1\xe4\x4d\xbf\x62\x1a\xfc\x7d\x3b\xc7\xee\x24\x5f\x64\xc9\x2a\xf9\xc2\xf3\x9a\x9b\xe2\xc9\x9b\xa0\xb7\xd3\x0e\xd1\xce\x4e\x9b\xcf\xce\xaa\xb7\xe3\xf4\xa9\xab\xf3\x5d\x1f\x92\x2f\x72\x6b\x0e\xc9\x17\x19\x1e\xa7\x99\x42\x3f\xe8\x15\x04\xf1\xe4\xbb\xf0\x2d\x05\xcf\x2f\x6e\x23\xab\x13\xe5\xb0\xd6\x25\xd9\xdd\x0d\x4a\xfc\xfd\xd9\x5e\x75\xab\x5e\xf3\xb4\x3a\x6d\x3c\xf3\xad\xdb\x1e\x57\xed\xe2\xa9\xed\x0e\x45\x19\x99\xb6\x4c\x36\x8b\xc8\x92\x95\x97\x57\xeb\x77\xc9\x0d\x6d\x58\x5b\x9e\x4f\xf6\x41\xa6\x75\x56\x32\x38\x66\x69\x1a\xd8\x21\xd3\xfc\x9b\xe0\xd2\x46\x2e\x93\xf9\x0c\x85\x86\x31\x13\x5c\x2f\xe1\xf8\x0e\x23\xf3\xd8\xc9\xa7\x90\xa2\x30\x9c\xc2\x82\xe8\x94\x2b\x1d\xc0\x3f\x49\x68\x8a\xc2\xea\x7d\x24\x13\x55\x3c\x75\x35\x6e\x90\x2f\x18\x57\xe8\x7b\xcc\xad\xf5\xfa\xe0\xe9\x2c\x83\x19\x13\x4b\x28\x06\x15\xe4\x84\x1d\x31\x75\x00\xa5\x57\xf6\x54\xf1\x28\xd6\xdc\x1b\x03\x57\xd3\xeb\x35\xfb\xc7\x37\x69\x36\xc5\x87\x6f\x51\xac\xd1\x74\x32\x8b\xe9\xf6\x4c\x58\x2a\x53\x6b\x34\x6d\xb7\x52\xe5\x5e\x19\x87\x3f\x12\x7f\x56\xbb\x49\x21\xa4\x61\xb5\x41\x13\x72\x16\x8e\x1e\xf5\x98\x27\x05\x91\xac\x53\x94\x95\xd9\x70\x91\x5f\xa3\x08\xc2\xd1\x23\x6d\xd9\xfe\x16\x47\x9d\x9a\xc7\x3e\x2b\x34\xcb\xc8\x0d\x51\x36\x4f\x63\x10\x99\x06\x3b\x56\xba\x0e\xf6\x62\xc8\xa6\x2d\xaf\x35\xb4\x5b\xe3\xc2\xa2\x7b\x52\x0f\x5c\x47\x77\xb0\x20\x0b\x1a\x76\x85\xbe\x5e\xe6\x18\x38\x05\xed\x95\x3d\xfe\x5a\x73\x86\x77\x7d\x63\xda\xd0\x29\x8b\xf0\x69\xe5\x55\x57\x42\x11\x53\x08\xd7\x37\x76\xd7\x39\x28\x5b\x3a\x3e\x55\xf6\xb4\x51\x5b\xf5\xb4\x2a\xa7\xa9\x3c\x6f\xfb\xf0\x68\x15\xa1\xb8\x2e\xa0\xea\x2d\xed\xf2\xb2\xe1\xe2\x53\xd5\x87\xc7\xa0\x9c\xae\xd8\x34\x82\x77\x48\xab\xea\xdd\x5b\x75\xf4\xe5\x53\x32\xe5\x0c\x31\x56\x1f\x58\x9e\x13\x5a\x35\x0d\xb0\x81\xa7\x39\x8c\x2f\x97\x39\x16\x9f\x14\x1c\xac\x13\xd5\xca\x14\x7f\x11\x74\x48\xae\xb1\x2e\x29\x0b\x8e\x2d\x7e\xad\x68\xb4\x16\x05\x4d\x43\xde\xce\x79\xaa\x4f\xc4\xa5\x64\x42\xa5\x8c\x02\x7d\x81\xbf\xce\xb9\xac\x1e\x8b\x1b\xb2\x1d\xf9\x8f\x63\xb2\xec\x9b\x8d\x8a\x71\xca\xe6\xa9\x3e\x58\x9b\xca\xe6\x5e\x31\xca\x84\x7b\x52\xa2\x8c\x2e\x13\xd8\xcc\xcd\xb8\x9a\x31\xca\xc3\x7d\x4a\x70\x8c\xa8\xb1\xdb\x53\x7d\x48\x32\x0d\x7b\x97\x05\x10\xd4\x14\xf1\xfa\xb0\x78\xf6\xc4\xb9\x6a\xe1\x82\x24\x33\xfa\xb0\x2b\x4b\x60\xb8\x70\xad\xed\x06\x6c\xb0\x24\x16\x19\x64\x0b\x19\x64\x6d\xd0\xb8\x46\x36\x90\xa1\x71\x44\x30\xd3\xa8\x4f\x51\x90\xf4\x12\x27\x0b\x0d\x6a\x6f\xfc\x89\x2e\x29\x5f\xd7\x3e\x36\xa1\x4d\xc4\x6c\x64\xad\x23\x5e\xf9\xf9\xc8\x34\x7c\x87\x02\x25\xd3\x68\x99\x8e\x4d\xc1\x81\x27\xbd\x2a\x76\xf5\xcd\xee\xf9\xc5\x53\x03\x16\xfc\x26\xcf\x23\x99\x14\x0c\x99\xd7\x4a\x38\xc2\x01\xa7\xf1\x1b\xa8\x9f\x54\xc7\x5c\x24\x29\x16\x19\x40\x8d\x3c\x3e\x6a\xd8\x07\xa6\x35\xce\x72\x4d\x00\xef\xe6\xf4\x1d\x33\x7f\xba\x8b\x24\x93\x35\x57\x2c\x6d\xa2\xe9\x39\xed\xa0\x97\x99\xd9\x43\x7d\xf9\xba\xa8\xf7\x6e\x04\xed\x4a\x3c\x3b\x62\x11\xb4\xc8\x3e\x98\x32\x9e\x62\x6c\x00\xc7\xad\x78\x0d\x06\xec\x0e\xf7\x2e\x03\xd8\x87\xbd\x85\xd7\x07\xf9\xda\xa8\x12\xb4\x8e\x9a\x6e\x81\x55\xb6\x2c\x85\x54\x61\xc3\x0d\x97\x77\x5c\x55\x98\x7c\xc7\x14\xcc\xe6\xa9\xe6\x79\xe9\x1a\x05\xfb\xee\x3a\x89\x1c\x6c\x4e\x7c\x0c\x7e\x1c\x03\x33\x47\x10\xd3\xda\x77\x7a\x32\xca\x66\x39\xd3\x7c\xc2\x53\xae\x97\x4e\xde\x67\x75\x3e\xf9\xdc\xe1\xb7\xf3\x09\xf1\xf7\x3f\x5d\xdf\x7c\xfa\x0d\x8e\xb3\x8f\xfd\xcd\xbd\xc7\x7e\xb5\x53\xd9\xc2\x94\xe2\x89\x30\x55\x6c\xbf\x29\xa2\x63\xbc\xf3\x5f\xc3\x77\xee\x47\xb3\x32\xfb\xb0\x7b\xbb\xb6\x30\x9d\x23\x5d\x31\xda\x26\xea\x59\x49\x42\x79\x03\x69\x7c\x10\x8e\xd1\xbd\x9f\x3b\x22\x0a\x63\xed\xcf\xa0\xb6\x15\x75\xfb\xe1\x1b\x52\x68\x2f\x7e\x9e\x43\x35\xd9\x4d\x4d\x1a\xee\xa9\x92\xab\x89\xaa\x75\x07\x14\x67\x6e\x2a\xcc\x18\x32\x13\xd9\x66\x46\x5a\x0f\xd8\x4a\x09\x9e\x5f\x58\xb4\xb2\xb4\x33\x47\x45\x51\x9c\xaa\x6f\xd2\xc8\x48\x2d\x29\x98\x88\x0b\x59\x73\xe1\x3e\x13\x08\xeb\x58\xf4\xbb\xe2\x4c\x11\x07\x4a\xe4\x9f\x0a\x71\x95\x75\x35\xdb\x56\xbd\x5e\x0d\xfe\xbf\xfa\xbd\xba\x5a\xa0\xc5\xda\xc7\xb2\x67\x47\x8d\xf2\x65\xcb\x7d\x9d\xa3\x80\x09\x60\xe6\xac\xc2\x27\x69\x09\xd9\x66\x6f\x73\x71\xcb\xe4\xfa\x37\xb5\x6d\x4f\x1c\x85\xd8\x6d\x8f\x1c\x0b\xfb\xb1\x1a\x9d\xba\xd7\xbf\x3e\x18\xe9\xee\x1b\x88\xcd\x08\xbc\xb0\x9f\xa9\x6d\xb8\x10\xf8\x5d\xa0\x77\xe1\x94\x08\x9a\xd7\x55\x0e\x73\xab\x78\xbb\xf0\x15\x3f\x29\xa7\x19\x81\x66\x0c\x3f\x30\x2e\x15\x4c\x30\xcd\x1e\x7a\xe6\x02\x7b\xff\xdf\x01\x00\x00\xff\xff\x82\xfb\x95\xd1\xdc\x2b\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 11228, mode: os.FileMode(420), modTime: time.Unix(1532987545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

