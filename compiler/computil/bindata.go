// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\x52\x50\x48\x86\x70\xf4\x72\xf2\xd3\x35\x94\xd2\xf3\xf3\x53\x92\x2a\x53\x15\x95\x34\xad\xb9\x6a\x01\x01\x00\x00\xff\xff\xcc\xd3\xc3\x7c\x42\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 66, mode: os.FileMode(420), modTime: time.Unix(1531102817, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\xaf\xc2\x01\x89\xd8\x72\x9b\x63\xc0\x87\x96\xa4\x7f\x68\x53\x0a\x6d\xd2\x43\x48\xcd\x5a\x1a\x8b\xc5\xf6\xae\x3c\xbb\x92\x1d\x84\xbe\x7b\x19\xad\x02\x71\x0a\xa5\x14\x27\x17\x69\x77\x34\xfb\x9b\xf7\x76\xc4\x54\x2a\x5f\xa9\x92\xb0\x51\xda\x44\xd1\xb2\x36\x79\xbf\x4c\x52\xb4\x11\xd0\x28\xc6\xae\x84\xbb\x37\x79\xf6\x53\x69\xff\x81\x6d\x5d\x45\x40\xdb\x4e\xc0\xca\x94\x84\xd1\x7c\x8c\x51\xc5\x1a\xe7\x33\x8c\xb2\x6b\xa3\xb7\xdf\x58\x5b\xd6\x5e\x93\x43\xd7\xfd\x99\xdb\x6c\x24\x35\xd1\xa6\xa0\x3d\x46\xd9\x77\xcb\x9e\x8a\x9b\x2b\xd7\x53\xd2\x70\x64\x57\x66\x6f\x8b\x22\x79\x93\x46\x40\x69\x21\xaa\x06\x41\x40\x41\x4b\x12\x51\xd9\x85\x35\x94\xa4\x7d\x4c\xb5\xad\x80\xb3\x4f\x17\xe8\x3a\xc1\x7f\xa5\xdd\xe3\xd0\x90\xa6\x97\x4f\x32\x67\x33\x18\xbd\x1e\xc0\x00\x93\xaf\xd9\xf4\x9b\xae\x7f\x12\xb3\xd0\x0e\x0e\x65\xc3\xe6\x7d\x6d\x72\xaf\xad\xf9\x4c\xf7\x88\xf5\xa6\xb2\xec\xe7\xca\x39\xf2\x2e\x3e\xa8\x28\x8c\x57\x87\x75\x0e\x79\x97\xd9\x17\x5b\x96\xc4\xd9\x25\xb3\xe5\x65\x12\xf7\x6f\x04\xa4\x36\x25\x02\x15\x4b\xcb\xb8\xb9\xc2\x89\x3b\xc7\x49\x13\x8f\x11\x3f\xa6\xc4\x63\x29\x94\xfe\xcd\xc8\xbf\xf8\xa8\x98\xd6\x56\x15\xc7\x71\x20\x82\x07\xa0\xd8\x78\x56\xe1\x43\x03\x8c\xf2\xba\xa1\x63\x37\x20\x50\x9f\xfd\xf2\x07\x0f\x2e\x67\x5d\xf9\x63\x7b\x08\xd4\x17\xf9\x89\x68\x4f\x79\xed\x8f\xd4\x85\x00\x13\x07\xff\x27\x3b\x48\x68\x5b\x90\x29\x30\x79\x98\x2e\x32\xcb\x9e\x7e\xe8\x86\xf1\x57\x26\x2b\x70\x6d\x68\x8c\x05\x6e\xef\x64\x95\xc2\x79\x16\x09\xa2\x5c\x6e\xb0\x9f\x76\x61\xa6\x2d\x06\x3b\x8b\x5b\x7d\x87\x5f\x33\xac\xfa\xdd\x4a\x96\x12\x8a\x82\x8a\xad\x1c\x08\x90\xe4\xf5\xfe\xec\x4c\x4a\xbb\x31\xe6\x43\x38\xb7\xa6\xc9\xae\xcd\xb6\xb6\x9e\x92\x2d\x4e\x1f\x52\x17\x29\x4e\xb1\x95\xe4\xe0\x0a\x4e\x54\x4e\xa7\x98\x4c\x26\xf8\xa1\x4c\xb9\xa6\x02\x1f\x95\x66\x87\x77\xb4\xb6\xbb\x68\x3a\x8d\xa2\xe8\x77\x00\x00\x00\xff\xff\x08\x2f\x9c\x10\xd3\x05\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1491, mode: os.FileMode(420), modTime: time.Unix(1531038670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531098832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1530143358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x4f\x1b\x49\xf2\x7f\x8d\x3f\x45\xfd\xe7\x0f\xa7\x71\x64\x86\x64\xef\x74\x27\x71\x97\x93\x08\xf6\x66\xb9\x24\x10\x61\x36\xab\x13\x1b\x91\xf6\x4c\xcd\xd0\x61\xdc\x3d\xd7\xdd\x06\x1c\xe4\xef\x7e\xaa\xea\x9e\x27\x63\x02\xec\xee\x8b\x7b\x11\xe1\x99\xee\xae\x87\x5f\x55\xfd\xaa\x7a\x52\x89\xf4\x4a\x14\x08\x73\x21\xd5\x60\x20\xe7\x95\x36\x0e\xe2\x01\x40\x34\x5b\x3a\xb4\xd1\x60\x2b\x4a\xf5\xbc\x32\x68\xed\x5e\xf1\x4d\x56\x11\x2d\xa5\x66\x59\x39\xbd\x27\x68\xbd\x7d\x4c\x65\x75\x89\x86\x4e\xa0\x4a\x75\x26\x55\xb1\x37\x13\x16\xff\xfa\x17\xde\x94\xcf\x1d\x2d\x49\x1d\x0d\xe8\xb1\x90\xee\x72\x31\x4b\x52\x3d\xdf\x2b\x50\xbd\x4c\x65\x86\x7b\x85\x4d\x8d\xac\xdc\x1e\xaa\x42\x2a\x8c\xd6\xb6\x19\x3d\x43\xe3\xae\x8c\x9c\xa3\xda\xd3\xce\x69\xda\x70\x77\x07\x32\x87\xed\xe4\x27\x61\xc7\x38\x5b\x14\x85\x54\xc5\x44\x89\x59\x89\x19\xec\xae\x56\x8f\x69\xca\xf8\x0c\x19\x4d\xa2\x76\x01\x55\x06\xab\xd5\xc0\x0b\x36\x42\x15\x08\xdb\xca\x8e\x60\xbb\xba\x2a\x60\xff\x35\x6c\x27\x6f\xf5\x47\x8f\xd8\x9b\xe5\xb1\x98\xa3\xad\x44\x8a\xc0\x8a\xf6\xf6\xe0\x88\xe1\x93\xaa\x80\x0c\x2b\x54\x19\xaa\x74\x09\x35\xc2\x77\x77\x2c\x26\xa1\x63\xb0\x5a\x41\xae\x0d\x28\xe1\xe4\x35\x76\x76\x93\xc1\xf5\x46\x2f\xed\xa3\x70\x97\xb0\x5a\x05\x67\x83\x81\xc3\xc1\x20\xd5\xca\x52\xa4\xc8\xec\x60\xe9\xc5\x08\xb6\x71\x3e\xc3\xcc\x9b\x3a\xa1\x9f\xb6\x31\x8e\xc4\xf2\x6a\x72\x34\x26\xfd\x97\xba\xcc\x2c\xb8\x4b\x84\x4c\x38\xc1\xe6\xf0\x72\x86\x19\xe4\xb2\xc4\xce\x81\x13\x23\x8b\x60\xb6\x37\xa3\x27\xe8\x35\x7c\x69\x5f\x8d\x49\xd6\x6a\xf5\x65\x30\xe8\xe0\x39\x1c\x0c\x82\x01\xe1\xc8\x8d\x11\x95\xd7\x5d\xa0\x42\x2b\x2d\x7c\xfa\xc0\x16\xf0\x9e\x5a\x95\x5b\x56\xd8\x3d\x65\x9d\x59\xa4\x0e\xee\x06\x00\x13\x78\xe1\xb3\x24\x99\xf0\x9f\x01\xc0\x3b\x38\xff\x4c\x39\xfb\xa4\xac\x18\xc3\x8b\x3a\xf6\xc9\x38\xfc\xe8\xe7\xc0\x8a\x6d\x3e\xc6\x9b\x8e\x01\xa9\x41\xe1\xb0\x6f\xb8\x59\x28\x27\xe7\xc8\xd6\xfb\xac\xea\x3b\x91\x2f\x54\xda\x17\x13\x0f\xe1\x45\x47\x28\xb9\xe3\x90\x42\x16\x3c\x3a\xc6\x9b\x38\xea\xca\x88\x46\x3e\x29\xfc\x81\x68\x04\x7f\x7e\x39\x82\x68\x72\x8b\xe9\xc2\x61\x34\x7c\xc4\x61\xf6\x37\x63\x05\x8d\xcb\xa4\xc2\xe1\xb0\x97\x53\x00\x9a\xf6\xfc\xa9\xd5\x44\x96\x01\x4c\xf6\xc1\xe1\x88\x7f\x3e\x8e\x2b\xc0\x78\x1f\xb2\x66\xfb\x6e\x2b\x9c\xfe\x19\x74\x0b\xa3\x40\x07\x70\x59\xd3\x8f\x0b\x95\x3a\xa9\xd5\x3b\x5c\x42\xe4\xf9\xe7\x42\x58\x8b\xce\x46\x84\x8e\x7f\x63\xc1\xbf\x02\xa9\x9c\x7e\x3e\xfc\xb1\xee\x22\x3e\x7c\x8a\xe2\x78\x08\x68\x0c\x65\x64\x8f\x0c\x50\x66\x1b\x8b\x6c\xb7\x57\x65\x32\xf3\x75\xf1\x50\x05\xe9\x64\x12\xaa\xdb\x9e\x47\xed\x89\xe8\x33\xbc\x06\x32\x38\x1e\x86\x5c\x06\x1f\x82\xbd\x3d\xf8\x59\x11\x8f\xa0\xe1\xd2\xa9\xe8\xaf\x74\x97\xe0\x49\x20\xc3\xb4\x14\x06\x33\x10\x33\x7d\x8d\x7c\x22\x20\xdd\x3a\x3d\x8e\xd7\xca\x76\x18\x62\x12\x12\xc0\x3b\x10\x8e\x29\x59\x3e\x18\xa2\xca\x60\xa9\x45\xd6\x0b\x0e\x05\xa4\x0e\x44\x58\x87\x52\xce\x8c\x30\xcb\xdf\x1b\x98\x8e\xba\x5e\x48\xea\x54\x4a\x26\xc9\x7b\x2d\xb2\x29\x6b\x88\xeb\xed\x49\x61\xa3\x51\x1f\xe6\x8b\x8b\x8f\xa7\x93\xf7\x27\x07\xe3\xe8\x73\x3c\x1c\x3e\x96\x81\xde\x62\x76\x92\xe4\x79\x17\x37\xb8\x71\x3f\x21\x3f\x7d\x78\x66\xce\xb5\xaa\x9e\xe2\xe0\x1a\x2f\xac\xb9\x38\x39\x3e\x3b\xfd\xf7\xc7\x93\xa3\xe3\xb3\xef\x7b\x89\x81\x3b\xc8\x83\xf0\xfb\x1e\x1d\x0b\xc7\x6f\x50\x39\xb3\x84\x4a\x4b\xe5\x20\xce\x30\x97\x0a\x33\x98\x2d\xe1\x1a\x8d\x95\x5a\x8d\x60\x61\x17\xa2\x2c\x97\x30\xc6\xaa\xd4\x4b\xd2\xfa\x44\xff\x3b\x46\xac\x57\xdb\x23\x2c\xa3\x93\x71\x72\xa4\xbe\x62\xea\x78\xc3\xa1\x56\x56\x97\x18\x0f\x07\x6b\x9c\x73\x31\x22\xb1\x54\xa8\x84\xd3\xa1\x28\xcb\xda\x80\x5f\xa4\xbb\x3c\x93\x73\xd4\x0b\x17\x47\xde\x72\x26\xd2\x80\x3a\x1a\xf3\x58\x86\xf8\xd6\xed\xcb\x80\x4d\x09\xbd\x74\xa9\xc4\x5c\xa6\x8c\x48\x29\xd5\x15\x66\x75\x93\xcf\x83\x90\x0d\x24\x16\x9a\xdf\xef\xe7\xaf\xd6\xa8\x1e\xa2\xd7\xc2\x30\x10\xfc\x66\x00\xfc\xfb\x35\x57\xb9\x27\xad\xdd\x5d\x78\x33\x79\x7b\x74\x0c\xc7\x07\x67\x47\x9f\x26\xf0\xf1\xe0\xf0\xdd\xc1\xdb\x09\x1c\x7d\xf8\x78\x72\x7a\x36\x7d\xee\x38\xb4\x7b\x7f\x1e\xda\x38\xd3\xc0\x42\x65\x48\x43\x50\x7d\x90\x76\xa9\x30\xb1\x5c\xa8\xaa\x79\xe4\xbe\x54\x77\x47\x76\x31\x68\xf5\xf4\xd8\x0a\xdd\x7f\x68\x7a\xf2\x0d\x89\x4c\xec\x6c\x69\xca\x88\x17\xa7\xcb\xf9\x4c\x97\x67\x94\x67\xfb\x30\x17\xd5\xb9\x75\x46\xaa\xe2\xf3\x8b\x9e\x62\x42\xfd\x6e\x35\x6a\xc9\x33\xc0\x92\xcb\xec\x76\x04\xdb\x39\xc3\x42\xc2\xdf\x73\xf0\x69\x7b\xa7\x3b\x1c\x64\x34\x16\x37\xa9\xe0\xcb\x0a\x4d\x77\x16\x6c\xd6\xd6\xac\x4c\xe8\x39\x6f\xa2\x4e\xa8\x38\x0d\x96\x8d\x06\x47\x56\x33\x68\xf9\x45\x83\x1a\x1f\x90\xd9\xed\x46\x00\xd9\x8f\x75\x50\x7a\xe2\x03\x2c\xf4\x66\x1f\x74\xd2\x19\x0b\x78\x27\xff\xac\x71\xe8\x06\x2b\xe9\x00\x79\xbe\x41\x2c\x35\xb9\xd6\xce\x9e\x99\xeb\xed\x88\x52\x88\x6b\x8b\x40\x0b\xf8\xd4\xe3\xf4\x26\xe2\xad\x33\xbb\x65\xc5\x5e\xb6\x78\xf6\x64\x23\xa3\x51\xcf\x66\x2a\x7d\x99\xf3\xe9\xff\xe3\xc2\x08\x8d\xb7\x43\x07\x1b\xba\xa5\xaf\x9c\xc9\xf1\xf8\xe1\xba\xd9\xcc\x27\x8c\xdd\xc9\xf8\x5d\x58\x0e\xcc\x81\x7c\x8f\x22\x94\xae\xd0\xf7\xcd\x75\x46\xe6\xe9\xc4\x53\x42\x4f\x4e\x7f\x5e\xb8\xd7\xfb\x4f\xc6\xa7\xe3\x0d\xea\x4f\xc7\x34\x3f\x38\x21\xbf\x6f\x00\x2a\x7e\x4d\xe3\x85\xd7\x4f\x6c\xb2\x26\xe7\x75\xd0\x7f\x37\xd8\xea\xdc\x47\x7c\x49\xcc\x3c\x53\x8c\x1b\xe9\xef\x70\x79\x60\x8c\x58\x32\x8a\x5b\x7c\x40\xe6\x30\xd7\x19\x9f\x80\xbf\x35\xef\xa1\x32\x52\xb9\x1c\xa2\x5f\xd5\xaf\xdc\x20\xc3\xee\x3a\x02\xbd\x3d\x2f\x6f\x77\x6e\x47\x10\x91\x3e\x5e\x6b\x07\xdb\x75\xcf\xc7\x20\x1b\x87\x75\xbf\x1e\x7b\x97\xa0\x30\x72\x7e\x97\x99\xbb\x03\x96\x05\xcf\x18\xbd\x60\xcc\x9a\x16\x24\xd0\xd2\xdc\x7d\xc8\xb7\xe4\x78\x2d\x7e\x8f\x24\x60\x40\xb7\x9e\xa3\xb3\xd9\x2b\x92\xa8\xf0\x26\xe6\x5b\x7a\xf2\x66\x91\xe7\x68\x86\xbc\xf4\xc3\xe6\xa5\x2d\x6b\x52\x5a\xf1\x6f\x8f\xf1\xe6\x14\x45\x86\x26\xf6\xa2\x63\xcb\x26\x50\x68\xe5\x35\x9c\x93\xad\x6f\x4a\x9d\x5e\x4d\xe5\x37\xac\x6f\x55\xd6\x19\x14\x73\x92\xe1\x6f\xfa\x24\xe4\xe4\xc7\x37\xf1\x6c\x04\xf2\xfa\x7c\xff\xf3\x70\xb0\xc5\x88\x22\xbb\xeb\xaf\xfe\xb4\x67\xec\x5f\xc6\xe1\xcd\xd4\x65\x93\xf0\x7d\x60\x04\xd6\xa4\xa4\x17\x55\xea\xcd\x61\xa2\x0a\xe2\xa7\xac\xcf\xbf\xbf\x9b\xee\x07\xfd\x23\x38\xdd\x87\xa0\x67\xe5\x51\x6b\xdb\xbc\xd4\xc9\xa1\xae\x96\x71\x36\x7b\x35\x6a\x85\x0e\xff\xfe\x34\x60\xb7\x8a\x6f\xa6\x11\x55\x7c\x93\x55\x07\xa6\x6c\xf6\x6a\x38\xd8\x5a\x0f\xd1\xd6\xd6\xba\x9c\xad\xd5\x60\x2b\xd8\xd3\x35\xe7\x87\x11\x14\xdf\xcc\x93\x25\x14\xdf\x4c\x72\x58\x6a\x4b\x33\x4d\xbd\x21\x9b\xfd\x90\xbc\xa1\xe0\xc5\xf5\x5c\x37\xe6\xb9\x9f\x12\x78\xdc\x99\x3a\x7c\xe3\x81\x86\x72\x7f\xf1\x17\x06\x3b\x68\x9b\xd5\x45\xd3\xa9\x7c\x9b\x32\x89\xef\x53\xab\x55\xbf\x52\x3a\x4c\x5f\xd7\x0c\xcf\x34\xa6\x5f\x31\x7e\x5b\x33\x0a\x3c\xdc\xb1\xbe\x33\xcd\xac\xeb\x8b\xc9\x19\xd0\xce\xe9\x46\x00\xcd\x6f\x43\xff\xea\x93\x28\x17\xbe\xbe\xa8\xa9\x9a\x62\x31\x47\xe5\x60\x2a\x94\x74\x4b\x38\xbc\xc4\xf4\xca\xfa\xd4\x28\x51\xb1\xa4\xa4\xde\xf4\x5e\x5a\x37\x84\x7f\x92\xd2\x12\x95\xb7\xfb\xc0\x14\xb6\xbe\x89\x43\x98\xb8\xf9\x9a\x3c\xa1\x79\x29\x8f\x23\xa7\x35\xcc\x85\x5a\x82\x08\x52\x2c\x54\xc4\x0e\x19\xb5\xe0\x06\x8a\x1d\x4b\x33\xf3\x8e\xad\xaf\xeb\x6b\xdd\x14\xd8\x0e\x72\x02\xcd\x7b\x9d\x0a\x5a\xf0\x85\xdf\x64\x23\xef\x38\x21\x07\x3f\x88\x2b\x3c\x5c\x58\xa7\xe7\x6c\x43\x1c\x35\x5a\x78\x86\x23\x15\x0f\x1b\xc5\xad\xb1\x3e\x10\xd5\x17\xbd\x87\xd1\xf8\xc7\xf3\xd1\xc8\xf1\xe6\x7f\x0e\x8c\x8d\x36\x6d\xc2\xa2\x37\xb8\x09\xdf\xa5\x04\x97\x43\xe3\x7f\xd3\xe0\xfd\x00\xd1\x56\x53\x93\x6c\xff\x4f\x5e\x89\x66\x6e\x21\xe6\x14\x9d\x57\x9c\xd5\x22\x99\xdc\xba\xa9\x2c\xfc\x16\xd3\x5d\x6f\x78\xa6\x17\x8f\xb8\xb3\x63\x98\x4c\x6e\x69\x84\x89\x1f\xea\x0d\x1b\x42\x93\xea\x45\x99\x81\xd2\x0e\x90\xcf\x36\x78\xc0\x4e\x06\x3a\xdf\x18\x9e\x9e\x51\xcf\x8d\xd5\xba\x0d\x31\x1a\xf3\x9b\xa3\x98\xcf\x5d\x32\xf5\xfd\xbc\xeb\x8a\x33\x42\xd9\x52\x38\xec\x79\xc3\x81\x2d\x34\x5c\x13\x15\xf4\xdd\x18\xd6\x29\x6f\x6f\xa4\x4b\x2f\xe1\x9a\x70\xee\xa1\x9f\xc4\x6e\x59\xe1\x90\x81\x4c\x85\xc5\xf5\x68\xed\xb3\x0b\xbd\x78\xde\x93\xb0\x76\x84\x9b\x2f\xe6\x62\x51\x3a\x7f\x1a\x8d\xf9\x60\xf9\x9a\xd4\xf3\xab\x49\x20\xfe\xba\x39\x97\x76\x2e\x5c\x7a\xb9\x4f\x01\xc3\x94\xa6\xac\x1d\x3b\x82\x42\x3b\xd8\x39\xab\x6b\xa7\xa3\x25\x1a\xc1\xf5\x66\xe4\xf3\x38\x12\x3d\xd1\xa9\x56\xe1\x8e\xee\x01\xde\xf7\xe1\xf6\x66\xfd\xe6\x18\xb5\xc7\x57\x6b\x5f\x0f\xdb\x92\x32\x04\xd1\x08\xb6\x4d\x53\x53\xa7\x61\xce\x7d\xb0\xac\xfc\x06\x5f\x54\xa6\x57\x54\xa6\xf3\x8a\xc3\x64\x7a\x45\xd5\x1b\xc8\x79\x19\xdd\x7b\x54\xa4\xb9\x61\xb4\x5a\x7b\xbd\x47\xe6\x50\xb8\x66\xe7\xcb\xe6\x0b\x39\xa5\x38\x37\xb9\xb5\xab\x58\x90\x9c\x27\x6f\x51\xa1\x11\x0e\xbd\xc0\x29\x4f\x7b\x10\x99\xa8\xfd\xda\xf7\xa4\x36\x18\xf7\xa5\x1d\x98\xa2\x16\x25\xa2\x90\x49\xde\x4a\xfc\x4f\x63\xe5\xab\xc6\xca\xa9\x54\x45\x89\x4d\xec\xb4\x72\x78\xeb\x60\x17\x84\x73\x38\xaf\x1c\xb1\x70\x58\x73\x97\x82\x1f\xf9\x66\x64\xd0\x7d\x12\x65\x9f\x76\x38\xe6\x67\x9a\xbb\x69\x6c\x5e\x3e\x44\x34\x0f\x64\x72\xd0\xc2\x05\xd8\xcd\xb6\x5c\xc8\x72\x61\xb0\xcd\xb7\x40\x0d\x0f\x50\x46\x1e\x3f\x2f\x25\xd7\xf3\xfa\x5e\x52\x06\x11\xde\xe1\x90\x22\xa5\x6d\xff\x97\xe6\xec\x52\xda\x96\x09\x2f\x85\x85\xf9\xa2\x74\xb2\x6a\x40\xb5\xb0\x1b\xbe\xe9\x50\x50\x98\x68\x04\xfc\x6b\x0a\x82\x6f\x2d\x7c\x1f\xd8\x18\x83\x54\xcf\x2b\xe1\xe4\x4c\x96\xd2\x2d\x07\x00\x5f\xed\xc9\xec\xeb\x06\xc4\x4f\x66\x24\x3b\xfe\x72\xfe\xf9\xcb\x86\x89\xf0\x3b\x88\xb7\x9c\x38\x17\x57\x08\x42\x05\x93\x34\x0b\x64\xcb\x1a\x57\x84\xb5\xb2\x50\x4c\x07\xde\xcc\xe8\x8f\x81\xbf\xfe\xce\xbb\x09\xfb\x7b\x2c\x30\x82\xed\x8b\x87\x49\x20\x14\xbd\x1f\xe6\xd6\x4a\xdf\x0f\xd0\x8c\x60\x32\xc5\xf0\xe1\x33\x2c\x47\xa3\x1e\x2b\x3c\x33\x6d\x5b\x10\x45\x96\x01\x96\xd8\xe9\x8f\x4c\x9c\x3b\x67\x54\x34\x5f\x6d\x0d\x06\x01\x44\xc9\x3c\x0c\x5d\xc6\xd4\xcd\xd2\xf4\x9e\xfe\xf0\x44\xff\x1e\xd2\x7d\xea\x6d\xb1\xac\xbf\x18\x10\xaf\x64\x21\x2f\xda\x92\xf0\x70\xfa\x72\x1f\x6e\x20\xcf\x47\xca\x44\xd5\xcc\x62\xfd\x4c\xc0\xda\x9a\x1d\x42\x65\xb5\x9e\x85\x0a\x1f\x8a\x93\x96\x3a\xff\x10\x5a\xac\x3f\x8a\x13\x5e\x3f\xd7\x4a\x36\xfa\xb3\x1a\xb4\x00\xd1\xa5\xe6\x4c\x50\xc5\x66\xf0\x93\x90\xc6\xc2\x0c\x4b\x7d\x33\xe0\xef\x37\xbb\xff\x0d\x00\x00\xff\xff\x20\xf0\xa9\x2e\x02\x1f\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 7938, mode: os.FileMode(420), modTime: time.Unix(1531102683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

