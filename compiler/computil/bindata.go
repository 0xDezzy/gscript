// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  compiler/templates/debugger.gs
//  compiler/templates/entrypoint.go.tmpl
//  compiler/templates/hard_reserved
//  compiler/templates/obfstring.go.tmpl
//  compiler/templates/preload.gs
//  compiler/templates/soft_reserved
//  compiler/templates/vm_file.go.tmpl

package computil

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"debugger.gs": &asset{
		name: "debugger.gs",
		data: "" +
			"\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49" +
			"\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff",
		size: 39,
		mode: 0644,
		time: time.Unix(1531448235, 296298138),
	},
	"entrypoint.go.tmpl": &asset{
		name: "entrypoint.go.tmpl",
		data: "" +
			"\xbc\x56\x5d\x6f\xdb\x36\x14\x7d\xd7\xaf\x38\x13\x5c\x40\x42\x6d\xb9\xeb\x63\x37\x3f\x24\x68\xda" +
			"\x19\x4d\x8b\xac\x4e\x3a\x0c\x45\x67\xd0\xd2\x95\xc2\x59\x21\xe5\x4b\x4a\xb2\x61\xf8\xbf\x0f\xd4" +
			"\x47\x17\x19\x5d\xb6\x15\x86\xfd\x62\xf1\xea\xf0\xdc\x73\x0e\x69\xd2\x85\x88\xd7\x22\x23\x3c\x08" +
			"\xa9\x3c\x4f\x3e\x14\x9a\x2d\x7c\xb3\x33\xb1\xc8\x73\xdf\xf3\xd2\x52\xc5\xcd\xcb\x20\xc4\xde\x03" +
			"\xf6\x7b\xc8\x14\xa3\x68\x6e\x6e\x58\x27\x65\x6c\xa5\x56\x97\xa5\xcc\x13\x4c\x0e\x07\x0f\x00\xa6" +
			"\x53\x64\x2c\x62\x4a\xcb\x3c\xdf\x81\xb6\xd2\xa2\xbe\x27\x05\xa6\x98\x64\x25\x55\x06\x23\x33\x25" +
			"\x72\x03\x7b\x2f\x2c\x6a\x5d\xe6\x09\x4a\x53\x0a\x07\x2f\x58\x2a\x0b\x63\x45\xbc\x86\x75\x2c\xa6" +
			"\xe1\x34\x32\x33\x78\x35\xc3\x83\x58\x53\x10\xdf\x0b\x05\x6d\xa2\x45\x43\x33\xc6\x8f\x61\x8f\x51" +
			"\x22\x8f\x3e\x68\x2b\xd3\x5d\xe0\x66\x8c\xd1\xf9\x88\x16\xf3\xb7\xbf\xde\xcd\x6f\x07\x85\xf9\xf5" +
			"\xf5\x60\x7c\xfb\xf1\xe2\x66\x50\xb8\xb8\xfc\x38\x9c\xb1\xb8\x7d\xf7\xe6\xfa\xa8\xf4\xfb\xa2\xed" +
			"\x9e\x69\xb8\xa8\xba\x94\xdc\x27\xd5\xfc\xf5\x19\x58\x62\x86\x9f\x27\x8d\x91\xaf\x35\x6d\xa2\xab" +
			"\xad\xb4\xc1\x8b\xb0\x2b\xb5\x01\x1e\x82\xd0\xeb\x93\x74\x86\x61\x4a\x26\x08\xb5\x43\x21\x94\x8c" +
			"\x0d\x04\x13\x4c\x2d\xf2\x5c\xd7\x94\xc0\x6a\x14\x4c\x15\x7d\x2b\xb7\x84\x52\xe2\x63\x61\x32\x05" +
			"\xbb\x30\x99\x62\x5d\x11\x07\xe1\x4f\x60\xfc\x30\x83\x92\xf9\x23\xc1\x4f\x88\x73\xbb\x60\x02\x52" +
			"\x09\x9a\x25\xaf\x04\xa3\xce\x60\x76\x2a\x8e\x7e\x13\xd2\xbe\x65\x5d\x16\x1d\x88\x85\xca\x08\xa3" +
			"\xe5\x18\xa3\x82\xa5\xeb\x3a\x8a\xee\x94\xdc\xdc\xb0\xd4\x2c\xad\x24\xd3\x72\x1c\x61\xab\x07\x07" +
			"\x0d\xa4\x4a\x68\x8b\x51\xb4\xd0\x6c\x29\xf9\xf4\xde\x34\x2c\x61\x3b\xa5\xce\xa2\x8b\x24\x09\x9a" +
			"\xd5\x3f\x4e\xff\xdf\x77\xe9\x29\xd2\xfd\x87\x7c\xff\x6b\xc2\xdf\xc8\xb8\x4f\xb9\xcf\x79\x90\xf4" +
			"\xa3\x15\xad\xb3\xe8\xb5\x56\xd4\x61\xc4\x7e\xef\x22\x8b\xe6\xaf\x71\x38\xb8\xbe\x1f\xa8\x7e\x5c" +
			"\xea\x60\x32\x3d\x42\xce\x86\x8a\x98\x6c\xc9\xca\xfb\x5b\x05\x71\xe3\x62\x30\x29\xea\x06\x6f\x4a" +
			"\xd5\xa4\xfa\x8e\x76\xf0\xdb\x63\x63\x29\x8c\x21\x6b\xfc\x41\x47\xc7\x71\xe4\x7c\xc8\x77\x15\x5d" +
			"\xeb\x2c\x23\x8e\xae\x98\x35\xa7\x81\xdf\x7c\xa3\xa5\x74\xa7\x45\xcb\xda\xfc\x9c\x3e\xbd\xc7\x33" +
			"\xf3\x0a\xcf\x2a\x7f\x0c\xff\x31\x8b\x3f\x76\x8d\xc2\xa7\x8c\xfc\x0f\x1f\xc6\x0a\x95\x08\x4e\x96" +
			"\xb9\x5c\xb1\xe0\xdd\x89\x1c\xa9\x3f\x29\x6e\x1c\xf5\xfc\xe8\xf8\xcf\xe2\xad\x60\xca\xb5\x48\x4e" +
			"\xe3\xc5\x09\xee\x08\x9d\xa1\x73\x2c\x8a\x12\x56\x56\x74\xea\xcd\xd5\xb2\x9e\x6d\x63\xc5\x2c\x0b" +
			"\x7b\x6a\x0f\x2d\xeb\x59\x36\x11\x6d\x29\x2e\xed\x89\x56\xa1\x25\x73\x0e\xbe\x4f\x76\x7f\x15\x35" +
			"\xe7\xe3\xa4\xbf\x13\xdc\x0d\x74\xfc\xe2\xd0\xfd\x8f\xc9\x82\x35\xb8\x54\x34\xc6\x0a\x9f\xbf\xb8" +
			"\xa7\x10\xc6\xb2\x93\xe0\x94\xbb\x04\x9b\x3b\xaa\xbd\x89\x56\x9d\x9d\xd5\x67\xf9\x05\x7f\xcc\xb0" +
			"\x6e\x46\x6b\xf7\xe8\x4a\x5e\xab\x62\xe3\x26\xb4\x24\xc1\x8b\xed\xcb\x97\xae\xb5\x19\x63\xd9\x95" +
			"\x63\xad\xaa\xe8\x4e\x6d\x4a\x6d\x29\xd8\xe0\x79\x0f\x5d\x85\x78\x8e\x8d\x03\xb7\xae\x60\x9c\xca" +
			"\xe9\x14\x93\xc9\x04\xb7\x42\x65\x39\x25\xf8\x45\x48\x36\xb8\xa4\x5c\xd7\xde\x74\xea\x79\xde\x5f" +
			"\x01\x00\x00\xff\xff",
		size: 2478,
		mode: 0644,
		time: time.Unix(1546239298, 214120785),
	},
	"hard_reserved": &asset{
		name: "hard_reserved",
		data: "" +
			"\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08" +
			"\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1" +
			"\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84" +
			"\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff",
		size: 130,
		mode: 0644,
		time: time.Unix(1531448235, 297205615),
	},
	"obfstring.go.tmpl": &asset{
		name: "obfstring.go.tmpl",
		data: "" +
			"\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30" +
			"\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3" +
			"\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf" +
			"\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe" +
			"\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a" +
			"\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d" +
			"\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff" +
			"\xff",
		size: 240,
		mode: 0644,
		time: time.Unix(1531448235, 297579907),
	},
	"preload.gs": &asset{
		name: "preload.gs",
		data: "" +
			"\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d" +
			"\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5" +
			"\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56" +
			"\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8" +
			"\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56" +
			"\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39" +
			"\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06" +
			"\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a" +
			"\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8" +
			"\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29" +
			"\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84" +
			"\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb" +
			"\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a" +
			"\x8a\xcf\x00\x00\x00\xff\xff",
		size: 685,
		mode: 0644,
		time: time.Unix(1531448235, 297781319),
	},
	"soft_reserved": &asset{
		name: "soft_reserved",
		data: "" +
			"\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f" +
			"\x29\xc9\x07\x04\x00\x00\xff\xff",
		size: 26,
		mode: 0644,
		time: time.Unix(1532895396, 507410995),
	},
	"vm_file.go.tmpl": &asset{
		name: "vm_file.go.tmpl",
		data: "" +
			"\xec\x5a\xff\x4f\x23\x39\xb2\xff\x99\xfc\x15\xf5\xfa\xc1\x53\x67\xd4\x74\x66\x56\x4f\xef\x49\xdc" +
			"\x71\x12\x90\xec\x2c\x3b\x0c\x8c\x08\xcb\xea\xc4\x22\xc6\xe9\xae\x34\x1e\x3a\xee\x5e\xdb\x09\x64" +
			"\x50\xfe\xf7\x53\xd9\xee\xaf\xe9\x40\x66\x67\x75\xa7\x93\xee\x87\xd1\x04\xbb\x5c\xdf\xeb\xe3\xb2" +
			"\xdd\x39\x8b\x1e\x58\x82\x30\x63\x5c\xf4\x7a\x7c\x96\x67\x52\x83\xdf\x03\xf0\x26\x4b\x8d\xca\xeb" +
			"\xed\x78\x51\x36\xcb\x25\x2a\x35\x48\xbe\xf2\xdc\xa3\xa9\x48\x2e\x73\x9d\x0d\x18\xcd\x57\x7f\x46" +
			"\x3c\xbf\x47\x49\x2b\x50\x44\x59\xcc\x45\x32\x98\x30\x85\xff\xf7\xbf\x86\x68\x3a\xd3\x34\xc5\x33" +
			"\xaf\x47\x7f\x26\x5c\xdf\xcf\x27\x61\x94\xcd\x06\x09\x8a\xb7\x11\x8f\x71\x90\xa8\x48\xf2\x5c\x0f" +
			"\x50\x24\x5c\xa0\xd7\x22\x93\xd9\x04\xa5\x7e\x90\x7c\x86\x62\x90\x69\x9d\x11\xc1\xf3\x33\xf0\x29" +
			"\xec\x86\x3f\x31\x35\xc4\xc9\x3c\x49\xb8\x48\x46\x82\x4d\x52\x8c\x61\x7f\xb5\xea\x01\xbc\x22\x2b" +
			"\x36\xab\x48\x6d\x62\xb6\x0f\x28\x62\x30\xeb\x6a\x9c\xcf\xb2\x6f\xe7\x9b\x66\xc4\x75\xa0\x34\x13" +
			"\x31\x93\x71\x8b\x7d\x0f\x60\x30\x80\x53\xe3\x6d\x2e\x12\x98\x31\xf5\xa0\xac\x50\xc9\x44\x82\xb0" +
			"\xcb\xf3\x00\x76\x67\x1c\x0e\x0e\x61\x37\x3c\xe3\xe2\x01\x65\xf8\x91\xa9\x07\x8c\xed\x2a\x05\x4e" +
			"\x8b\xe7\x67\xa2\x0b\xcf\xf1\xf1\x28\xe5\x8c\x86\xc1\xa3\x31\x9e\xc3\x6a\xe5\x5c\xe4\xa4\xf6\x7b" +
			"\xbd\x05\x93\x26\xba\xa4\x8b\x93\x74\x17\xc0\x2e\xce\x26\x18\x5b\x59\x23\xfa\x59\x72\x1f\x0c\x8c" +
			"\x00\x33\x1f\x9e\x0e\x89\xfb\x7d\x96\xc6\x0a\xf4\x3d\x42\xcc\x34\x83\x69\x26\xc1\x4c\xc7\x18\xc3" +
			"\x94\xa7\x58\x5b\x70\x21\x79\x72\xce\x66\x58\xd7\xb5\xce\xea\xd0\xaa\x6a\x87\x86\xc4\x8d\x54\x6e" +
			"\xba\xaa\xdf\xeb\x39\x25\xdc\xa2\x47\xc9\x72\x2b\x3f\x41\x81\x8a\x2b\xb8\xfe\x68\xb4\x30\x34\x85" +
			"\x38\xbd\xcc\xb1\xbe\x4a\x69\x39\x8f\x34\x3c\xf7\x00\x46\xf0\xc6\x66\x58\x38\x32\xff\xf5\x00\x3e" +
			"\xc0\xcd\x2d\xe5\xfb\x96\x19\x35\x84\x37\x45\xde\x84\x43\xf7\xa3\xa9\xf5\xca\x68\x7d\x8e\x8f\x35" +
			"\x15\x22\x89\x4c\x63\x53\x75\x39\x17\x9a\xcf\xd0\xe8\x6f\x33\xa7\x69\xc6\x74\x2e\xa2\x26\x1b\xbf" +
			"\x0f\x6f\x6a\x4c\xc9\x20\x8d\x14\x3a\x67\xd3\x39\x3e\xfa\x5e\x9d\x87\x17\x58\x2f\xdb\x05\x5e\x60" +
			"\x05\xbc\x47\x7d\xc5\x67\x98\xcd\x35\xac\x56\x01\x78\xa3\x27\x8c\xe6\x1a\xbd\xfe\x56\xa9\xcf\x52" +
			"\x92\x58\x24\x37\xc9\x1c\xbb\xdf\x67\x26\xef\x7d\xc1\xd3\x00\x3c\x57\xc8\x85\x02\x95\x42\x53\x96" +
			"\x2a\x74\xff\xf5\x0d\x47\x8d\xe1\x18\xb5\x5b\xcd\xd2\xfe\x0b\xe5\xb8\x16\x16\xa7\x54\x6c\xdc\x50" +
			"\x06\x86\x1c\xa1\xb1\xdf\xa8\x00\x80\x8c\x68\xfe\xa7\xf2\xc7\xb3\x59\x3a\x3a\x00\x8d\x41\x91\xa3" +
			"\xaf\xc6\x1f\x60\x78\x00\x71\xb9\xa0\xa6\x26\xfd\x93\xa8\xe7\x52\x40\xe6\x92\xc0\xc8\xfa\x71\x2e" +
			"\x22\xcd\x33\xf1\x01\x97\xe0\x59\x94\xbd\x63\x4a\xa1\x56\x1e\x45\x91\xbb\x9a\xb6\x43\xc0\x85\xce" +
			"\xbe\x3d\x4d\xfc\xac\x9e\x19\xfd\x6d\x04\xfb\x7d\x40\x29\xa9\x76\x1a\xe0\x83\x3c\xee\x04\x85\xfd" +
			"\x16\x2a\xf0\xd8\x56\xf1\xe6\x8a\xcf\xc2\x51\xe8\x00\xeb\xc6\xab\xd6\x78\xb7\x70\x08\xa4\xb4\xdf" +
			"\x77\x95\x07\xcf\xce\xb3\x83\x01\xfc\x22\x68\x57\x42\x69\x4a\x3d\xa7\xff\xb9\xbe\x87\x28\x13\x4a" +
			"\x43\x8c\x51\xca\x24\xc6\xc0\x26\xd9\x02\xdd\x1a\xe7\xf1\xca\xf8\xa1\xdf\x82\x1a\x9b\x64\xab\x2a" +
			"\x19\xac\x29\x6e\xa1\xe0\xe9\xc6\x60\xe5\x12\xd3\x8c\xc5\x8d\x30\x51\x68\x8a\x90\xb8\x79\x48\xf9" +
			"\x44\x32\xb9\xfc\xde\x10\xd5\xc4\x35\x82\x53\x24\x55\x38\x0a\xcf\x32\x16\x8f\x8d\x04\xbf\x20\x0f" +
			"\x13\xe5\x05\x4d\x67\xdf\xdd\x7d\xba\x1c\x9d\x5d\x1c\x0d\xbd\x5b\xbf\xdf\x7f\x2d\x17\xad\xc6\xc6" +
			"\x48\xe2\x67\x4d\xec\x30\x63\x3d\x35\xaf\x3f\x7e\x63\xf6\x55\xa2\xb6\x31\xb0\x05\x1c\x2d\x13\x47" +
			"\xe7\x57\x97\x7f\xff\x74\x71\x7a\x7e\xf5\xb2\x95\xe8\xd0\x8d\x2c\x70\xbf\xd7\xb6\x10\xa6\xcd\x08" +
			"\x0a\x2d\x97\x90\x67\x5c\x68\xf0\x63\x9c\x72\x81\x31\x4c\x96\xb0\x40\xa9\x78\x26\x02\x98\xab\x39" +
			"\x4b\xd3\x25\x0c\x31\x4f\xb3\x25\x49\xdd\xd2\xfe\x9a\x12\xed\xba\x7b\x15\x71\xb2\x70\x18\x9e\x8a" +
			"\x2f\x18\x69\x43\x72\x92\x09\x95\xa5\xe8\xaf\xc1\x24\xf9\xc7\xae\x3d\x32\x45\x6e\x28\xee\x02\x92" +
			"\x46\x95\x4c\xd3\x27\x2c\x4d\x0b\xbd\x7e\xe5\xfa\xde\x6d\x03\xbe\x67\x0d\x32\x3b\x00\x9f\x9a\x15" +
			"\xff\x75\x48\xa5\xe1\x4a\x33\x67\x82\x47\x3e\x4a\xd9\x6f\xe2\x1c\x4a\xf9\x5a\x76\x09\xa6\xf9\xc2" +
			"\x7a\x9f\x1b\x23\x5c\xff\xb0\x14\x6c\xc6\x23\xe3\xcd\x94\x5a\x9c\x18\x2c\xa5\x81\x06\x62\xa2\xba" +
			"\xf2\xed\x4f\x42\xc1\x4a\xa9\x46\x34\xa8\x43\x22\xdb\xcd\x48\x0f\xcc\x6f\xe3\x06\xd7\xb4\xed\xef" +
			"\xc3\xf1\xe8\xfd\xe9\x39\x9c\x1f\x5d\x9d\x5e\x8f\xe0\xd3\xd1\xc9\x87\xa3\xf7\x23\x38\xfd\xf8\xe9" +
			"\xe2\xf2\x6a\xdc\xc0\x51\xa1\x02\xd8\xcd\x1f\x12\x0b\xa2\xef\xb3\x4f\xb6\xd9\x3e\x5e\x92\xc6\x2a" +
			"\x67\x11\xd6\x21\xb5\x6a\x07\x49\xe7\xfc\x21\x71\x99\xfe\x89\xe9\x7b\x72\xdd\x5c\xc4\x28\x41\x94" +
			"\x4b\x0b\x2a\xdb\x16\x16\x05\xea\x67\x92\x27\x5c\x18\xa7\x3e\x32\x65\xa8\x84\x2a\x21\xf0\x4e\xe4" +
			"\xdd\xeb\x68\x5b\x2c\x5a\x08\xe3\x19\xa7\x6c\x81\xcb\x95\x2e\x07\x76\x3b\x5f\x53\xd0\x0b\x1c\x29" +
			"\xb1\xac\x11\x95\xd5\xeb\xa6\xc7\xcb\xd9\x24\x4b\xaf\x28\x49\x0f\x60\xc6\xf2\x1b\xa5\x25\x17\xc9" +
			"\xed\x9b\x86\x78\x0a\xd9\xf3\xaa\x58\x73\xb5\xcc\x51\xbd\x40\x4d\xf3\x15\x35\x95\x87\x7e\x89\xdc" +
			"\x10\x54\xf4\xd7\x4c\xbe\x44\x7d\xcd\x64\x41\x5b\xf6\xb1\x2e\xc2\x53\x1e\x3f\x05\xb0\x3b\x35\x11" +
			"\x26\x63\xc7\xf3\x28\x42\xa5\xa6\xf3\x34\x5d\x9a\xb6\x3d\x26\x43\x54\xad\x75\x18\x0c\xe0\x28\xa6" +
			"\xd3\x51\x99\xe5\x16\x6d\x50\x9a\xc4\x6e\x55\x00\xb4\xbc\x18\xd2\xdf\xd3\x32\xa1\x29\x72\x3a\x03" +
			"\x65\x5c\x0a\x9a\x7c\xea\xc4\xdc\x89\x69\x67\xa0\xcd\x7a\x1e\x3f\x75\xc6\xdc\x38\xdd\x31\x68\xc4" +
			"\xb1\x21\xb1\x8c\x24\xc0\x98\x27\x82\xe9\xb9\xac\xe8\xca\x91\x26\x21\x2d\x3f\x80\x2c\xac\x75\x5e" +
			"\x86\xdc\xfc\x2c\xc8\x56\xa5\xee\xdd\x49\x1a\xd6\x52\xe7\xa6\x43\x2f\xea\x2a\xb6\xb0\xbb\x88\x61" +
			"\xd5\x07\xd4\x43\x4a\xe7\x21\x5d\xc6\xf3\x7d\x66\x52\xaf\x19\xbf\xa1\x69\x42\x28\x84\x0c\xcc\x41" +
			"\x83\x99\xa3\x57\x71\x08\x69\x87\x4b\x87\xf5\x96\x88\xcc\xd3\x1b\x55\xd4\x21\x61\x54\x57\x6c\x4c" +
			"\x8a\x77\xc5\x46\xaf\x55\x18\xc0\x8f\x2c\xd2\x99\x5c\xae\x7b\xbc\xe0\x5f\x23\xe5\x98\xc6\x2f\xa5" +
			"\xbf\x21\x78\xde\x3e\x48\xc6\x61\x37\x2d\xd5\x6c\x68\x5e\xb7\xfb\xe5\xd8\x44\xb6\xdc\xa2\x5a\x78" +
			"\x6c\xad\xd7\xe2\x73\x27\xa2\x8d\x52\xa2\x8d\xde\xb5\x88\xd0\xe5\xde\xa8\xc3\xbd\xd7\x2c\x9d\xe3" +
			"\x41\x37\x02\x87\x8d\x45\x5b\x7b\xcd\xda\x61\xdd\x16\xd9\x3c\x75\x4e\x7b\xdd\x9c\x97\x9d\xb6\xb0" +
			"\x4e\x5b\xb0\xd2\x6b\xd7\x2c\xe5\x31\x81\x5e\xc3\x6d\x8b\x8d\x72\x16\x6c\xa3\xdf\x08\x1b\xbb\xbc" +
			"\xb6\x60\x1d\x6e\xab\xa1\xc5\x67\x47\x54\x87\x8b\xcf\xdf\xe0\xe0\x8a\xff\xd6\x1e\x26\x83\x6f\xda" +
			"\xca\x59\x17\x6f\x61\x7a\xdb\xc7\xe5\xae\x6d\x1a\x1a\xc2\x02\x87\xdc\xc5\x8d\x5a\x57\xa7\x4c\x6b" +
			"\x6c\x43\x51\x35\xb2\x8d\xdd\xd6\x36\xbc\x66\xbf\xf6\x82\x8d\xa6\xd8\xad\xbc\xab\x49\x6b\x74\x65" +
			"\xd6\x2b\x85\xa2\xfb\xfb\xbd\xf6\xf1\xc7\xb6\x33\xa3\xf3\xe1\xe6\x66\x66\xfb\x26\xaf\xb8\x0d\xb8" +
			"\x73\x27\xa1\x6d\xda\xbd\x62\x4d\x75\x7a\xfa\x27\x34\x7e\x5d\x8a\x6e\xd9\x02\x02\x08\x9d\x53\x11" +
			"\xdc\xb4\x30\xb2\x68\x96\x56\xdf\xdd\x25\xba\xce\xbf\xbc\x4f\xe1\x13\xd5\xdd\x24\x16\x14\x70\xe6" +
			"\x7c\xe7\x74\x38\xa8\x5a\xbe\x7f\x45\xc7\xe7\x72\xf7\x0f\xf7\x7a\x2e\x61\xff\xd3\x62\xfd\x7b\xb7" +
			"\x58\x5d\x5b\x12\xd5\xce\x21\xb0\x3c\x47\x11\xfb\x42\xe7\x2f\x03\x5c\x13\x6b\x1b\x48\xbb\x06\x1b" +
			"\xdd\x58\xdb\x46\xda\x5a\x4d\xd1\x2a\x52\x61\xd3\x61\xb7\x81\xa2\x9b\x6f\x8a\x8c\x6b\x2f\x86\x1f" +
			"\xdc\xb4\xc3\x39\x34\x0f\x22\xe4\xb0\x07\xb4\x17\x42\xed\xab\x06\x73\x36\xb7\xb0\xd5\xe0\xd3\xbc" +
			"\x0e\x5b\xbb\xd6\xba\x18\x5e\x0e\x3b\xc4\x5f\x0e\x21\xca\x84\x66\xfc\x65\x05\x50\x98\x61\x8c\x0b" +
			"\xf9\x84\x73\x2d\x3e\x87\x4e\xfe\x73\x6f\xa7\xf6\x44\x60\x2b\x70\x62\x01\x6a\x58\x72\xff\x80\xcb" +
			"\x23\x29\xd9\xd2\xc4\x68\xc7\x2c\xe0\x53\x98\x65\xb1\x59\x01\xff\xef\xc6\x4d\x28\x73\xc9\x85\x9e" +
			"\x82\xf7\x9b\xf8\xcd\xdc\xfd\x38\xfa\x22\xc2\xf4\x57\x49\xf3\xf6\x69\xef\x29\x00\x8f\x24\x9a\xb9" +
			"\xea\xfe\xb6\x6d\xfb\x10\x78\x69\x72\xd6\x2c\xf8\xc6\xbb\x84\xbb\x57\x7d\x71\xff\xa8\xdf\x1e\x2a" +
			"\xb0\x38\xd5\x08\xc7\xa4\xbc\x46\x61\xa8\xc2\x73\x7c\x3c\x31\x0f\x5e\x7e\x2b\x82\xaf\xa4\x94\xf3" +
			"\x6f\x71\x59\x1c\x4f\xde\x11\x47\x81\x8f\xbe\x79\x70\x0b\x8f\xe7\xd3\x29\x9a\x3b\x96\x78\xf2\x43" +
			"\xf7\xd4\x8e\x92\xa6\x03\xb6\xa3\xe7\xf8\x78\x89\x2c\x46\xe9\x5b\xd6\xbe\x32\x2a\x50\x70\xf9\x02" +
			"\x6e\x48\xd7\xe3\x34\x8b\x1e\xc6\xfc\x2b\x16\x8f\x1c\x4a\x4b\x64\x33\xe2\x61\x1f\xed\x88\xc9\xc5" +
			"\x8f\xc7\xfe\x24\x00\xbe\xb8\x39\xb8\xed\xf7\x76\x8c\x47\xd1\x98\x6b\x5f\xf1\x88\x66\x68\x07\x7d" +
			"\x37\x32\xd6\xf1\xc8\x3d\xf5\x05\xa0\x64\x44\x72\x51\x44\x56\x1d\x03\x7d\x8e\xfd\xd8\xc8\xb3\xe3" +
			"\xcf\xe3\x03\x27\x3f\x80\xcb\x03\x70\x72\x56\xd6\x6b\xd5\x55\x15\xcf\xc2\x93\x2c\x5f\xfa\xf1\xe4" +
			"\x5d\x50\x31\xed\xff\x65\x3b\xc7\xee\x24\x5f\x65\xc9\x2a\xf9\xca\xf3\x9a\x9b\xe2\xc9\xbb\x7e\x6f" +
			"\xa7\x1d\xa2\x9d\x9d\x36\x9f\x9d\x55\x6f\xc7\xe9\x53\x57\xe7\x87\x00\x92\xaf\x72\x6b\x0e\xc9\x57" +
			"\x19\x9e\xa4\x99\x42\xbf\xdf\x2b\x08\xe2\xc9\x0f\xe1\x31\x05\xcf\x2f\xae\x2c\xab\x13\xe5\xb0\xd6" +
			"\x25\xd9\xdd\x0d\x4a\xfc\xfd\xd5\xde\x87\xab\x5e\xf3\xb4\x3a\x6d\xbc\x12\x6e\xda\x1e\x57\xed\xe2" +
			"\xa9\xed\x0e\x45\x19\x99\xb6\x4c\x36\x8b\xc8\x92\x95\x97\x57\x9b\x77\xc9\x17\xda\xb0\xb6\x3c\x9f" +
			"\xec\x83\x4c\xeb\xac\x64\x70\xc2\xd2\xb4\x6f\x87\x4c\xf3\x6f\x82\x4b\x1b\xb9\x4c\xe6\x33\x14\x1a" +
			"\xc6\x4c\x70\xbd\x84\x93\x7b\x8c\xcc\x5b\x29\x9f\x42\x8a\xc2\x70\x0a\x0b\xa2\x33\xae\x74\x1f\xfe" +
			"\x46\x42\x53\x14\x56\xef\x23\x99\xa8\xe2\xa5\xac\x71\xcd\x7c\xc9\xb8\x42\xdf\x63\x6e\xad\x17\x80" +
			"\xa7\xb3\x0c\x66\x4c\x2c\xa1\x18\x54\x90\x13\x76\xc4\xd4\x01\x94\x5e\xd9\x53\xc5\x93\x56\x73\x6f" +
			"\x2c\x2e\x46\x37\x6b\xf6\xd7\xef\xd2\x6c\x8a\x8f\xdf\xa3\x58\xa3\xe9\x64\x16\xd3\xed\x99\xb0\x54" +
			"\xa6\xd6\x68\xda\x6e\xa5\xca\xbd\x32\x0e\xff\x4d\xfc\x59\xed\x26\x85\x90\x86\xd5\x06\x4d\xc8\x59" +
			"\x38\x7a\xd2\x63\x9e\x14\x44\xb2\x4e\x51\x56\x66\xc3\x45\x7e\x8d\xa2\x1f\x8e\x9e\x68\xcb\xf6\xb7" +
			"\x38\xea\xd4\x3c\xf6\x45\xa1\x59\x46\x6e\x88\xb2\x79\x1a\x83\xc8\x34\xd8\xb1\xd2\x75\xb0\x17\x43" +
			"\x36\x6d\x79\xad\xa1\xdd\x06\x17\x16\xdd\x93\x7a\xe4\x3a\xba\x87\x05\x59\xd0\xb0\x2b\xf4\xf5\x32" +
			"\xc7\xbe\x53\xd0\xde\xeb\xe3\xef\x35\x67\x78\x37\xb7\xa6\x0d\x9d\xb2\x08\x9f\x57\x5e\x75\x25\x14" +
			"\x31\x85\x70\x73\x6b\x77\x9d\x83\xb2\xa5\xe3\x53\x65\x4f\x1b\xb5\x55\xcf\xab\x72\x9a\xca\xf3\x2e" +
			"\x80\x27\xab\x08\xc5\x75\x01\x55\x6f\x69\x97\x97\x0d\x17\x9f\xaa\x00\x9e\xfa\xe5\x74\xc5\xa6\x11" +
			"\xbc\x43\x5a\x55\xef\xde\xaa\xa3\x2f\x9f\x92\x29\xe7\x88\xb1\xfa\xc8\xf2\x9c\xd0\xaa\x69\x80\x0d" +
			"\x3c\xcd\x61\x7c\xb5\xcc\xb1\xf8\x22\xe1\x60\x93\xa8\x56\xa6\xf8\x8b\x7e\x87\xe4\x1a\xeb\x92\xb2" +
			"\xe0\xd8\xe2\xd7\x8a\x46\x6b\x51\xbf\x69\xc8\xf1\x9c\xa7\xfa\x54\x5c\x49\x26\x54\xca\x28\xd0\x97" +
			"\xf8\xfb\x9c\xcb\xea\x45\xb9\x21\xdb\x91\xff\x3c\x26\xcb\xbe\xdb\xa8\x18\xa7\x6c\x9e\xea\x83\x8d" +
			"\xa9\x6c\xee\x15\xa3\x4c\xb8\x77\x27\xca\xe8\x32\x81\xcd\xdc\x8c\xab\x19\xa3\x3c\xdc\xa7\x04\xc7" +
			"\x88\x1a\xbb\x3d\x15\x40\x92\x69\xd8\xbb\x2a\x80\xa0\xa6\x88\x17\xc0\x62\xed\x1d\x74\xd5\xc2\x05" +
			"\x49\x66\x04\xb0\x2b\x4b\x60\xb8\x74\xad\xed\x0b\xd8\x60\x49\x2c\x32\xc8\x16\x32\xc8\xda\xa0\x71" +
			"\x8d\x6c\x20\x43\xe3\x88\x60\xa6\x51\x9f\xa1\x20\xe9\x25\x4e\x16\x1a\xd4\x3e\x04\x48\x74\x49\xf9" +
			"\xb6\xf6\xad\x0a\x6d\x22\x66\x23\x6b\x1d\xf1\xca\xaf\x4f\xa6\xe1\x7b\x14\x28\x99\x46\xcb\x74\x6c" +
			"\x0a\x0e\x3c\xe9\x55\xb1\xab\x6f\x76\xeb\x17\x4f\x0d\x58\xf0\x9b\x3c\x8f\x64\x52\x30\x64\x5e\x2b" +
			"\xe1\x08\x07\x9c\xc6\xef\xa0\x7e\x52\x1d\x73\x91\xa4\x58\x64\x00\x35\xf2\xf8\xa4\x61\x1f\x98\xd6" +
			"\x38\xcb\x35\x01\xbc\x9b\xd3\xf7\xcc\xfc\xe9\x2e\x92\x4c\xd6\x5c\xb3\xb4\x89\xa6\x17\xb4\x83\x5e" +
			"\x65\x66\x0f\xf5\xe5\xdb\xa2\xde\xbb\x11\xb4\x2b\xf1\xec\x88\x45\xd0\x22\xfb\x60\xca\x78\x8a\xb1" +
			"\x01\x1c\xb7\xe2\x2d\x18\xb0\x3b\xdc\xbb\xea\xc3\x3e\xec\x2d\xbc\x00\xe4\x5b\xa3\x4a\xbf\x75\xd4" +
			"\x74\x0b\xac\xb2\x65\x29\xa4\x0a\x1b\x6e\xb8\xba\xe7\xaa\xc2\xe4\x7b\xa6\x60\x36\x4f\x35\xcf\x4b" +
			"\xd7\x28\xd8\x77\xd7\x49\xe4\x60\x73\xe2\x63\xf0\xf3\x18\x98\x39\x82\x98\xd6\xbe\xd3\x93\x51\x36" +
			"\xcb\x99\xe6\x13\x9e\x72\xbd\x74\xf2\xbe\xa8\x8b\xc9\x97\x0e\xbf\x5d\x4c\x88\xbf\xff\xf9\xe6\xf6" +
			"\xf3\x1f\x70\x9c\xfd\x22\xa0\xb9\xf7\xd8\x8f\x7e\x2a\x5b\x98\x52\x3c\x11\xa6\x8a\xed\x27\x49\x74" +
			"\x8c\x77\xfe\x6b\xf8\xce\xfd\x68\x56\x66\x00\xbb\x77\x1b\x0b\xd3\x39\xd2\x15\xa3\x6d\xa2\xd6\x4a" +
			"\xb2\xba\x81\x34\x3e\x08\xc7\xe8\x1e\xd9\x1d\x11\x85\xb1\xf6\x67\xbf\xb6\x15\x75\xfb\xe1\x3b\x52" +
			"\x68\x2f\x5e\xcf\xa1\x9a\xec\xa6\x26\x0d\xf7\x54\xc9\xd5\x44\xd5\xba\x03\x8a\x33\x37\x15\x66\x0c" +
			"\x99\x89\x6c\x33\x23\xad\x07\x6c\xa5\xf4\xd7\x2f\x2c\x5a\x59\xda\x99\xa3\xa2\x28\x4e\x15\x98\x34" +
			"\x32\x52\x4b\x0a\x26\xe2\x42\xd6\x5c\xb8\x6f\x09\xc2\x3a\x16\xfd\xa9\x38\x53\xc4\x81\x12\xf9\x97" +
			"\x42\x5c\x65\x5d\xcd\xb6\x55\xaf\x57\x83\xff\x6f\x7e\xaf\xae\x16\x68\xb1\xf1\xb1\x6c\xed\xa8\x51" +
			"\xbe\x6c\xb9\x4f\x78\x14\x30\x01\xcc\x9c\x55\xf8\x24\x2d\x21\xdb\xec\x6d\x2e\x6e\x99\xdc\xfc\xa6" +
			"\xb6\xed\x89\xa3\x10\xbb\xed\x91\x63\x61\xbf\x6d\xa3\x53\xf7\xe6\xd7\x07\x23\xbd\xdf\xdb\x02\x81" +
			"\x17\xf6\x5b\xb6\x17\x2e\x04\xfe\x14\xe8\x5d\x38\x25\x5a\xdf\x66\x38\xcc\xad\xe2\xed\xc2\x57\xfc" +
			"\xa4\x9c\x66\x04\x9a\x31\xfc\xc4\xb8\x54\x30\xc1\x34\x7b\xec\x99\x0b\xec\xfd\x7f\x04\x00\x00\xff" +
			"\xff",
		size: 11291,
		mode: 0644,
		time: time.Unix(1534030034, 384435459),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"debugger.gs":        bintree{},
	"entrypoint.go.tmpl": bintree{},
	"hard_reserved":      bintree{},
	"obfstring.go.tmpl":  bintree{},
	"preload.gs":         bintree{},
	"soft_reserved":      bintree{},
	"vm_file.go.tmpl":    bintree{},
}
