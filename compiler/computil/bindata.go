// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531104485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531283914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x29\x09\x08\x00\x00\xff\xff\x6d\x3e\x4c\x6b\x6a\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 106, mode: os.FileMode(420), modTime: time.Unix(1531177142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531098832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531270750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0a\x80\x50\x0c\x03\xd0\x3d\x97\xc9\x51\x74\xf9\xe0\xea\x50\xaa\xa8\xe4\xd3\x06\xcf\xff\x1f\x2f\x7d\x41\x70\x74\x54\x13\x2c\xc9\x04\x67\xdd\xff\xe9\x20\x52\xca\x37\x90\x9a\x4f\x62\xec\x07\x64\x0b\x9b\xad\x15\x00\x00\xff\xff\xe0\xe3\x66\x7a\x3a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 58, mode: os.FileMode(420), modTime: time.Unix(1531122400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\x1b\xb9\x11\x7f\xb6\x3e\xc5\x74\x6b\x17\xbb\xc1\x7a\xed\x5c\x8b\x16\x70\xeb\x02\x8e\xa5\xcb\xb9\xf1\xd9\x81\xa5\xcb\xa1\xf0\x05\x3e\x6a\x77\xb4\x62\xbc\x22\xb7\x24\x65\x5b\x31\xf4\xdd\x8b\x21\xb9\x7f\x2d\xc7\x4a\x73\xb8\xa7\x3e\x18\x96\xc8\xe1\xcc\x6f\xfe\x0f\xa9\x92\xa5\xb7\x2c\x47\x58\x30\x2e\x06\x03\xbe\x28\xa5\x32\x10\x0e\x00\x82\xe9\xca\xa0\x0e\x06\x3b\x41\x2a\x17\xa5\x42\xad\x0f\xf2\xcf\xbc\x0c\x68\x2b\x55\xab\xd2\xc8\x03\x46\xfb\xcd\xd7\x94\x97\x73\x54\x74\x02\x45\x2a\x33\x2e\xf2\x83\x29\xd3\xf8\xd7\xbf\x58\xa2\xd9\xc2\xd0\x16\x97\xc1\x80\xbe\xe6\xdc\xcc\x97\xd3\x24\x95\x8b\x83\x1c\xc5\x61\xca\x33\x3c\xc8\x75\xaa\x78\x69\x0e\x50\xe4\x5c\x60\xd0\x23\x53\x72\x8a\xca\xdc\x2a\xbe\x40\x71\x20\x8d\x91\x44\xf0\xf8\x08\x7c\x06\xbb\xc9\x0f\x4c\x0f\x71\xba\xcc\x73\x2e\xf2\x91\x60\xd3\x02\x33\xd8\x5f\xaf\x5f\x92\x94\xd9\x33\x04\x9a\x58\xed\x03\x8a\x0c\xec\xa9\x16\xdf\x73\xf9\xb5\x5c\x0b\x49\x3c\x0f\xb4\x61\x22\x63\x2a\xeb\x31\x77\xdc\x15\x13\x39\xc2\xae\xd0\x31\xec\x96\xb7\x39\x1c\x1d\xc3\x6e\xf2\x56\xbe\x77\xee\x78\xb3\xba\x60\x0b\xd4\x25\x4b\xd1\xe1\x39\x38\x80\x33\xeb\x1b\x2e\x72\xc8\xb0\x44\x91\xa1\x48\x57\x50\xb9\xef\xf1\xd1\xb2\x49\xe8\x18\xac\xd7\x30\x93\x0a\x04\x33\xfc\x0e\x5b\xd4\x84\xbb\x22\x74\xdc\xde\x33\x33\x87\xf5\xda\x5b\xd2\x03\x8c\x06\x83\x3b\xa6\x20\x1c\x10\x68\x8f\xf3\x26\x86\x5d\x5c\x4c\x31\x73\x40\x47\xf4\x51\xd7\xd0\x88\xa9\xdd\x4d\xce\x86\x24\x7d\x2e\x8b\x4c\x83\x99\x23\x64\xcc\x30\x0b\xc6\x6e\x67\x98\xc1\x8c\x17\xd8\x3a\x70\xa9\x78\xee\x41\x3b\x10\x1d\x46\xc7\x0e\xb0\x5b\x1a\x12\x2f\x02\x3b\x68\x59\x33\x1a\x0c\x3c\x00\x7f\xe4\x5e\xb1\xd2\xc9\xce\x51\xa0\xe6\x1a\x3e\xfc\x68\x11\x58\x9a\x4a\x94\x59\x95\xd8\x3e\xa5\x8d\x5a\xa6\x06\x1e\x07\x00\x23\x78\xe5\x02\x30\x19\xd9\x7f\x03\x80\x77\x70\xfd\x91\xd2\x61\xab\x80\x1b\xc2\xab\x2a\xac\x92\xa1\xff\xd0\x8d\x80\xb5\xc5\x7c\x81\xf7\x2d\x00\xa9\x42\x66\xb0\x0b\x5c\x2d\x85\xe1\x0b\xb4\xe8\x5d\x68\x75\x95\x98\x2d\x45\xda\x65\x13\x46\xf0\xaa\xc5\x94\xd4\x31\x48\x2e\xf3\x1a\x5d\xe0\x7d\x18\xb4\x79\x04\xb1\xb3\xb0\x3b\x10\xc4\xf0\xe7\xc3\x18\x82\xd1\x03\xa6\x4b\x83\x41\xb4\x45\x26\xb0\x82\xf8\x57\xb1\x4e\x12\xc6\xfe\xf3\xb9\x4d\x83\x50\xf0\xa2\x12\xd2\x08\x9d\xb1\x42\xa3\xff\x17\x59\x94\xc9\x18\x8d\x3f\xc1\x8a\xe8\x0b\xf9\xf8\xc4\xec\x96\x20\xb3\x6a\xd6\x86\x27\x45\x0d\x46\x9d\xb8\x06\x90\x44\xf3\xa7\x46\x5f\xb2\x0f\xc0\xe8\x08\x0c\xc6\xf6\xe3\xcb\xde\x05\x18\x1e\x41\x56\x93\xb7\x20\xd2\x9f\x42\xb3\x54\x02\xa4\x77\xb1\x95\xf4\xfd\x52\xa4\x86\x4b\xf1\x0e\x57\x10\xb8\x02\x7b\xc3\xb4\x46\xa3\x03\xf2\x91\x5b\xd1\xe0\x96\x80\x0b\x23\xbf\x3e\x08\x42\xd9\xf6\x7b\xb4\x8d\xe0\x30\x02\x54\x8a\xf2\xa2\x53\x90\x90\x67\x1b\x53\x7d\xbf\x93\xeb\x3c\x73\xd9\xf9\x5c\x1e\xcb\x64\xe4\x2b\x8c\xbe\x0e\x9a\x13\xc1\x47\x38\x06\x02\x1c\x46\x3e\xa3\xc0\xb9\xe0\xe0\x00\x7e\x12\x54\xcb\x50\xd9\x04\x2e\xe9\x3f\x37\x73\x48\xa5\xd0\x06\x32\x4c\x0b\xa6\x30\x03\x36\x95\x77\x68\x4f\x78\x4b\x37\x4a\x0f\xc3\x5e\xf1\x88\xbc\x4f\x7c\x00\x38\x05\xfc\x31\xc1\x8b\x67\x5d\x54\x2a\x2c\x24\xcb\x3a\xce\x21\x87\x54\x8e\xf0\xfb\x50\xf0\xa9\x62\x6a\xf5\xad\x8e\x69\x89\xeb\xb8\xa4\x0a\xa5\x64\x94\x9c\x4b\x96\x8d\xad\x84\xb0\x22\x4f\x72\x1d\xc4\x5d\x33\xdf\xdc\xbc\xbf\x1a\x9d\x5f\x9e\x0c\x83\x8f\x61\x14\xbd\x14\x81\x0e\xb1\x55\x92\xf8\x39\x15\x37\xa8\xf1\x34\x20\x3f\xfc\xf8\x95\x31\xd7\x88\xda\x46\xc1\x5e\xa1\xe8\xa9\x38\xba\x98\x5c\xfd\xfb\xfd\xe5\xd9\xc5\xe4\xcb\x5a\xa2\xaf\x60\xa4\x81\xff\xfc\xa4\x29\x30\x63\x57\x50\x18\xb5\x82\x52\x72\x61\x20\xcc\x70\xc6\x05\x66\x30\x5d\xc1\x1d\x2a\xcd\xa5\x88\x61\xa9\x97\xac\x28\x56\x30\xc4\xb2\x90\x2b\x92\xba\xa5\xfe\x2d\x10\xfd\x6c\x7b\xa1\xca\xc8\x64\x98\x9c\x89\x4f\x98\x1a\x4b\x70\x2a\x85\x96\x05\x86\x4f\xca\x22\x59\xc7\x9d\x3c\xb1\x89\x6d\x29\x6e\x62\x92\x45\xd9\x4b\xdb\xa7\xac\x28\x2a\x54\x3f\x73\x33\x9f\xf0\x05\xca\xa5\x09\x03\xa7\x8e\xad\xf1\xde\x15\xa8\xd4\x4b\x61\xe3\x66\x0a\x97\x1b\x16\x9f\x6f\xf3\x2b\xc1\x16\x3c\xb5\x66\x2a\xb8\xb8\xc5\xac\x9a\x3e\x66\x9e\xc9\x86\xca\xe6\xfb\xf2\xb7\x17\xb5\x06\x54\xc7\xcc\x34\xc4\x90\x21\xec\xca\x00\xec\xe7\x63\x9b\xfa\xae\x92\xed\xef\xc3\x9b\xd1\xdb\xb3\x0b\xb8\x38\x99\x9c\x7d\x18\xc1\xfb\x93\xd3\x77\x27\x6f\x47\x70\xf6\xe3\xfb\xcb\xab\xc9\xf8\x6b\xe7\xb4\xfd\xa7\x83\xda\xc6\x61\x0b\x96\x22\x43\x9a\xce\xaa\x83\x44\x25\xfc\x30\x75\x23\xca\xfa\xab\x6d\x56\x55\xe3\xb6\x2a\x7a\xa9\xae\x66\x36\x4c\x8f\x9e\x1b\xeb\x5c\x97\x22\x88\x2d\x92\x3a\xb7\xec\xe6\x78\xb5\x98\xca\x62\x42\x21\x74\x04\x0b\x56\x5e\x6b\xa3\xb8\xc8\x3f\xbe\xea\x08\x26\xab\x3f\xae\xe3\xa6\xa2\x7a\xb3\xcc\x78\xf6\x10\xc3\xee\xcc\x9a\x85\x98\x9f\x5b\xe7\x13\x79\xab\x65\x9c\x64\x74\x19\xa8\x43\xc1\xe5\x1a\xaa\xf6\x90\x5a\xef\xf5\x50\x26\xf4\x7d\x56\x7b\x9d\xac\x62\x24\x68\x0b\x1a\x0c\xa1\xb6\x46\x9b\xd5\x46\xb3\xf4\x3c\x7b\xd8\x68\x3f\xab\x46\xdf\x26\x1d\xee\xde\x2a\xb4\x72\x04\x32\x69\x8d\x0a\x96\xd2\x7e\xac\xcc\xd0\xf6\x55\xd2\xb2\xe3\xf5\x06\xb6\xd4\xf8\x6a\x98\x1d\x94\xfd\x0e\x45\x01\x64\x33\x8b\x4c\xe6\xad\x53\x4d\xf9\x9b\x6a\x71\x15\xd7\x4d\xa1\xec\xc4\x8a\x2b\xa8\x16\x63\x10\x77\x20\x53\xe2\xf3\x99\x3d\xfd\x07\x9b\x16\xbe\x17\xb7\x8a\xc1\x86\x06\xea\xf2\x66\x74\x31\x7c\x3e\x6b\xb6\xaf\x26\xd5\xd4\x78\xe3\x7b\xe9\x36\x75\xa5\x3a\xd3\xf4\xdf\xdf\xa1\xc2\x6c\x02\xba\x65\xad\x01\x10\xa6\xa4\x50\xbc\xee\xe5\x54\x95\xcc\xeb\x6f\x2e\x47\xbe\x77\xd4\x73\x37\x9f\xea\x4d\xd5\xa8\xda\x87\x73\x6f\x39\x8f\xe0\xe8\xf7\xac\x40\x3e\x12\xff\xc7\xda\xf3\xff\xe2\xf3\x1b\x17\x9f\x7e\x7a\x53\xac\x1e\x03\x0d\xe0\x22\x0b\x85\x29\x9f\x96\x8c\x16\x79\xbf\x5a\x3d\x49\xcd\xed\xea\x55\x2b\x6e\xe9\x14\x89\xdd\xba\x36\x6d\x9e\xe7\xad\xa5\x2e\x87\xef\xfc\xb6\xaf\x25\x68\xdf\xa9\xc8\x26\xb7\xe8\xc6\xf6\xfe\x40\x68\x67\x28\x57\x1a\x3a\x7c\xba\xd7\x95\x27\x57\x8f\xcb\xe1\xd5\x70\x83\xf8\xab\x21\x5d\x5f\x0c\xe3\x5f\x06\x80\xc2\x2e\xd3\xed\xc6\xc9\xa7\x5a\xd2\xe3\x73\xec\xe5\x3f\x0e\x76\x5a\x8f\x32\x2e\xfe\xa7\xae\x08\x0c\x6b\xee\xef\x70\x75\xa2\x14\x5b\x59\x1f\xed\xd8\x03\x7c\x06\x0b\x99\xd9\x13\xf0\xb7\x7a\x1d\x4a\xc5\x85\x99\x41\xf0\x8b\xf8\xc5\xce\xe7\x9e\xba\xf2\x6f\x87\xe6\xf0\x61\xef\x21\x86\x80\xe4\xd9\xbd\xe6\x5e\xdd\xd7\x7c\x08\xbc\x56\x58\x76\x93\xaf\xf3\x12\xe4\x6f\xbc\x5f\xac\xd0\xed\xfb\x9d\x06\x57\x1f\x3a\xce\x98\xd6\xc3\x2e\x43\x4d\xd7\xfe\x53\xfb\x0a\x19\xf6\xfc\xf7\x42\x40\x79\xeb\x56\xd7\xf8\x6c\xfa\x9a\x38\x0a\xbc\x0f\xed\x2b\x68\xf2\x66\x39\x9b\xa1\x8a\xec\xd6\x77\x9b\xb7\x76\xb4\x4a\x69\xc7\xad\x5e\xe0\xfd\x15\xb2\x0c\x55\xe8\x58\x87\xda\x42\x20\xd7\xf2\x3b\xb8\x26\xac\x6f\x0a\x99\xde\x8e\xf9\x67\xac\x9e\x96\xb4\x51\xc8\x16\xc4\xc3\xbd\xa4\x12\x93\xcb\xef\xdf\x84\xd3\x18\xf8\xdd\xf5\xd1\xc7\x68\xb0\x63\x2d\x8a\x56\x5d\xf7\xb4\x4a\x34\x43\xb7\x18\xfa\x95\xb1\xc9\x46\xfe\xfd\x35\x06\xad\x52\x92\x8b\x22\x75\x70\x6c\x59\xf2\xec\xc7\x56\x9e\x5b\x7f\x1c\x1f\x79\xf9\x31\x5c\x1d\x81\x97\xb3\x76\x56\x6b\x2e\x14\x5c\x26\xa7\xb2\x5c\x85\xd9\xf4\x75\xdc\x30\x8d\xfe\xbe\x9d\x61\x77\xf2\xcf\xaa\x66\x95\x7f\xe6\x65\xcb\x4c\xd9\xf4\x75\x34\xd8\xe9\xbb\x68\x67\xa7\xcf\x67\x67\x3d\xd8\xf1\x78\xda\x70\xbe\x8b\x21\xff\xac\xb6\xe6\x90\x7f\x56\xc9\x69\x21\x35\x5d\xa9\x2a\x82\x6c\xfa\x5d\xf2\x86\x9c\x17\x56\xd7\xca\xa1\x7d\x76\xa0\x00\x1e\xb6\xe6\x10\xd7\x65\xa0\x2e\xb0\x3f\xbb\xf7\x0a\x3d\x68\x3a\xd3\x4d\xdd\x96\x5c\x4f\x52\xc9\x64\x55\xe2\x89\xeb\x4c\xeb\x75\x37\x5d\x5a\xc5\xbd\x4a\x1c\x3b\xea\xa8\x6e\xda\x38\xb2\xfa\xe6\xf1\x7c\x8f\xfa\xc2\x68\xd3\x97\x17\x92\x46\x20\x8d\x91\x35\x03\xba\x2e\x46\x6e\xe9\x03\x2b\x96\x2e\xc9\xa8\x8d\xaa\x7c\xb9\x40\x61\x60\xcc\x04\x37\x2b\x38\x9d\x63\x7a\xab\x5d\x7c\x14\x28\x2c\xa7\xa4\x22\x3a\xe7\xda\x44\xf0\x4f\x12\x5a\xa0\x70\xb8\x4f\x54\xae\xab\x37\xc9\xce\xe5\xff\x8a\x71\x8d\x61\xc0\xfc\xd9\x20\x86\xc0\x48\x09\x0b\x26\x56\x50\x2d\x6a\x28\xa9\x5a\x64\xd4\x7f\x6b\xab\xec\xe9\xea\xf5\xb2\xdb\xee\xaa\x87\x9f\xe7\x91\xfd\xe3\x9b\x90\xcd\xf0\xfe\x5b\x80\x75\x66\x18\xe6\x6a\x38\xb3\xc1\x52\x83\xa9\x87\x17\x37\x39\x34\xb1\x56\x7b\xe1\x8f\xc4\x9d\xd5\x37\x08\xaa\x2b\xac\xb5\x64\xdd\xcd\x92\xd1\x83\x19\xf3\xdc\x91\xa8\xf6\x7e\x9d\x85\x1d\xe3\x84\x2d\x8a\x28\x19\x3d\x50\x73\x0e\x5f\xa8\x9c\x2d\x3b\x7d\xd2\x68\x8f\x90\xf2\xa9\x5c\x16\x19\x08\x69\xc0\xad\xd5\x06\x83\xbd\x0c\xe4\xac\x67\xab\x0e\xb2\x2f\x78\x54\xdf\x73\x93\xce\xe1\x8e\x90\x77\xf4\x49\x42\xb3\x2a\x31\xb2\xd0\x52\xa6\xb1\xaf\xff\x91\x85\xdc\xb1\xd0\x13\x0e\xbd\x23\xb6\xd8\xe3\x8c\x2d\x0b\x73\xf4\x8c\xc2\xf6\x47\x84\x54\x0a\xff\x52\x44\x7a\xd7\x6a\xda\xbd\x05\xd7\x0b\x46\x88\xf7\xc9\x0c\x98\x52\x93\xdf\xd3\x31\xe4\xd2\xc0\xde\xa4\x0a\x92\x96\xd0\x20\x86\xbb\xde\xbb\xe5\xba\x7b\xe3\x56\x04\x37\x86\x5d\x55\x47\xcc\x95\x9f\x71\x9e\x0d\x1a\x47\xe0\x42\x46\x75\x42\x46\xb5\x96\xac\xc9\x54\x27\x64\x3a\x93\xa1\xdd\x46\x73\x8e\x82\x24\xd7\xc9\x53\x49\x6f\xbd\xd2\xe7\xa6\xa6\x3c\xac\x7f\x22\xa2\xba\x62\x6b\x5b\x6f\xe6\xf6\x9c\x67\xc9\x5b\x14\xa8\x98\x41\xc7\x70\x6c\x3b\x3d\x04\x2a\x68\x1e\x9a\xb7\xaa\x7e\x61\x97\xdb\x89\xca\x2b\x56\x2c\x68\x26\x58\x0a\xe8\xff\xd4\x28\x5f\xd7\x28\xc7\x5c\xe4\x05\x56\xae\xa6\xe9\x0d\x1f\x0c\xec\x03\x33\x06\x17\xa5\xa1\x2c\xf7\x7b\x66\xce\xec\x57\x3b\xd1\x2a\x34\x1f\x58\xd1\x4d\xaa\x4b\x2a\xa1\x13\x69\x8b\x68\xa8\x0e\xb7\x4f\x23\xb7\xe2\x92\xa8\x0a\x2d\x98\x31\x5e\x60\x66\x1b\x81\x3f\x71\x08\x36\xe6\x8f\xf7\x26\x11\xec\xc3\xde\x5d\x10\x83\x3a\xb4\x10\xa2\xee\x6c\xec\xc0\x79\x77\x16\xba\xf9\x41\x71\x32\xe7\xba\x49\xc4\x39\xd3\xb0\x58\x16\x86\x97\xb5\x01\x34\xec\xfb\xdb\x38\x19\xd0\x0e\xf3\x0c\xfe\x35\x06\x66\xa7\x4b\x3b\xb7\x6d\xb4\x57\x2a\x17\x25\x33\x7c\xca\x0b\x6e\x56\x03\x80\x4f\xfa\x72\xfa\x69\x83\x75\x2e\xa7\xc4\x3b\xfc\xf5\xfa\xe3\xaf\x1b\x3a\xf7\x33\xd6\x71\xaf\xf0\xdd\x1a\xe3\x7e\x3c\x6b\xe0\x33\xad\x79\x2e\x6c\x1e\xba\x1f\xf6\x96\x0a\x2b\x23\xd5\x06\x7a\x92\x56\x31\xec\xde\x3c\x9f\x55\x3e\x8b\x5c\x53\xec\xe5\x92\x9b\x46\xac\x9a\xc9\x18\xfd\x23\xb6\xdf\x26\xbf\xb4\xbe\xfe\xe6\x71\xb0\x97\x3d\x0d\x84\x96\xbc\xae\xf4\x4e\x7c\xb4\x0b\x4c\xa3\x60\x75\x27\xa2\xec\xc9\x40\x5a\x17\x35\xc1\xe4\x74\x74\x41\x1d\x6d\x28\x11\x2f\x04\x98\xa8\xf2\x47\xc7\x36\x0e\xac\xb4\x9a\x82\x89\xac\x92\xb3\x14\xfe\x25\x3e\x69\x0a\xc4\x6f\x92\xfc\x95\x9d\x29\xfe\x7e\xaa\x84\x6c\xd4\x67\x3d\x68\x0c\x44\x13\xdb\x84\x51\xac\x67\xf0\x03\xe3\x4a\xc3\x14\x0b\x79\x3f\xb0\xcf\x36\xfb\xff\x0d\x00\x00\xff\xff\xc2\x90\x92\x19\x44\x21\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 8516, mode: os.FileMode(420), modTime: time.Unix(1531286187, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

