// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531104485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531283914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x29\x09\x08\x00\x00\xff\xff\x6d\x3e\x4c\x6b\x6a\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 106, mode: os.FileMode(420), modTime: time.Unix(1531177142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531098832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531270750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0a\x80\x50\x0c\x03\xd0\x3d\x97\xc9\x51\x74\xf9\xe0\xea\x50\xaa\xa8\xe4\xd3\x06\xcf\xff\x1f\x2f\x7d\x41\x70\x74\x54\x13\x2c\xc9\x04\x67\xdd\xff\xe9\x20\x52\xca\x37\x90\x9a\x4f\x62\xec\x07\x64\x0b\x9b\xad\x15\x00\x00\xff\xff\xe0\xe3\x66\x7a\x3a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 58, mode: os.FileMode(420), modTime: time.Unix(1531122400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\x1b\xb9\xf1\x7f\x6d\x7d\x8a\xf9\xef\xdf\x2e\x56\xc1\x7a\xe5\x5c\x8b\x16\x70\xeb\x02\x8e\xa5\xcb\xb9\x71\xec\xc0\xf2\xe5\x50\xf8\x02\x1f\xb5\x3b\x5a\x33\xde\x25\xb7\x24\x65\x5b\x09\xf4\xdd\x8b\x21\xb9\x8f\x96\x6c\x5d\x73\xb8\xbe\xe9\x0b\xc3\x12\xc9\x79\x9e\xf9\xcd\x90\x2a\x59\x72\xc7\x32\x84\x82\x71\x31\x18\xf0\xa2\x94\xca\x40\x38\x00\x08\x66\x4b\x83\x3a\x18\xec\x04\x89\x2c\x4a\x85\x5a\x8f\xb2\x2f\xbc\x0c\x68\x2b\x51\xcb\xd2\xc8\x11\xa3\xfd\xe6\x6b\xc2\xcb\x5b\x54\x44\x81\x22\x91\x29\x17\xd9\x68\xc6\x34\xfe\xf9\x4f\xf6\xd0\xbc\x30\xb4\xc5\x65\x30\xa0\xaf\x19\x37\xb7\x8b\x59\x9c\xc8\x62\x94\xa1\x38\x48\x78\x8a\xa3\x4c\x27\x8a\x97\x66\x84\x22\xe3\x02\x83\xde\x31\x25\x67\xa8\xcc\x9d\xe2\x05\x8a\x91\x34\x46\xd2\x81\xaf\x5f\x81\xcf\x61\x37\xfe\x81\xe9\x31\xce\x16\x59\xc6\x45\x36\x11\x6c\x96\x63\x0a\xfb\xab\xd5\x4b\x92\x52\x4b\x43\x4a\x13\xab\x7d\x40\x91\x82\xa5\x6a\xf1\x3d\x93\xbf\x96\x6b\x2e\x89\xe7\x48\x1b\x26\x52\xa6\xd2\x1e\xf3\x01\xc0\x68\x04\xa7\xd6\xd3\x5c\x64\x50\x30\x7d\xa7\x9d\x48\xc5\x44\x86\xb0\xcb\xcb\x08\x76\x0b\x0e\x87\x47\xb0\x1b\x9f\x71\x71\x87\x2a\x7e\xcf\xf4\x1d\xa6\x8e\x4a\xd7\x3a\xee\x16\x3c\x3e\xc7\x87\xe3\x9c\x33\x5a\x84\x80\xd6\x78\x09\xab\x95\x77\x8e\x97\x39\x1c\x0c\xee\x99\x82\x70\x40\x7a\x78\x29\x37\x11\xec\x62\x31\xc3\xd4\xc9\x99\xd0\x47\xcf\x79\x34\xb2\xcc\xed\x6e\x7c\x3a\x26\xce\xb7\x32\x4f\x35\x98\x5b\x84\x94\x19\x06\x73\xa9\xc0\x6e\xa7\x98\xc2\x9c\xe7\xd8\x22\xb8\x50\x3c\x3b\x67\x05\x36\x5a\xb6\x19\x1d\x39\x25\xdd\xd2\x98\x78\x91\xb2\x83\x96\x83\x86\x83\x81\x57\xc0\x93\x3c\x28\x56\x3a\xd9\x19\x0a\xd4\x5c\xc3\xc7\xf7\x56\x03\x7b\xa6\x12\x65\x96\x25\xb6\xa9\xb4\x51\x8b\xc4\xc0\xd7\x01\xc0\x04\x5e\xb9\x9c\x8a\x27\xf6\xdf\x00\xe0\x1d\x5c\x7f\xa2\x0c\xdf\x2a\x87\xc6\xf0\xaa\xca\x94\x78\xec\x3f\x74\x83\xba\xb2\x3a\x9f\xe3\x43\x4b\x81\x44\x21\x33\xd8\x55\x5c\x2d\x84\xe1\x05\x5a\xed\x5d\xb6\x74\x8d\x98\x2f\x44\xd2\x65\x13\x0e\xe1\x55\x8b\x29\x99\x63\x90\x42\xe6\x2d\x3a\xc7\x87\x30\x68\xf3\x08\x22\xe7\x61\x47\x10\x44\xf0\xc7\x83\x08\x82\xc9\x23\x26\x0b\x83\xc1\x70\x8b\xe4\x66\x39\xf1\xaf\xd2\x97\x24\x4c\xfd\xe7\x33\x9b\xd9\xa1\xe0\x79\x25\xa4\x11\x3a\x67\xb9\x46\xff\x6f\x68\xb5\x8c\xa7\x68\x3c\x05\xcb\x87\xcf\x94\xd8\x13\xb7\xdb\x03\xa9\x35\xb3\x76\x3c\x19\x6a\x70\xd8\xc9\x6b\x00\x49\x67\xfe\xd0\xd8\x4b\xfe\x01\x98\x1c\x82\xc1\xc8\x7e\x7c\x39\xba\x00\xe3\x43\x48\xeb\xe3\x2d\x15\xe9\x4f\xa1\x59\x28\x01\xd2\x87\xd8\x4a\xfa\x7e\x21\x12\xc3\xa5\x78\x87\x4b\x08\x1c\x66\xde\x30\xad\xd1\xe8\x80\x62\xc4\x7d\x95\xba\x25\xe0\xc2\xc8\x5f\x9f\x04\xa1\x6c\xc7\x7d\xb8\x8d\xe0\x70\x08\xa8\x14\xd5\x45\x07\x4e\x90\xa7\x6b\x4b\x7d\xbf\x53\xeb\x3c\x75\xd5\xb9\xa9\x8e\x65\x3c\x89\x3d\xfc\x5c\x07\x0d\x45\xf0\x09\x8e\x80\x14\x0e\x87\xbe\xa2\xc0\x85\x60\x34\x82\x1f\x05\x75\x17\x54\xb6\x80\x4b\xfa\xcf\xcd\x2d\x24\x52\x68\x03\x29\x26\x39\x53\x98\x02\x9b\xc9\x7b\xb4\x14\xde\xd3\x8d\xd1\xe3\xb0\x07\x1e\x43\x1f\x13\x9f\x00\xce\x00\x4f\x26\x78\xbe\x31\x44\xa5\xc2\x5c\xb2\xb4\x13\x1c\x0a\x48\x15\x08\xbf\x0f\x39\x9f\x29\xa6\x96\xdf\x1a\x98\x96\xb8\x4e\x48\xaa\x54\x8a\x27\xf1\x99\x64\xe9\xd4\x4a\x08\xab\xe3\x71\xa6\x83\xa8\xeb\xe6\x9b\x9b\x0f\x97\x93\xb3\x8b\xe3\x71\xf0\x29\x1c\x0e\x5f\xca\x40\xa7\xb1\x35\x92\xf8\x39\x13\xd7\x98\xf1\x34\x21\x3f\xbe\xff\x95\x39\xd7\x88\xda\xc6\xc0\x1e\x50\xf4\x4c\x9c\x9c\x5f\x5d\xfe\xf3\xc3\xc5\xe9\xf9\xd5\xf3\x56\xa2\x47\x30\xb2\xc0\x7f\x7e\xd2\x14\x98\xb1\x2b\x28\x8c\x5a\x42\x29\xb9\x30\x10\xa6\x38\xe7\x02\x53\x98\x2d\xe1\x1e\x95\xe6\x52\x44\xb0\xd0\x0b\x96\xe7\x4b\x18\x63\x99\xcb\x25\x49\xdd\xd2\xfe\x96\x12\xfd\x6a\x7b\x01\x65\x64\x3c\x8e\x4f\xc5\x67\x4c\x8c\x3d\x70\x22\x85\x96\x39\x86\x4f\x60\x91\xbc\xe3\x28\x8f\x6d\x61\xdb\x13\x37\x11\xc9\xa2\xea\xa5\xed\x13\x96\xe7\x95\x56\x3f\x71\x73\x7b\xc5\x0b\x94\x0b\x13\x06\xce\x1c\x8b\xf1\x3e\x14\xa8\xd4\x4b\x69\x23\x98\xe1\xf7\xce\xad\xdc\xea\xe7\xdb\xfc\x52\xb0\x82\x27\xd6\x4d\x39\xcd\x20\x29\xb8\x93\xb6\xda\x89\xc9\x1a\x64\xf3\x7d\xf9\xdb\x41\xad\x51\xaa\xe3\x66\x1a\x62\xc8\x11\x76\x65\x00\xf6\xf3\x91\x2d\x7d\x87\x64\xfb\xfb\xf0\x66\xf2\xf6\xf4\x1c\xce\x8f\xaf\x4e\x3f\x4e\xe0\xc3\xf1\xc9\xbb\xe3\xb7\x13\x38\x7d\xff\xe1\xe2\xf2\x6a\xda\x81\x45\xa1\x23\xd8\x2d\xef\x32\x87\x89\x6f\xe5\x07\x37\x09\xbf\x59\x92\xc6\xba\x64\x09\x36\x08\xd9\x4c\x6b\xa4\x71\x79\x97\xf9\x04\xfe\xc0\xcc\x2d\x39\x6e\x21\x52\x54\x20\x6a\xc2\xea\x94\x9b\xda\xaa\xba\x0b\xa5\xe2\x19\x17\xd6\xa5\x0f\x4c\xdb\x53\x42\x7b\x5c\xbb\x11\xe5\x7a\x2a\xea\x6f\x55\xaf\xb7\x5e\xf1\x8a\x3a\x98\x6d\xf4\x38\x74\x1d\xf9\x89\x72\x81\x6b\x6c\xc4\xae\x75\xa4\x2e\x47\xbb\x39\x5d\x16\x33\x99\x5f\x51\xd6\x1d\x42\xc1\xca\x6b\x6d\x14\x17\xd9\xa7\x57\x1d\xc1\x14\xa8\xaf\xab\xa8\x01\x61\xef\xc9\x39\x4f\x1f\x23\xd8\x9d\x5b\x4f\x12\xf3\xe9\x22\x49\x50\xeb\xf9\x22\xcf\x97\x76\x7e\x4d\x89\xb4\xd5\x71\x8e\x53\xba\x1e\xd4\x99\xe4\x4a\x15\x95\x4d\x9e\x5e\x96\x41\x4f\xe3\x98\xbe\xcf\xeb\xa4\x21\x0f\x19\x09\xda\x1a\x00\x86\x2c\xb0\xce\x9c\xaf\x75\xa6\xa5\xe5\xe9\xe3\x5a\xbf\x5a\xf3\xfa\xbe\xea\x48\xf2\xde\xa2\x95\x43\x90\x71\x6b\xea\xb0\x27\xed\xc7\xca\x3d\x9b\xe2\x19\xb7\x7c\x7d\xbd\x46\x04\xf5\xd3\x2d\xd4\xef\x77\x41\x4a\x52\x5b\xbd\xe4\x57\xef\xc2\xea\x6e\xb7\x0e\xef\xab\xda\x69\xc0\xb8\x93\x5c\x0e\xb4\x6d\x72\x06\xd1\x46\x5b\x28\x6f\xf9\xdc\x72\xfa\x3f\x5b\x86\xbe\xf7\xb7\xc0\x67\x4d\xc3\x76\x75\x3a\x39\x1f\x6f\xae\xd2\xed\xd1\xab\x9a\x52\x6f\x7c\xef\xde\x06\xc7\x2a\x9a\xa6\xdf\xff\x0e\x88\xb6\x4e\xd1\x2d\xb1\x0d\x40\x98\x92\xf2\xf5\xba\x57\x90\x15\x12\xac\xbe\x19\xfe\x7c\xaf\xaa\xe7\x7c\x3e\xd3\xeb\xd0\xaf\xda\x87\x33\xef\x39\xaf\xc1\x61\x83\x65\xbf\x2f\x94\xf9\x0c\xfd\x0f\x41\xec\x7f\x28\xf6\xdf\x46\xb1\x3e\x36\x50\xa2\x1f\x01\xdd\x16\x44\x1a\x0a\x53\x3e\x8f\x3d\x2d\xd2\x3e\x04\x3e\xa9\xf1\xed\x40\xb0\x55\x00\x44\x45\x2a\x6c\x0d\x72\xeb\x2f\x22\xd6\x9d\x17\xe3\x77\x7e\xdb\x83\x12\xda\x37\x33\x72\xd6\x1d\xba\xfb\x46\x7f\x92\xb5\xc3\x9f\xc3\x98\x0e\x9f\xee\x3d\xeb\xc9\x9d\xe9\x62\x7c\x39\x5e\x23\xfe\x72\x4c\xf7\x2e\xc3\xf8\xf3\x0a\xa0\xb0\xcb\x74\x2d\x73\xf2\x09\x94\x7a\x7c\x8e\xbc\xfc\xaf\x83\x9d\xd6\x6b\x92\x2b\x9e\x99\x43\x93\x71\xcd\xfd\x1d\x2e\x8f\x95\x62\x4b\x1b\xa3\x1d\x4b\xc0\xe7\x50\xc8\xd4\x52\xc0\x5f\xea\x75\x28\x15\x17\x66\x0e\xc1\xcf\xe2\x67\x7b\xb1\xf0\xa7\xab\xf8\x76\xce\x1c\x3c\xee\x3d\x46\x10\x90\x3c\xbb\xd7\x3c\x08\xf4\x2d\x1f\x03\xaf\x0d\x96\xdd\x6a\xed\x3c\x61\xf9\xab\xfa\xb3\x50\xdf\xbe\x98\x6a\x70\xe0\xd2\x09\xc6\xac\x9e\xd2\x19\xea\xf8\x1c\x1f\x4e\xec\x8b\x68\xd8\x8b\xdf\x0b\x09\xe5\xbd\x5b\xbd\x3f\xa4\xb3\xd7\xc4\x51\xe0\x43\x68\x5f\x64\xe3\x37\x8b\xf9\x1c\xd5\xd0\x6e\x7d\xb7\x7e\x6b\x47\xab\x84\x76\xdc\xea\x39\x3e\x5c\x22\x4b\x51\x85\x8e\x75\xa8\xad\x0a\x14\x5a\x7e\x0f\xd7\xa4\xeb\x9b\x5c\x26\x77\x53\xfe\x05\xab\x37\x31\x6d\x14\xb2\x82\x78\xb8\x57\x5d\x62\x72\xf1\xfd\x9b\x70\x16\x01\xbf\xbf\x3e\xfc\x34\x1c\xec\x58\x8f\xa2\x35\xd7\x3d\xf3\xd2\x99\xb1\x5b\x0c\xfd\xca\xd4\xa4\x13\xff\x16\x1c\x81\x56\x09\xc9\x45\x91\x38\x75\x2c\x76\x79\xf6\x53\x2b\xcf\xad\x7f\x9d\x1e\x7a\xf9\x11\x5c\x1e\x82\x97\xb3\x72\x5e\x6b\x6e\x42\x5c\xc6\x27\xb2\x5c\x86\xe9\xec\x75\xd4\x30\x1d\xfe\x75\x3b\xc7\xee\x64\x5f\x54\xcd\x2a\xfb\xc2\xcb\x96\x9b\xd2\xd9\xeb\xe1\x60\xa7\x1f\xa2\x9d\x9d\x3e\x9f\x9d\xd5\x60\xc7\xeb\xd3\x56\xe7\xbb\x08\xb2\x2f\x6a\x6b\x0e\xd9\x17\x15\x9f\xe4\x52\xd3\x5d\xb0\x3a\x90\xce\xbe\x8b\xdf\x50\xf0\xc2\xea\x3e\x3c\xb6\xef\x25\x94\xc0\xe3\xd6\x40\xe3\xda\x12\xd4\xc8\xfb\x93\x7b\x68\xd1\x83\xa6\xad\xdd\xd4\x3d\xad\x7a\x4a\xde\xd4\xd7\x56\xab\x6e\xed\xb4\xda\x41\x55\x45\x76\x80\x52\xdd\x1a\x72\xc7\xea\xfb\xd3\xe6\x0e\xf7\xcc\xc0\xd4\x97\x17\x92\x79\x20\x8d\x91\x35\x03\xba\xf4\x0e\xdd\xd2\x47\x96\x2f\x5c\xc5\x51\x13\x56\xd9\xa2\x40\x61\x60\xca\x04\x37\x4b\x38\xb9\xc5\xc4\xbe\xa7\xf3\x39\xe4\x28\x2c\xa7\xb8\x3a\x74\xc6\xb5\x19\xc2\xdf\x49\x68\x8e\xc2\xe9\x7d\xac\x32\x5d\xbd\xac\x76\x9e\x30\x2e\x19\xd7\x18\x06\xcc\xd3\x06\x11\x04\x46\x4a\x28\x98\x58\x42\xb5\xa8\xa1\x24\xe8\x48\xa9\x7b\xd7\x5e\xd9\xd3\xd5\x1b\x6c\xb7\x29\x56\xcf\x57\x9b\x35\xfb\xdb\x37\x69\x36\xc7\x87\x6f\x51\xac\x33\x0d\x31\x07\xe8\xcc\x66\x4e\xad\x4c\x3d\xfa\xb8\x59\xa3\x49\xbc\x3a\x0a\xff\x4f\xdc\x59\x7d\x47\x21\x90\x61\xad\x25\x1b\x6e\x16\x4f\x1e\xcd\x94\x67\xee\x88\x6a\xef\xd7\x25\xd9\x71\x4e\xd8\x3a\x31\x8c\x27\x8f\xd4\xa9\xc3\x17\x60\xb4\xe5\xa7\xcf\x1a\x2d\x09\x19\x9f\xc8\x45\x9e\x82\x90\x06\xdc\x5a\xed\x30\xd8\x4b\x41\xce\x7b\xbe\xea\x68\xf6\x4c\x44\xf5\x03\x37\xc9\x2d\xdc\x93\xe6\x1d\x7b\xe2\xd0\x2c\x4b\x1c\x5a\xd5\x12\xa6\xb1\x6f\xff\xa1\x55\xb9\xe3\xa1\x27\x1c\x7a\x24\x16\xf9\x71\xce\x16\xb9\x39\xdc\x60\xb0\xfd\x29\x24\x91\xc2\xbf\x77\x91\xdd\xb5\x99\x76\xaf\xe0\xba\x60\xa4\xf1\x3e\xb9\x01\x13\xea\xf8\x7b\x3a\x82\x4c\x1a\xd8\xbb\xaa\x92\xa4\x25\x34\x88\xe0\xbe\xf7\xfa\xba\xea\x3e\x02\x28\x52\x37\x82\x5d\x55\x67\xcc\xa5\x1f\x78\x36\x26\x8d\x3b\xe0\x52\x46\x75\x52\x46\xb5\x96\xac\xcb\x54\x27\x65\x3a\x23\xa3\xdd\x46\x73\x86\x82\x24\xd7\xc5\x53\x49\x6f\xfd\xd6\x90\x99\xfa\xe4\x41\xfd\x43\x17\xe1\x8a\xc5\xb6\xde\xc4\xee\x39\xcf\xe3\xb7\x28\x50\x31\x83\x8e\xe1\xd4\xb6\x7d\x08\x54\xd0\x3c\x97\xb7\xd1\xaf\x3b\x25\x3f\xc9\x98\xb0\xcb\xf3\x58\x65\x15\x43\x16\x34\x43\x2d\xa5\xf5\xbf\x6a\x5d\x5f\xd7\xba\x4e\xb9\xc8\x72\xac\x02\x4e\x03\x1d\x3e\x1a\xd8\x07\x66\x0c\x16\xa5\xa1\x5a\xf7\x7b\xe6\x96\xd9\xaf\x76\xc8\x55\x68\x3e\xb2\xbc\x5b\x5a\x17\x04\xa4\x57\xd2\x42\x69\xa8\x0e\xb6\x2f\x26\xb7\xe2\x4a\xa9\x4a\x30\x98\x33\x9e\x63\x6a\xdb\x81\xa7\x38\x00\x9b\xf9\x47\x7b\x57\x43\xd8\x87\xbd\xfb\x20\x02\x75\x60\x55\x18\x76\xc7\x65\xa7\x9c\x0f\x6a\xae\xb1\x36\xf6\xea\x96\xeb\xa6\x1c\x6f\x99\x86\x62\x91\x1b\x5e\xd6\x0e\xd0\xb0\xef\x6f\xfa\xe4\x40\x3b\xdf\x33\xf8\xc7\x14\x98\x1d\x38\xed\x28\xb7\xd6\x5f\x89\x2c\x4a\x66\xf8\x8c\xe7\xdc\x2c\x07\x00\x9f\xf5\xc5\xec\xf3\x1a\xef\x5c\xcc\x88\x77\xf8\xcb\xf5\xa7\x5f\xd6\x34\xf3\x0d\xde\x71\xbf\x28\x74\x91\xc6\xfd\x10\xd8\xa8\xcf\xb4\xe6\x99\xb0\xd5\xe8\x7e\xa4\x5c\x28\xac\x9c\x54\x3b\xe8\x49\x71\x45\xb0\x7b\xb3\xb9\xb6\x7c\x2d\xb9\xd6\xd8\xab\x28\x37\xa0\x58\x33\xe3\x29\xfa\x07\x79\xbf\x4d\x71\x69\x7d\xfd\xcd\xf3\x60\x2f\x7d\x9a\x08\x2d\x79\x5d\xe9\x9d\xfc\x68\xc3\x4c\x63\x60\x75\x4d\xa2\xea\x49\x41\xda\x10\x35\xc9\xe4\x6c\x74\x49\x3d\x5c\x03\x14\x2f\x24\x98\xa8\xea\x47\x47\x36\x0f\xac\xb4\xfa\x04\x13\x69\x25\x67\x21\xfc\xaf\x0a\x71\x03\x13\xbf\x21\x04\x54\xde\xa6\x2c\xfc\xb1\x12\xb5\xd6\xaa\xd5\xa0\x71\x13\x4d\x6f\x57\x8c\x32\x3e\x85\x1f\x18\x57\x1a\x66\x98\xcb\x87\x81\x7d\x18\xda\xff\x77\x00\x00\x00\xff\xff\x54\x02\xb1\x8d\xe9\x21\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 8681, mode: os.FileMode(420), modTime: time.Unix(1531303139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

