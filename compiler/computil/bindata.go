// Code generated by go-bindata.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
// DO NOT EDIT!

package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f\x29\xc9\x07\x04\x00\x00\xff\xff\xfd\x5e\x58\x46\x1a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 26, mode: os.FileMode(420), modTime: time.Unix(1532895396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7b\x6f\x1b\x39\x92\xff\xdb\xfa\x14\x75\x7d\xf6\xa1\x3b\x90\x5b\xc9\xdc\xe1\x0e\xf0\xad\x17\x70\x2c\x4d\xc6\x13\xc7\x0e\x2c\x8f\x07\x0b\x4f\xe0\x50\xdd\xa5\x36\xe3\x16\xd9\x43\x52\xb2\x15\xc3\xdf\x7d\x51\x24\xfb\x69\x49\x56\x26\x83\x5d\x2c\xb0\x7f\x18\x96\xc8\x62\x3d\x7e\xf5\x60\x91\x54\xc1\x92\x3b\x96\x21\xcc\x18\x17\xbd\x1e\x9f\x15\x52\x19\x08\x7b\x00\xc1\x64\x69\x50\x07\xbd\x9d\x20\x91\xb3\x42\xa1\xd6\x83\xec\x2b\x2f\x02\x9a\x4a\xd4\xb2\x30\x72\xc0\x68\xbe\xfe\x9a\xf0\xe2\x16\x15\xad\x40\x91\xc8\x94\x8b\x6c\x30\x61\x1a\xff\xf7\x7f\x2c\xd1\x74\x66\x68\x8a\xcb\xa0\x47\x5f\x33\x6e\x6e\xe7\x93\x38\x91\xb3\x41\x86\xe2\x75\xc2\x53\x1c\x64\x3a\x51\xbc\x30\x03\x14\x19\x17\x18\x74\xc8\x94\x9c\xa0\x32\x77\x8a\xcf\x50\x0c\xa4\x31\x92\x08\x1e\x1f\x81\x4f\x61\x37\xfe\x89\xe9\x21\x4e\xe6\x59\xc6\x45\x36\x12\x6c\x92\x63\x0a\xfb\x4f\x4f\x3d\x80\x17\x64\xa5\x76\x15\xa9\x4d\xcc\xf6\x01\x45\x0a\x76\x5d\x83\xf3\xa9\xfc\x76\xbe\xb9\x24\xae\x03\x6d\x98\x48\x99\x4a\x3b\xec\x7b\x00\x83\x01\x9c\x58\xb4\xb9\xc8\x60\xc6\xf4\x9d\x76\x42\x15\x13\x19\xc2\x2e\x2f\xfa\xb0\x3b\xe3\x70\x70\x08\xbb\xf1\x29\x17\x77\xa8\xe2\x0f\x4c\xdf\x61\xea\x56\x69\xf0\x5a\x3c\x3e\x12\x5d\x7c\x86\xf7\x47\x39\x67\x34\x0c\x01\x8d\xf1\x02\x9e\x9e\x3c\x44\x5e\x6a\xd4\xeb\x2d\x98\xb2\xde\x25\x5d\xbc\xa4\x9b\x3e\xec\xe2\x6c\x82\xa9\x93\x35\xa2\x8f\x15\xf7\xc1\xc0\x0a\xb0\xf3\xf1\xc9\x90\xb8\xdf\xca\x3c\xd5\x60\x6e\x11\x52\x66\x18\x4c\xa5\x02\x3b\x9d\x62\x0a\x53\x9e\x63\x63\xc1\xb9\xe2\xd9\x19\x9b\x61\x53\xd7\x26\xab\x43\xa7\xaa\x1b\x1a\x12\x37\x52\xb9\x0d\x55\xd4\xeb\x79\x25\xfc\xa2\x7b\xc5\x0a\x27\x3f\x43\x81\x9a\x6b\xb8\xfa\x60\xb5\xb0\x34\xa5\x38\xb3\x2c\xb0\xb9\x4a\x1b\x35\x4f\x0c\x3c\xf6\x00\x46\xf0\xca\x45\x58\x3c\xb2\xff\x7a\x00\xef\xe1\xfa\x13\xc5\xfb\x96\x11\x35\x84\x57\x65\xdc\xc4\x43\xff\xa1\xad\xf5\x93\xd5\xfa\x0c\xef\x1b\x2a\x24\x0a\x99\xc1\xb6\xea\x6a\x2e\x0c\x9f\xa1\xd5\xdf\x45\x4e\xdb\x8c\xe9\x5c\x24\x6d\x36\x61\x04\xaf\x1a\x4c\xc9\x20\x83\xe4\x3a\x6f\xd3\x19\xde\x87\x41\x93\x47\xd0\x77\x28\xbb\x05\x41\x1f\xfe\xfb\x75\x1f\x82\xd1\x03\x26\x73\x83\x41\xb4\x55\xa8\xb3\x9c\x24\x94\xc1\x4c\x32\xc6\xfe\xf3\xa9\x8d\xf3\x50\xf0\xbc\x14\x53\x8b\x9d\xb2\x5c\xa3\xff\x17\x59\x3e\x06\xe3\x31\x1a\xbf\x86\xe5\xd1\x86\xa4\x7b\x06\xbe\x57\x25\xb5\xc6\x56\xf0\x93\xb9\x06\xa3\x56\x9c\x03\x48\xa2\xf9\xaf\xda\xea\x47\xbb\x74\x74\x00\x06\xfb\x65\x24\xbe\xe8\x65\x80\xe1\x01\xa4\xd5\x82\x86\x9a\xf4\xa7\xd0\xcc\x95\x00\xe9\x5d\x6d\x65\xfd\x38\x17\x89\xe1\x52\xbc\xc7\x25\x04\xae\x96\xde\x30\xad\xd1\xe8\x80\x7c\xc5\x7d\xe6\xba\x21\xe0\xc2\xc8\x6f\x0f\x86\x50\x36\xfd\x1f\x6d\x23\x38\x8c\x00\x95\xa2\x0c\x69\x95\x18\xe4\xe9\xca\xd4\xdf\xef\xe4\x3e\x4f\x5d\xae\xae\xcf\x6b\x19\x8f\x62\x5f\x96\xae\x83\x7a\x4d\xf0\x09\x0e\x81\x94\x0e\x23\x9f\x5f\xf0\xe8\x91\x1d\x0c\xe0\x17\x41\x7b\x0f\x2a\x9b\xd0\x05\xfd\xe7\xe6\x16\x12\x29\xb4\x81\x14\x93\x9c\x29\x4c\x81\x4d\xe4\x02\xfd\x1a\x8f\x78\x6d\xfc\x30\xec\x14\x14\x17\x64\x4f\x75\x30\x38\x53\xfc\x42\xc1\xf3\xb5\xce\x2a\x14\xe6\x92\xa5\x2d\x37\x91\x6b\x4a\x97\xf8\x79\xc8\xf9\x44\x31\xb5\xfc\x5e\x17\x35\xc4\xb5\x9c\x53\x06\x55\x3c\x8a\x4f\x25\x4b\xc7\x56\x42\x58\x92\xc7\x99\x0e\xfa\x6d\xb0\x6f\x6e\x3e\x5e\x8c\x4e\xcf\x8f\x86\xc1\xa7\x30\x8a\x5e\x8a\x45\xa7\xb1\x35\x92\xf8\x39\x13\x57\x98\xf1\x3c\x34\xaf\x3e\x7c\x63\xf4\xd5\xa2\xb6\x31\xb0\x53\x38\x3a\x26\x8e\xce\x2e\x2f\xfe\xf6\xf1\xfc\xe4\xec\x72\xb3\x95\xe8\x6b\x1a\x59\xe0\x3f\x3f\xdb\x28\x98\xb1\x23\x28\x8c\x5a\x42\x21\xb9\x30\x10\xa6\x38\xe5\x02\x53\x98\x2c\x61\x81\x4a\x73\x29\xfa\x30\xd7\x73\x96\xe7\x4b\x18\x62\x91\xcb\x25\x49\xdd\xd2\xfe\x86\x12\xdd\xbc\x7b\xb1\xe2\xc8\x78\x18\x9f\x88\x2f\x98\x18\x4b\x72\x2c\x85\x96\x39\x86\xcf\xca\x24\xe1\xe3\xd6\x1e\xd9\x24\xb7\x14\x37\x7d\x92\x46\x99\x4c\xd3\xc7\x2c\xcf\x4b\xbd\x7e\xe5\xe6\xf6\x92\xcf\x50\xce\x4d\x18\x38\x83\x6c\xdd\xf7\xce\x40\xa5\x5e\x0a\x1c\xc1\x0c\x5f\x38\x60\xb9\xd5\xcf\x37\x00\x4b\xc1\x66\x3c\xb1\x40\xe5\xd4\xa3\xa4\xe0\x28\x6d\xd6\x13\x93\x15\x55\xce\xef\xd6\xdf\x5f\xe0\x6a\xa5\x5a\x40\x53\x8b\x43\x40\xd8\x91\x1e\xd8\xcf\x87\x36\xf9\x5d\xd7\xb5\xbf\x0f\x6f\x47\xef\x4e\xce\xe0\xec\xe8\xf2\xe4\x6a\x04\x1f\x8f\x8e\xdf\x1f\xbd\x1b\xc1\xc9\x87\x8f\xe7\x17\x97\xe3\x56\x89\x14\xba\x0f\xbb\xc5\x5d\xe6\xea\xe3\x3b\xf9\xd1\x75\xcb\x6f\x97\xa4\xb1\x2e\x58\x82\xcd\x6a\x59\xf7\x73\xa4\x73\x71\x97\xf9\x20\xfe\xc8\xcc\x2d\x41\x37\x17\x29\x2a\x10\xd5\xd2\x92\xca\xf5\x75\x65\xee\x85\x52\xf1\x8c\x0b\x0b\xea\x3d\xd3\x96\x4a\xe8\xaa\xba\xdd\x88\x62\xf5\x3a\xda\xf1\xca\x1e\xc0\x22\xe3\x95\x2d\x4b\x6e\xad\xcb\x81\xdb\xa9\x9f\x29\x18\xf4\x3d\x29\xb1\x6c\x10\x55\x89\xe9\xa7\xc7\xcb\xd9\x44\xe6\x97\x14\x7f\x07\x30\x63\xc5\xb5\x36\x8a\x8b\xec\xd3\xab\x96\x78\x72\xd9\xe3\x53\xb9\xe6\x72\x59\xa0\xde\x40\x4d\xf3\x35\x35\x45\xbe\xd9\x44\x6e\x09\x6a\xfa\x2b\xa6\x36\x51\x5f\x31\x55\xd2\x56\x8d\xa8\xf7\xf0\x94\xa7\x0f\x7d\xd8\x9d\x5a\x0f\x93\xb1\xe3\x79\x92\xa0\xd6\xd3\x79\x9e\x2f\x6d\xdf\x9d\x92\x21\xba\xd1\x15\x0c\x06\x70\x94\xd2\xf1\xa6\x8a\x72\x57\x48\x50\xd9\xc0\xee\x64\x00\x74\x50\x8c\xe9\xfb\xb4\x0a\x68\xf2\x9c\x91\xa0\x2d\xa4\x60\x08\x53\x2f\xe6\x46\x4c\x57\x3a\xda\xae\xe7\xe9\xc3\x4a\x9f\x5b\xd0\x3d\x83\x96\x1f\x5b\x12\x2b\x4f\x02\x8c\x79\x26\x98\x99\xab\x9a\xae\x1a\x69\x13\xd2\xf2\x03\x90\x71\xa3\xa9\xb2\xe4\xf6\x63\x49\xf6\x54\xe9\xbe\x3a\x48\xe3\x46\xe8\x5c\xaf\xd0\x8b\x1a\x86\x2d\xec\x2e\x7d\x58\x6f\xf1\x4d\x97\xd2\x81\xc6\x54\xfe\x7c\x27\x6d\xe8\xb5\xfd\x37\xb4\xfd\x05\xb9\x90\x81\x3d\x29\x30\x7b\x76\x2a\x4f\x11\x5d\x77\x99\xb8\xd9\xed\x90\x79\x66\xad\x8a\x26\xa6\x1a\xb5\xca\x37\x36\xc4\x57\xf9\xc6\x3c\xcb\x30\x80\x1f\x59\x62\xa4\x5a\x3e\x47\xbc\xe4\xdf\x20\xe5\x98\xa7\x9b\xc2\xdf\x12\x3c\x6e\xef\x24\x0b\xd8\x75\x47\x35\xe7\x9a\x97\xed\xde\xec\x9b\xc4\xa5\x5b\xd2\x70\x8f\xcb\xf5\x86\x7f\x6e\x44\xb2\x56\x4a\xb2\x16\x5d\x57\x11\x56\xc1\x9b\xac\x80\xf7\x8a\xe5\x73\x3c\x58\x5d\x81\xe3\xd6\xa2\xad\x51\x73\x76\x38\xd8\x12\x17\xa7\x1e\xb4\x97\xcd\xd9\x0c\xda\xc2\x81\xb6\x60\x15\x6a\x57\x2c\xe7\x29\x15\xbd\x16\x6c\x8b\xb5\x72\x16\x6c\x2d\x6e\x54\x1b\x57\xa1\xb6\x60\x2b\x60\x6b\x54\x8b\xcf\x9e\xa8\x59\x2e\x3e\x7f\x03\xc0\x35\xff\xad\x11\x26\x83\xaf\xbb\xca\x39\x88\xb7\x30\xbd\x8b\x71\xb5\x6b\xdb\x86\x86\x6a\x81\xaf\xdc\xe5\x95\xd8\xaa\x26\x98\xd6\xb8\x86\xa2\xee\x51\x5b\xbb\xad\xeb\x65\xed\x7e\x1d\xf4\xd7\x9a\xe2\xb6\x72\x3e\xb5\xbc\xfe\xc3\x76\x27\xd5\xd1\xa8\xd1\x95\x39\x54\x4a\x45\xf7\xf7\x7b\xdd\x93\x8d\x6b\x67\x46\x67\xc3\xf5\xcd\xcc\xf6\x4d\x5e\x79\xbc\xbf\xf1\x87\x9c\x6d\xda\xbd\x72\x4d\x7d\x30\xfa\x07\x34\x7e\xab\x14\xdd\xb2\x05\x04\x10\xa6\xa0\x24\xb8\xee\xd4\xc8\xb2\x59\x7a\xfa\xee\x2e\xd1\x37\xf5\xd5\x05\x09\x9f\xe8\xd5\x4d\x62\x49\x01\xa7\x1e\x3b\xaf\xc3\x41\xdd\xf2\xfd\x33\x3a\x3e\x1f\xbb\x7f\xb8\xd7\xf3\x01\xfb\xef\x16\xeb\x5f\xbb\xc5\x5a\xb5\x25\x51\xee\x1c\x02\x2b\x0a\x14\x69\x28\x4c\xb1\xb9\xc0\xb5\x6b\x6d\xab\xd2\x3e\x2b\x1b\xab\x6b\x6d\xb7\xd2\x36\x72\x8a\x56\x91\x0a\x24\x68\x55\x1d\x6d\x55\xd1\xf5\x97\x40\x16\xda\xf3\xe1\x7b\x3f\xed\xeb\x1c\xda\x17\x0d\x02\xec\x0e\xdd\x5d\x4f\xf7\x16\xc1\x1e\xbb\x5d\xd9\x6a\xf1\x69\xdf\x74\x3d\xbb\xb1\x3a\x1f\x5e\x0c\x57\x88\xbf\x18\x42\x22\x85\x61\x7c\xb3\x02\x28\xec\x30\xa6\xa5\x7c\xaa\x73\x1d\x3e\x87\x5e\xfe\x63\x6f\xa7\x71\xc7\xef\x32\x70\xe2\x0a\xd4\xb0\xe2\xfe\x1e\x97\x47\x4a\xb1\xa5\xf5\xd1\x8e\x5d\xc0\xa7\x30\x93\xa9\x5d\x01\xff\xe7\xc7\xad\x2b\x0b\xc5\x85\x99\x42\xf0\x9b\xf8\xcd\x5e\xeb\x78\xfa\xd2\xc3\xf4\xad\xa2\x79\xfd\xb0\xf7\xd0\x87\x80\x24\xda\xb9\xfa\x6a\xb6\x6b\xfb\x10\x78\x65\xb2\x6c\x27\x7c\xeb\x61\xc1\x5f\x99\x6e\xdc\x3f\x9a\x17\x83\x1a\x5c\x9d\x6a\xb9\x63\x52\xdd\x90\x30\xd4\xf1\x19\xde\x1f\xdb\x17\xab\xb0\xe3\xc1\x17\x42\xca\xe3\x5b\xde\x03\xa7\x93\x37\xc4\x51\xe0\x7d\x68\x5f\xcc\xe2\xb7\xf3\xe9\x14\x55\x64\xa7\x7e\x58\x3d\xb5\xa3\x95\xed\x80\xdd\xe8\x19\xde\x5f\x20\x4b\x51\x85\x8e\x75\xa8\xad\x0a\xe4\x5c\xbe\x80\x6b\xd2\xf5\x6d\x2e\x93\xbb\x31\xff\x8a\xe5\x2b\x85\x36\x0a\xd9\x8c\x78\xb8\x57\x37\x62\x72\xfe\xe3\xdb\x70\xd2\x07\xbe\xb8\x3e\xf8\x14\xf5\x76\x2c\xa2\x68\xcd\x75\xcf\x70\x44\x33\x74\x83\xa1\x1f\x19\x9b\x74\xe4\xdf\xea\xfa\xa0\x55\x42\x72\x51\x24\x4e\x1d\x5b\xfa\x3c\xfb\xb1\x95\xe7\xc6\x1f\xc7\x07\x5e\x7e\x1f\x2e\x0e\xc0\xcb\x79\x72\xa8\xd5\xb7\x50\x5c\xc6\xc7\xb2\x58\x86\xe9\xe4\x4d\xbf\x66\x1a\xfd\xff\x76\xc0\xee\x64\x5f\x55\xc5\x2a\xfb\xca\x8b\x06\x4c\xe9\xe4\x4d\xd4\xdb\xe9\xba\x68\x67\xa7\xcb\x67\xe7\xa9\xb7\xe3\xf5\x69\xaa\xf3\x43\x1f\xb2\xaf\x6a\x6b\x0e\xd9\x57\x15\x1f\xe7\x52\x63\x18\xf5\x4a\x82\x74\xf2\x43\xfc\x96\x9c\x17\x96\xb7\x91\xf5\x89\x72\xd8\xe8\x92\xdc\xee\x06\x55\xfd\xfd\xd5\x5d\x75\xeb\x5e\xfb\xb4\x3a\x6d\x3d\xf3\xad\xdb\x1e\x9f\xba\xc9\xd3\xd8\x1d\xca\x34\xb2\x6d\x99\x6a\x27\x91\x23\xab\x2e\xaf\xd6\xef\x92\x1b\xda\xb0\xae\xbc\x90\xec\x03\x69\x8c\xac\x18\x1c\xb3\x3c\x8f\xdc\x90\x6d\xfe\xad\x73\x69\x23\x57\xd9\x7c\x86\xc2\xc0\x98\x09\x6e\x96\x70\x7c\x8b\x89\x7d\xec\xe4\x53\xc8\x51\x58\x4e\x71\x49\x74\xca\xb5\x89\xe0\xaf\x24\x34\x47\xe1\xf4\x3e\x52\x99\x2e\x9f\xba\x5a\x37\xc8\x17\x8c\x6b\x0c\x03\xe6\xd7\x06\x7d\x08\x8c\x94\x30\x63\x62\x09\xe5\xa0\x86\x82\x6a\x47\x4a\x1d\x40\x85\xca\x9e\x2e\x1f\xc5\xda\x7b\x63\xe4\x73\x7a\xbd\x66\x7f\xf9\x2e\xcd\xa6\x78\xff\x3d\x8a\xb5\x9a\x4e\xe6\x6a\xba\x3b\x13\x56\xca\x34\x1a\x4d\xd7\xad\xd4\xb1\x57\xf9\xe1\x3f\x89\x3f\x6b\xdc\xa4\x50\xa5\x61\x8d\x41\xeb\x72\x16\x8f\x1e\xcc\x98\x67\x25\x91\x6a\x52\x54\x99\xd9\x82\x28\x6c\x50\x44\xf1\xe8\x81\xb6\xec\x70\x8b\xa3\x4e\x03\xb1\x2f\x1a\xed\x32\x82\x21\x91\xf3\x3c\x05\x21\x0d\xb8\xb1\x0a\x3a\xd8\x4b\x41\x4e\x3b\xa8\xb5\xb4\x5b\x03\x61\xd9\x3d\xe9\x7b\x6e\x92\x5b\x58\x90\x05\x2d\xbb\xe2\xd0\x2c\x0b\x8c\xbc\x82\xfe\xca\x9e\xc5\x67\x88\xa9\xfe\xc0\x8a\x82\xf2\xbb\x6a\x52\x13\xa6\xd1\x43\x45\x73\x98\x5e\x2e\x0b\x2c\x1f\xe1\x0f\xaa\xae\xae\x85\xec\x61\x17\xdb\x70\x11\x35\x3b\x2d\xcf\xbc\xc1\xba\xa2\x2c\x39\x76\xf8\x75\xf4\xef\x2c\x8a\xda\x86\xbc\x9d\xf3\xdc\x9c\x88\x4b\xc5\x84\xce\x19\x41\x73\x81\xbf\xcf\xb9\xaa\x9f\x57\x5b\xb2\x3d\xf9\xcf\x63\xb2\xec\xbb\x8d\x4a\x71\xca\xe6\xb9\x39\x58\xeb\x7c\x7b\x13\x97\x48\xe1\x1f\x61\x28\x06\x2a\x97\xdb\xb9\x19\xd7\x33\x46\x9e\xdb\xa7\x90\xc0\x84\x5a\xa1\x3d\xdd\x87\x4c\x1a\xd8\xbb\x2c\x53\xa7\xa1\x48\xd0\x87\xc5\xb3\x47\xc1\xa7\x4e\x26\x29\x32\xa3\x0f\xbb\xaa\x4a\xa5\x0b\xdf\x0c\x6e\xc8\x26\x47\xe2\x72\x49\x75\x72\x49\x35\x06\x2d\x34\xaa\x95\x4b\xad\xa6\xda\x4e\xa3\x39\x45\x41\xd2\xab\xca\x52\x6a\xd0\x78\x15\xcf\x4c\x45\xf9\xba\xf1\xf3\x0c\x2a\xbb\xb6\xf4\x77\x0e\x45\xd5\x0f\x2e\xa6\xf1\x3b\x14\xa8\x98\x41\xc7\x74\x6c\x1b\x23\x08\x54\x50\xfb\xae\xb9\x3d\x3c\xbf\xaa\x69\x25\x52\xd8\xe6\x79\xa4\xb2\x92\x21\x0b\x3a\x01\x87\xbf\x57\x1a\xbf\x81\xe6\xd9\x6e\xcc\x45\x96\x63\x19\x01\xd4\xfa\xe2\x83\x81\x7d\x60\xc6\xe0\xac\x30\x54\x12\xfd\x9c\xb9\x65\xf6\xab\xbf\x7a\xb1\x51\x73\xc5\xf2\x76\xfd\x39\xa7\x3d\xe7\x52\xda\x5d\x27\x54\xaf\x23\x4f\xba\xba\xe6\xac\x0a\x3c\x37\xe2\x6a\x4e\x19\x7d\x30\x65\x3c\xc7\xd4\xee\xa0\x7e\xc5\x6b\xb0\xe5\xe1\x70\xef\x32\x82\x7d\xd8\x5b\x04\x7d\x50\xaf\xad\x2a\x51\xe7\x70\xe6\x17\x38\x65\xab\x54\xc8\x35\xb6\x60\xb8\xbc\xe5\xba\xae\x62\xb7\x4c\xc3\x6c\x9e\x1b\x5e\x54\xd0\x68\xd8\xf7\x17\x30\x04\xb0\x3d\x23\x31\xf8\x79\x0c\xcc\x36\xed\xb6\x19\x5e\x89\x64\x22\x67\x05\x33\x7c\xc2\x73\x6e\x96\x5e\xde\x17\x7d\x3e\xf9\xb2\x02\xb7\xf3\x09\xf1\x0f\x3f\x5f\x7f\xfa\xfc\x07\x80\x73\xcf\xe3\xed\x6a\xed\x7e\xe7\x52\xdb\xc2\xb4\xe6\x99\xb0\x59\xec\x7e\x85\x43\x07\x5f\x8f\x5f\x0b\x3b\xff\xa1\x9d\x99\x7d\xd8\xbd\x59\x9b\x98\x1e\x48\x9f\x8c\xae\xed\x78\x96\x92\x50\xdd\xd9\x59\x0c\xe2\x31\xfa\x17\x67\x4f\x44\x6e\x6c\x7c\x8d\xaa\x45\xeb\x70\xf8\x8e\x10\xda\x4b\x9f\xc7\x50\x43\x76\x5b\x93\x16\x3c\x75\x70\xb5\xab\x6a\x13\x80\xf2\x94\x4a\x89\x99\x82\xb4\x9e\x6d\x47\xa4\x43\xc0\x65\x4a\xf4\xfc\x88\xdf\x89\xd2\x95\x31\x2a\xca\xe4\xd4\x7d\x1b\x46\x56\x6a\x45\xc1\x44\x5a\xca\x9a\x0b\xff\xb0\x1e\x37\x6b\xd1\x9f\x5a\x67\x4a\x3f\x50\x20\xff\x52\x8a\xab\xad\x6b\xd8\xf6\xd4\xeb\x35\xca\xff\x37\xbf\xf0\xd6\x0b\x8c\x58\xfb\xbc\xf4\xac\x39\xaf\xde\x82\xfc\xef\x59\x34\x30\x01\xcc\x76\xf7\x7c\x92\x57\x25\xdb\xee\x6d\xde\x6f\x52\xad\x7f\x85\xda\xb6\x47\x2f\xc5\x6e\xdb\xa4\x2f\xdc\xcf\xbb\xe8\x9c\xba\xfe\xbe\xde\x4a\xf7\xbf\x1a\xd8\x5c\x81\x17\xee\x87\x5d\x1b\x8e\xd0\x7f\x4a\xe9\x5d\x78\x25\xa2\xf6\x05\x8f\xaf\xb9\xb5\xbf\xbd\xfb\xca\x8f\x14\xd3\x8c\x8a\x66\x0a\x3f\x31\xae\x34\x4c\x30\x97\xf7\x3d\x7b\xe5\xbb\xff\xf7\x00\x00\x00\xff\xff\x82\x6d\x70\xb0\x0e\x2b\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 11022, mode: os.FileMode(420), modTime: time.Unix(1532895396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

