// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/debugger.gs
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/hard_reserved
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/soft_reserved
// compiler/templates/vm_file.go.tmpl
package computil

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _debuggerGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\x49\x2d\xc8\xc9\xaf\xd4\xd0\x54\xa8\xe6\x52\x50\x70\x49\x4d\x2a\x4d\x77\xce\xcf\x2b\xce\xcf\x49\xd5\xd0\xb4\xe6\xaa\x05\x04\x00\x00\xff\xff\x61\x33\x1d\xaf\x27\x00\x00\x00")

func debuggerGsBytes() ([]byte, error) {
	return bindataRead(
		_debuggerGs,
		"debugger.gs",
	)
}

func debuggerGs() (*asset, error) {
	bytes, err := debuggerGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "debugger.gs", size: 39, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x5d\x6b\xdb\x4c\x10\x85\xef\xf5\x2b\xce\x2b\x1c\x90\x88\x2d\xbf\xcd\x65\xc0\x17\x2d\x49\x3f\x68\x53\x0a\x6d\xd2\x8b\x90\x9a\xb5\x34\x16\x5b\xdb\xbb\xf2\xec\xca\x1f\x08\xfd\xf7\x32\x5a\x19\xe2\x14\x0a\x2d\xc6\x37\xd2\xee\x68\xf6\x99\x73\xb4\xc3\x54\x2a\x5f\xa8\x92\xb0\x52\xda\x44\xd1\xbc\x36\x79\xb7\x4c\x52\x34\x11\xb0\x51\x8c\x6d\x09\xb7\x37\x79\xf6\x5d\x69\xff\x8e\x6d\x5d\x45\x40\xd3\x8c\xc0\xca\x94\x84\xc1\x74\x88\x41\xc5\x1a\xd7\x13\x0c\xb2\x7b\xa3\xd7\x5f\x58\x5b\xd6\x5e\x93\x43\xdb\xfe\x9e\xbb\x59\x49\x6a\xa2\x4d\x41\x3b\x0c\xb2\xaf\x96\x3d\x15\x0f\x77\xae\xa3\xa4\xe1\xc8\xb6\xcc\x5e\x17\x45\xf2\x2a\x8d\x80\xd2\x42\x54\xf5\x82\x80\x82\xe6\x24\xa2\xb2\x1b\x6b\x28\x49\xbb\x98\x6a\x1a\x01\x67\x1f\x6e\xd0\xb6\x82\xff\x4c\xdb\xe7\xa1\x3e\x4d\xcf\x5f\x64\x4e\x26\x30\x7a\xd9\x83\x01\x26\x5f\xb3\xe9\x36\x6d\xf7\x24\x66\xa1\x1d\x1d\xca\xfa\xcd\xdb\xda\xe4\x5e\x5b\xf3\x91\xf6\x88\xf5\xaa\xb2\xec\xa7\xca\x39\xf2\x2e\x3e\xaa\x28\x8c\xff\x8e\xeb\x1c\xf3\x6e\xb3\x4f\xb6\x2c\x89\xb3\x5b\x66\xcb\xf3\x24\xee\xde\x08\x48\x6d\x4a\x04\x2a\xe6\x96\xf1\x70\x87\x0b\x77\x8d\x8b\x4d\x3c\x44\xfc\x9c\x12\x0f\xa5\x50\xfa\x27\x23\x7f\xe1\xc3\x79\x65\x0a\xc5\xc5\x74\xa9\x67\xac\x78\x7f\x22\x47\xe6\x27\xe5\x9d\xa3\x03\x1f\x3d\xff\x2c\xde\x2a\xa6\xa5\x55\xc5\x69\xbc\x88\xe0\x1e\x28\x86\xce\x71\x29\x46\x79\xbd\xa1\x53\x37\x57\xa0\x9e\xad\xb1\x72\xd6\x95\x3f\xb5\x87\x40\x3d\x4b\x13\xd1\x8e\xf2\xda\x9f\xe8\x16\x02\x4c\x1c\xfc\x9b\xec\x20\xa1\x69\x40\xa6\xc0\xe8\x30\x39\x65\x4e\xbf\xfc\xd0\xf6\xa3\xbd\x4c\x16\xe0\xda\xd0\x10\x33\x3c\x3e\xc9\x2a\x85\xf3\x2c\x12\x44\xb9\xfc\xc1\x6e\x92\x87\x79\x3d\xeb\xed\xcc\x1e\xf5\x13\x7e\x4c\xb0\xe8\x76\x0b\x59\x4a\x28\x0a\x2a\xd6\x72\x20\x40\x92\xff\x77\x57\x57\x52\xda\x0d\x31\xed\xc3\xb9\x35\x9b\xec\xde\xac\x6b\xeb\x29\x59\xe3\xf2\x90\x3a\x4b\x71\x89\xb5\x24\x07\x57\x70\xa2\x72\x3c\xc6\x68\x34\xc2\x37\x65\xca\x25\x15\x78\xaf\x34\x3b\xbc\xa1\xa5\xdd\x46\xe3\x71\x14\x45\xbf\x02\x00\x00\xff\xff\x69\x61\xb1\xb4\xaf\x06\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hard_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2f\x4e\x2e\xca\x2c\x28\xe1\x4a\x4f\xcd\x33\x48\xce\x4c\x49\xe5\x72\x0f\x76\x0e\xf2\x0c\x08\xe1\xf2\x0f\x09\xf1\xe7\xca\x4d\xcc\xcc\x8b\x8e\xb6\x2a\xcf\x2f\x4a\xb1\x8a\x8d\xd1\x8b\x89\xd1\x57\x88\xd5\xb2\xe7\x72\xcd\x4b\xcf\xcc\x4b\xc5\x22\xe1\x57\x9a\x93\xe3\x93\x9f\x9e\x9e\x5a\x84\x45\x32\x15\xac\x0b\xaa\x99\x2b\x2f\xb5\x9c\x2b\x46\x2f\x3d\xdf\x0a\x10\x00\x00\xff\xff\xce\x8b\x78\x8c\x82\x00\x00\x00")

func hard_reservedBytes() ([]byte, error) {
	return bindataRead(
		_hard_reserved,
		"hard_reserved",
	)
}

func hard_reserved() (*asset, error) {
	bytes, err := hard_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hard_reserved", size: 130, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1531448235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _soft_reserved = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcf\xcf\x4f\xcf\x49\xe5\x4a\xcf\x2f\xc8\x4e\xe7\x0a\x0d\x88\xe0\xca\x2f\x29\xc9\xe7\xf2\x2f\x29\xc9\x07\x04\x00\x00\xff\xff\xfd\x5e\x58\x46\x1a\x00\x00\x00")

func soft_reservedBytes() ([]byte, error) {
	return bindataRead(
		_soft_reserved,
		"soft_reserved",
	)
}

func soft_reserved() (*asset, error) {
	bytes, err := soft_reservedBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soft_reserved", size: 26, mode: os.FileMode(420), modTime: time.Unix(1531615133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x7b\x4f\x23\xc9\xb5\xff\x1b\x7f\x8a\x73\xfb\xc2\x55\xf7\xa8\x69\x33\x7b\xa3\x44\x22\x21\x12\x60\xef\x2c\x3b\x0c\x8c\x30\x3b\xab\x88\x1d\xb1\xe5\xee\xe3\xa6\x86\x76\x55\x6f\x55\x19\xf0\x20\x7f\xf7\xe8\x54\x55\x3f\x6d\x18\x36\x44\x89\x14\xe5\x0f\x84\xbb\xfa\xbc\x1f\xbf\x3a\x55\x5d\xb2\xf4\x96\xe5\x08\x73\xc6\xc5\x60\xc0\xe7\xa5\x54\x06\xc2\x01\x40\x30\x5d\x1a\xd4\xc1\x60\x2b\x48\xe5\xbc\x54\xa8\xf5\x30\xff\xca\xcb\x80\x5e\xa5\x6a\x59\x1a\x39\x64\xf4\xbe\x79\x4c\x79\x79\x83\x8a\x38\x50\xa4\x32\xe3\x22\x1f\x4e\x99\xc6\x3f\xfe\xc1\x12\xcd\xe6\x86\x5e\x71\x19\x0c\xe8\x31\xe7\xe6\x66\x31\x4d\x52\x39\x1f\xe6\x28\xf6\x52\x9e\xe1\x30\xd7\xa9\xe2\xa5\x19\xa2\xc8\xb9\xc0\xa0\x47\xa6\xe4\x14\x95\xb9\x55\x7c\x8e\x62\x28\x8d\x91\x44\xf0\xf8\x08\x7c\x06\xdb\xc9\x0f\x4c\x8f\x70\xba\xc8\x73\x2e\xf2\xb1\x60\xd3\x02\x33\xd8\x5d\xad\x06\x00\xdf\xd0\x95\x59\x2e\x32\x9b\x84\xed\x02\x8a\x0c\x2c\x5f\x4b\xf2\xa9\xfc\xfd\x72\x0b\x49\x52\x87\xda\x30\x91\x31\x95\xf5\xc4\x0f\x00\x86\x43\x38\xb1\xd1\xe6\x22\x87\x39\xd3\xb7\xda\x29\x55\x4c\xe4\x08\xdb\xbc\x8c\x61\x7b\xce\x61\xff\x00\xb6\x93\x53\x2e\x6e\x51\x25\x1f\x98\xbe\xc5\xcc\x71\x69\xf0\x56\x3c\x3e\x12\x5d\x72\x86\xf7\x87\x05\x67\xb4\x0c\x01\xad\xf1\x12\x56\x2b\x1f\x22\xaf\x35\x1a\x0c\xee\x98\xb2\xd9\x25\x5b\xbc\xa6\xeb\x18\xb6\x71\x3e\xc5\xcc\xe9\x1a\xd3\xcf\x5a\xfa\x70\x68\x15\xd8\xf7\xc9\xc9\x88\xa4\xdf\xc8\x22\xd3\x60\x6e\x10\x32\x66\x18\xcc\xa4\x02\xfb\x3a\xc3\x0c\x66\xbc\xc0\x16\xc3\xb9\xe2\xf9\x19\x9b\x63\xdb\xd6\xb6\xa8\x03\x67\xaa\x5b\x1a\x91\x34\x32\xb9\x1b\xaa\x68\x30\xf0\x46\x78\xa6\x7b\xc5\x4a\xa7\x3f\x47\x81\x9a\x6b\xf8\xf4\xc1\x5a\x61\x69\x2a\x75\x66\x59\x62\x9b\x4b\x1b\xb5\x48\x0d\x3c\x0e\x00\xc6\xf0\xc6\x55\x58\x32\xb6\xff\x06\x00\xef\xe1\xea\x33\xd5\xfb\x0b\x2b\x6a\x04\x6f\xaa\xba\x49\x46\xfe\x47\xd7\xea\x95\xb5\xfa\x0c\xef\x5b\x26\xa4\x0a\x99\xc1\xae\xe9\x6a\x21\x0c\x9f\xa3\xb5\xdf\x55\x4e\xd7\x8d\xd9\x42\xa4\x5d\x31\x61\x04\x6f\x5a\x42\xc9\x21\x83\x94\x3a\xef\xd3\x19\xde\x87\x41\x5b\x46\x10\xbb\x28\x3b\x86\x20\x86\xff\xdf\x8b\x21\x18\x3f\x60\xba\x30\x18\x44\x2f\x2a\x75\x56\x90\x86\xaa\x98\x49\xc7\xc4\xff\x3e\xb5\x75\x1e\x0a\x5e\x54\x6a\x1a\xb5\x33\x56\x68\xf4\xff\x22\x2b\xc7\x60\x32\x41\xe3\x79\x58\x11\x3d\xd3\x74\x6b\xc1\xf7\xa6\x64\xd6\xd9\x3a\xfc\xe4\xae\xc1\xa8\x53\xe7\x00\x92\x68\xfe\xaf\xf1\xfa\xd1\xb2\x8e\xf7\xc1\x60\x5c\x55\xe2\x37\xb3\x0c\x30\xda\x87\xac\x66\x68\x99\x49\x7f\x0a\xcd\x42\x09\x90\x3e\xd5\x56\xd7\xf7\x0b\x91\x1a\x2e\xc5\x7b\x5c\x42\xe0\xb0\xf4\x9a\x69\x8d\x46\x07\x94\x2b\xee\x3b\xd7\x2d\x01\x17\x46\xfe\xfe\x62\x08\x65\x3b\xff\xd1\x4b\x14\x87\x11\xa0\x52\xd4\x21\x1d\x88\x41\x9e\x6d\x6c\xfd\xdd\x5e\xef\xf3\xcc\xf5\xea\xd3\x7d\x2d\x93\x71\xe2\x61\xe9\x2a\x68\x78\x82\xcf\x70\x00\x64\x74\x18\xf9\xfe\x82\x47\x1f\xd9\xe1\x10\x7e\x12\xb4\xf7\xa0\xb2\x0d\x5d\xd2\x7f\x6e\x6e\x20\x95\x42\x1b\xc8\x30\x2d\x98\xc2\x0c\xd8\x54\xde\xa1\xe7\xf1\x11\x6f\x9c\x1f\x85\x3d\x40\x71\x45\xb6\x6a\x8a\xc1\xb9\xe2\x19\x05\x2f\x9e\x4c\x56\xa9\xb0\x90\x2c\xeb\xa4\x89\x52\x53\xa5\xc4\xbf\x87\x82\x4f\x15\x53\xcb\xd7\xa6\xa8\xa5\xae\x93\x9c\xaa\xa8\x92\x71\x72\x2a\x59\x36\xb1\x1a\xc2\x8a\x3c\xc9\x75\x10\x77\x83\x7d\x7d\xfd\xf1\x62\x7c\x7a\x7e\x38\x0a\x3e\x87\x51\xf4\xad\x5a\x74\x16\x5b\x27\x49\x9e\x73\x71\x83\x1b\xeb\xa5\xf9\xe9\xc3\xef\xac\xbe\x46\xd5\x4b\x1c\xec\x01\x47\xcf\xc5\xf1\xd9\xe5\xc5\xdf\x3e\x9e\x9f\x9c\x5d\x3e\xef\x25\x7a\x4c\x23\x0f\xfc\xef\xb5\x8d\x82\x19\xbb\x82\xc2\xa8\x25\x94\x92\x0b\x03\x61\x86\x33\x2e\x30\x83\xe9\x12\xee\x50\x69\x2e\x45\x0c\x0b\xbd\x60\x45\xb1\x84\x11\x96\x85\x5c\x92\xd6\x17\xfa\xdf\x32\xa2\xdf\x77\xdf\x44\x1c\x99\x8c\x92\x13\xf1\x05\x53\x63\x49\x8e\xa5\xd0\xb2\xc0\x70\x0d\x26\x29\x3e\x8e\xf7\xd0\x36\xb9\xa5\xb8\x8e\x49\x1b\x75\x32\xbd\x3e\x66\x45\x51\xd9\xf5\x33\x37\x37\x97\x7c\x8e\x72\x61\xc2\xc0\x39\x64\x71\xdf\x27\x03\x95\xfa\x56\xe1\x08\x66\xf8\x9d\x0b\x2c\xb7\xf6\xf9\x01\x60\x29\xd8\x9c\xa7\x36\x50\x05\xcd\x28\x19\x38\x4a\xdb\xf5\x24\x64\x03\xca\xf9\xdd\xfa\xf5\x00\xd7\x18\xd5\x09\x34\x8d\x38\x14\x08\xbb\x32\x00\xfb\xfb\xc0\x36\xbf\x9b\xba\x76\x77\xe1\x68\xfc\xee\xe4\x0c\xce\x0e\x2f\x4f\x3e\x8d\xe1\xe3\xe1\xf1\xfb\xc3\x77\x63\x38\xf9\xf0\xf1\xfc\xe2\x72\xd2\x81\x48\xa1\x63\xd8\x2e\x6f\x73\x87\x8f\xef\xe4\x47\x37\x2d\x1f\x2d\xc9\x62\x5d\xb2\x14\xdb\x68\xd9\xcc\x73\x64\x73\x79\x9b\xfb\x22\xfe\xc8\xcc\x0d\x85\x6e\x21\x32\x54\x20\x6a\xd6\x8a\xca\xcd\x75\x55\xef\x85\x52\xf1\x9c\x0b\x1b\xd4\x7b\xa6\x2d\x95\xd0\x35\xba\x5d\x8b\x72\x33\x1f\xed\x78\xd5\x0c\x60\x23\xe3\x8d\xad\x20\xb7\xb1\x65\xdf\xed\xd4\x6b\x06\x06\xb1\x27\x25\x91\x2d\xa2\xba\x31\xfd\xeb\xc9\x72\x3e\x95\xc5\x25\xd5\xdf\x3e\xcc\x59\x79\xa5\x8d\xe2\x22\xff\xfc\xa6\xa3\x9e\x52\xf6\xb8\x8a\x6b\x48\x6e\xc7\x75\xc6\xb3\x87\x18\xb6\x67\x36\xae\xa4\x62\xb2\x48\x53\xd4\x7a\xb6\x28\x8a\xa5\x9d\x76\x33\x62\xd7\xad\xbd\x78\x38\x84\xc3\x8c\x0e\x15\x75\x6d\xb9\xf6\x45\x65\xcb\xa9\x57\x77\xd0\xb3\x3d\xa1\xe7\x59\x5d\x46\x14\x2f\x23\x41\x5b\x47\xc0\x90\x27\x5e\xcd\xb5\x98\x6d\x0c\xaf\xe5\xe7\xd9\xc3\xc6\x48\x5b\x57\xbd\x80\x4e\xf4\x3a\x1a\xeb\xf8\x01\x4c\x78\x2e\x98\x59\xa8\x86\xae\x5e\xe9\x12\x12\xfb\x3e\xc8\xa4\x35\xca\x58\x72\xfb\xb3\x22\x5b\xd5\xb6\x6f\x2e\x8d\xa4\x95\xb0\xab\x0d\x76\xd1\x36\xfd\x02\xbf\xab\x1c\x56\x1b\x6b\x5d\xf6\x16\x11\x28\x33\x3e\x09\xd5\x99\x72\xd3\x2e\x42\x3c\xae\x23\x1b\x90\xef\x94\xab\xdb\x0c\x6c\xc1\x07\xf1\x93\x2e\xb9\x5e\xe0\x33\x2b\xeb\x7f\x6c\x7b\xd7\xb3\x45\x0b\xd6\x5c\x74\x2a\x43\x77\x77\x07\xfd\xd1\xc0\xe1\xc1\xf8\x6c\xf4\x34\x1a\xbc\x1c\x25\xab\xf9\xf8\xda\x4f\x09\x2f\xc1\xcb\x8a\xa7\x99\x2c\xfe\x05\xc8\xb9\xc9\xd0\x17\x62\x28\x80\x30\x25\x75\xc0\x55\xaf\xdd\x2b\xb4\x59\xbd\x1a\x66\xfd\xae\x58\x9f\x30\xf8\x54\x6f\x46\xd9\x8a\x02\x4e\x7d\xec\xbc\x0d\xfb\x0d\x66\xfe\x3b\x20\xd3\xd7\xee\x2b\xc0\xf2\xbf\x68\xf9\x1f\x80\x96\x7d\xb8\xa4\x47\xea\x9d\x03\xa0\xe3\x8e\xc8\x42\x61\xca\xe7\x01\xae\x8b\xb5\x1d\xa4\x5d\x83\x8d\xcd\x58\xdb\x47\xda\x56\x4f\x11\x17\x99\x40\x8a\x36\xe1\x68\x07\x45\x9f\x3e\x45\xd9\xd0\x9e\x8f\xde\xfb\xd7\x1e\xe7\xd0\x5e\x09\x52\xc0\x6e\xd1\x1d\x96\xfa\x63\xb8\x9d\x5b\x1d\x6c\x75\xe4\x74\x8f\x8a\x6b\x47\xbe\xf3\xd1\xc5\x68\x83\xfa\x8b\x11\x1d\x1c\x0d\xe3\xcf\x1b\x80\xc2\x2e\xd3\xb9\xd2\xe9\x27\x9c\xeb\xc9\x39\xf0\xfa\x1f\x07\x5b\xad\x4b\x32\xd7\x81\x53\x07\x50\xa3\x5a\xfa\x7b\x5c\x1e\x2a\xc5\x96\x36\x47\x5b\x96\x81\xcf\x60\x2e\x33\xcb\x01\x7f\xf2\xeb\x36\x95\xa5\xe2\xc2\xcc\x20\xf8\x45\xfc\x62\xcf\x45\x9e\xbe\xca\x30\x3d\xd5\x34\x7b\x0f\x3b\x0f\x31\x04\xa4\xd1\xbe\x6b\xee\x36\xfa\xbe\x8f\x80\xd7\x2e\xcb\x6e\xc3\x77\x6e\xe6\xfc\x9d\xc3\xb3\xfb\x47\xfb\x64\xad\xc1\xe1\x54\x27\x1d\xd3\xfa\x88\xc1\x50\x27\x67\x78\x7f\x6c\xaf\x7c\xc3\x5e\x06\xbf\x51\x52\x3e\xbe\xd5\x45\x4a\x36\x7d\x4b\x12\x05\xde\x87\xf6\xca\x39\x39\x5a\xcc\x66\xa8\x22\xfb\xea\xbb\xcd\xaf\xb6\xb4\x4a\xe9\x8d\x5b\x3d\xc3\xfb\x0b\x64\x19\xaa\xd0\x89\x0e\xb5\x35\x81\x92\xcb\xef\xe0\x8a\x6c\x3d\x2a\x64\x7a\x3b\xe1\x5f\xb1\xba\xe6\xd3\x46\x21\x9b\x93\x0c\x77\x6d\x4d\x42\xce\xbf\x3f\x0a\xa7\x31\xf0\xbb\xab\xfd\xcf\xd1\x60\xcb\x46\x14\xad\xbb\xee\x1e\x9b\x68\x46\x6e\x31\xf4\x2b\x13\x93\x8d\xfd\x65\x77\x0c\x5a\xa5\xa4\x17\x45\xea\xcc\xb1\xd0\xe7\xc5\x4f\xac\x3e\xb7\xfe\x38\xd9\xf7\xfa\x63\xb8\xd8\x07\xaf\x67\xe5\xa2\xd6\x1c\xe3\xb8\x4c\x8e\x65\xb9\x0c\xb3\xe9\xdb\xb8\x11\x1a\xfd\xf9\x65\x81\xdd\xca\xbf\xaa\x5a\x54\xfe\x95\x97\xad\x30\x65\xd3\xb7\xd1\x60\xab\x9f\xa2\xad\xad\xbe\x9c\xad\xd5\x60\xcb\xdb\xd3\x36\xe7\xbb\x18\xf2\xaf\xea\xc5\x12\xf2\xaf\x2a\x39\x2e\xa4\xa6\x83\x6c\x45\x90\x4d\xbf\x4b\x8e\x28\x79\x61\x75\x9c\x1f\xd9\x2b\x1f\x2a\xe0\x51\x6b\x4a\x72\xbb\x1b\xd4\xf8\xfb\xb3\xbb\x2b\xd2\x83\x66\x77\xbc\xae\xb7\xc6\xea\x9e\xfc\xa9\xed\x71\xd5\x6f\x9e\xd6\xee\x50\xb5\x91\x1d\xcb\x54\xb7\x89\x1c\x59\x7d\xfa\x7b\x7a\x97\x7c\x66\x0c\xeb\xeb\x0b\xc9\x3f\x90\xc6\xc8\x5a\x00\x1d\xd9\x23\xb7\xf4\x89\x15\x0b\xd7\x72\xb4\x91\xab\x7c\x31\x47\x61\x60\xc2\x04\x37\x4b\x38\xbe\xc1\xd4\x7e\x2d\xe0\x33\x28\x50\x58\x49\x49\x45\x74\xca\xb5\x89\xe0\xaf\xa4\xb4\x40\xe1\xec\x3e\x54\xb9\xae\xee\x8a\x3b\x57\x30\x17\x8c\x6b\x0c\x03\xe6\x79\x83\x18\x02\x23\x25\xcc\x99\x58\x42\xb5\xa8\xa1\x24\xec\xc8\x68\x02\xa8\xa3\xb2\xa3\xab\x5b\xe5\xee\xde\x18\xf9\x9e\x7e\xda\xb2\xbf\xbc\xca\xb2\x19\xde\xbf\xc6\xb0\xce\xd0\xc9\x1c\xa6\x33\x5b\x3a\xb5\x31\xad\x41\xd3\x4d\x2b\x4d\xed\xd5\x79\xf8\x5f\x92\xcf\x5a\x87\x22\x42\x1a\xd6\x5a\xb4\x29\x67\xc9\xf8\xc1\x4c\x78\x5e\x11\xa9\x36\x45\xdd\x99\x9d\x10\x85\x2d\x8a\x28\x19\x3f\xd0\x96\x1d\xbe\xe0\xa8\xd3\x8a\xd8\x17\x8d\x96\x8d\xc2\x90\xca\x45\x91\x81\x90\x06\xdc\x5a\x1d\x3a\xd8\xc9\x40\xce\x7a\x51\xeb\x58\xf7\x44\x08\xab\xe9\x49\xdf\x73\x93\xde\xc0\x1d\x79\xd0\xf1\x2b\x09\xcd\xb2\xc4\xc8\x1b\x98\x32\x8d\xfd\x58\xec\x7b\xd3\x3b\xf1\x5a\x93\xd2\x63\x8a\xda\x97\xf6\x2c\x39\x5a\xf0\xc2\x9c\x88\x4b\xc5\x84\x2e\x18\x19\x78\x81\xbf\x2d\xb8\x6a\xbe\x12\x74\x74\x7b\xf2\x1f\x27\x97\xcb\x12\x5b\x26\xac\x19\xd1\xd3\x1a\xde\x45\xed\x21\xae\xfe\x00\x31\x63\x8b\xc2\xec\x3f\x99\x02\xfb\xe9\x29\x95\xc2\xdf\x25\x52\x26\xea\xc0\xdb\x77\x73\xae\xe7\x8c\xe2\xb7\x4b\x89\xc1\x94\x06\x92\x1d\x1d\x43\x2e\x0d\xec\x5c\x56\x05\xdc\x32\x24\x88\xe1\x6e\xed\x6e\x7b\xd5\xab\x67\x45\x6e\xc4\xb0\xad\xea\x82\xbe\xf0\x23\xd9\x33\x35\xed\x48\x5c\x45\xab\x5e\x45\xab\xd6\xa2\x0d\x8d\xea\x54\x74\x67\xb4\xb5\xaf\xd1\x9c\xa2\x20\xed\x75\x7f\x57\x16\xb4\x3e\xee\xe4\xa6\xa6\xdc\x6b\x7d\x65\x24\xf0\xb3\x00\xdc\x3b\x9a\xd4\xdf\x0d\x67\xc9\x3b\x14\xa8\x98\x41\x27\x74\x62\xc7\x13\x08\x54\xd0\xe4\xae\x0d\xd2\xdd\x99\x7e\xad\x9c\xc3\xae\xcc\x43\x95\x57\x02\x59\xd0\x2b\x38\xfc\xad\xb6\xf8\x2d\xb4\x4f\x58\x13\x2e\xf2\x02\xab\x0a\xa0\x01\x14\x1f\x0c\xec\x02\x33\x06\xe7\xa5\x21\x60\xf2\xef\xcc\x0d\xb3\x8f\xfe\x02\xc4\x56\xcd\x27\x56\x74\x51\xe0\x9c\x90\xff\x52\x5a\xec\x0f\xd5\x5e\xe4\x49\x37\x77\xfe\xa6\xc2\x73\x2b\xae\xf3\xab\xea\x83\x19\xe3\x05\x66\x76\x1f\xf3\x1c\x7b\x60\x9b\xf4\x60\xe7\x32\x82\x5d\xd8\xb9\x0b\x62\x50\x7b\xd6\x94\xa8\x77\x44\xf2\x0c\xce\xd8\xba\x15\x0a\x8d\x9d\x30\x5c\xde\x70\xdd\x60\xc9\x0d\xd3\x30\x5f\x14\x86\x97\x75\x68\x34\xec\xfa\x6b\x10\x0a\xb0\x3d\xa9\x30\xf8\x71\x02\xcc\x8e\xce\x76\x24\xdd\x18\xc9\x54\xce\x4b\x66\xf8\x94\x17\xdc\x2c\xbd\xbe\x2f\xfa\x7c\xfa\x65\x43\xdc\xce\xa7\x24\x3f\xfc\xf5\xea\xf3\xaf\xff\x40\xe0\xdc\x57\x9e\x2e\x66\xba\xcf\xb5\x8d\x2f\x4c\x6b\x9e\x0b\xdb\xc5\xee\x63\x32\x1d\x3f\x7d\xfc\x3a\xb1\xf3\x3f\xba\x9d\x19\xc3\xf6\xf5\x93\x8d\xe9\x03\xe9\x9b\xd1\x6d\xfe\x6b\x2d\x09\xf5\xcd\x99\x8d\x41\x32\x41\xff\xe1\xc4\x13\x51\x1a\x5b\x8f\x51\xcd\xf4\x54\x1c\x5e\x51\x42\x3b\xd9\x7a\x0d\xb5\x74\x77\x2d\xe9\x84\xa7\x29\xae\x2e\xaa\xb6\x03\x50\x9d\x15\xa9\x31\x33\x90\x36\xb3\xdd\x8a\x74\x11\x70\x9d\x12\xad\x1f\xb4\x7b\x55\xba\xb1\x46\x45\xd5\x9c\x3a\xb6\x65\x64\xb5\xd6\x14\x4c\x64\x95\xae\x85\xf0\xdf\x87\x92\x36\x16\xfd\x53\x71\xa6\xca\x03\x15\xf2\x4f\x95\xba\xc6\xbb\x96\x6f\xab\xc1\xa0\x05\xff\xe4\x18\xa3\xce\xc9\xe0\x07\xc6\x95\x86\x29\x16\xf2\x7e\x60\x6f\xdf\x76\xff\x1e\x00\x00\xff\xff\xc7\xf1\xd4\xc6\xda\x23\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 9178, mode: os.FileMode(420), modTime: time.Unix(1531451591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"debugger.gs": debuggerGs,
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"hard_reserved": hard_reserved,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"soft_reserved": soft_reserved,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"debugger.gs": &bintree{debuggerGs, map[string]*bintree{}},
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"hard_reserved": &bintree{hard_reserved, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"soft_reserved": &bintree{soft_reserved, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

