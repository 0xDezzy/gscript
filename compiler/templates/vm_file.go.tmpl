package main

import (
  "bytes"
	"compress/gzip"
  "crypto/aes"
  "crypto/cipher"
	"encoding/base64"
  "fmt"
	"io"

  "github.com/gen0cide/gscript/engine"
  "github.com/robertkrimen/otto"

  {{ range $ns, $pkg := $.GoPackageByNamespace }}
  // Importing dependency package {{ $pkg.Name }} for native dependency
  "{{ $pkg.ImportPath }}"
  {{ end }}
)

const (
{{- range $_, $embed := $.Embeds }}
  // {{ $embed.ID }} holds the data for embedded file {{ $embed.OrigName }}
  {{ $embed.ID }} = `{{ $embed.Data }}`

{{- end }}
)

// {{ $.ID }} wraps the genesis VM for {{ $.Name }}
type {{ $.ID }} struct {
  E *engine.Engine
  K []byte
}

// New{{ $.ID }} creates the genesis runtime for script {{ $.Name }}
func New{{ $.ID }}() *{{ $.ID }} {
  te := engine.New("{{ $.Name }}", "{{ $.ID }}", 30, "Execute")
  o := &{{ $.ID }}{
    E: te,
  }
  return o
}

// {{ $.FunctionKey "import_assets" }} imports assets into the genesis runtime for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "import_assets" }}() error {
  {{ range $eid, $embed := $.Embeds -}}
  // {{ $eid }} = {{ $embed.OrigName }}
  o.E.Imports["{{ $eid }}"] = func() []byte {
    // Unpacker wrapper with const declared above
    return {{ $.ID }}D({{ $embed.ID }})
  }
  {{ end -}}
  return nil
}



// {{ $.FunctionKey "preload" }} imports the runtime preload library for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "preload" }}() error {
  return o.E.LoadScript("preload.gs", o.E.Imports["__PRELOAD"]())
}

// {{ $.FunctionKey "import_script" }} loads the script {{ $.Name }} into the genesis VM
func (o *{{ $.ID }}) {{ $.FunctionKey "import_script" }}() error {
  return o.E.LoadScript("{{ $.Name }}", o.E.Imports["__ENTRYPOINT"]())
}

// {{ $.FunctionKey "execute" }} executes the genesis VM at the entry point (defined by version, usually Deploy())
func (o *{{ $.ID }}) {{ $.FunctionKey "execute" }}() error {
  _, err := o.E.CallFunctionWithTimeout("Deploy")
  return err
}

// {{ $.FunctionKey "import_native" }} injects the dynamically linked native functions into the genesis VM for script {{ $.Name }}
func (o *{{ $.ID }}) {{ $.FunctionKey "import_native" }}() error {
  var err error
  err = nil

  // -- BEGIN NATIVE PACKAGE IMPORTS
  {{ range $ns, $pkg := $.GoPackageByNamespace -}}
  // Importing {{ $pkg.ImportPath }} under namespace {{ $ns }}
  _np{{ $ns }} := &engine.NativePackage{
    ImportPath: "{{ $pkg.ImportPath }}",
    Name: "{{ $pkg.Name }}",
    SymbolTable: map[string]*engine.NativeFunc{},
  }
  {{ range $fidx, $f := $pkg.LinkedFuncs -}}
  // Adding function pointer for native function {{ $pkg.Name }}.{{ $f.Function }} to symbol table
  _nf_{{ $ns }}{{ $fidx }} := &engine.NativeFunc{
    Name: "{{ $f.Function }}",
    Func: o.{{ $.ID }}{{ $f.ID }},
  }
  _np{{ $ns }}.SymbolTable["{{ $f.Function }}"] = _nf_{{ $ns}}{{ $fidx }}
  {{ end -}}
  // Injecting native package into the genesis VM
  err = o.E.ImportNativePackage("{{ $ns }}", _np{{ $ns }})
  if err != nil {
    return err
  }
  {{ end -}}
  // -- END NATIVE PACKAGE IMPORTS
  return err
}

// {{ $.ID }}ODK returns the decryption key for the genesis VM assets
func {{ $.ID }}ODK() []byte {
  return []byte("{{ $.DecryptionKey }}")
}

// {{ $.ID }}D is the decoding function for embedded assets for script {{ $.Name }}
func {{ $.ID }}D(s string) []byte {
  b, err := aes.NewCipher({{ $.ID }}ODK())
  if err != nil {
    return []byte{}
  }
  db1 := new(bytes.Buffer)
  db2 := new(bytes.Buffer)
	src := bytes.NewReader([]byte(s))
  var iv [aes.BlockSize]byte
  stream := cipher.NewOFB(b, iv[:])
	decoder := base64.NewDecoder(base64.StdEncoding, src)
  encReader := &cipher.StreamReader{S: stream, R: decoder}
  if _, err := io.Copy(db1, encReader); err != nil {
    return []byte{}
  }
	gzr, err := gzip.NewReader(db1)
	if err != nil {
		return []byte{}
	}
	_, err = io.Copy(db2, gzr)
	if err != nil {
		return []byte{}
	}
	gzr.Close()
	return db2.Bytes()
}

// Declaring Dynamically Linked Function Wrappers
{{ range $_, $f := $.Linker.Funcs }}
// {{ $.ID }}{{ $f.ID }} is the linker function for {{ $f.GoPackage.Name }}.{{ $f.Function }}
func (o *{{ $.ID }}) {{ $.ID }}{{ $f.ID }}(call otto.FunctionCall) otto.Value {
  // Argument Sanity Checks
  if len(call.ArgumentList) > {{ len $f.GoArgs }} {
    o.E.Logger.Errorf("too many arguments passed to function %s at %s", "{{ $f.Function }}", call.CallerLocation())
    return call.Otto.MakeCustomError("function error", "too many arguments passed into function")
  }
  if len(call.ArgumentList) < {{ len $f.GoArgs }} {
    o.E.Logger.Errorf("too few arguments passed to function %s at %s", "{{ $f.Function }}", call.CallerLocation())
    return call.Otto.MakeCustomError("function error", "too few arguments passed into function")
  }

  {{ range $aidx, $a := $f.GoArgs -}}
  // Native Function Argument #{{ $aidx }}
  var a{{ $aidx }} {{ $a.ExtSig }}
  ra{{ $aidx }}, err := call.Argument({{ $aidx }}).Export()
  if err != nil {
    o.E.Logger.Errorf("could not export argument %d of function %s at %s", {{ $aidx }}, "{{ $f.Function }}", call.CallerLocation())
    o.E.Logger.Error(err)
    return call.Otto.MakeCustomError("function error", fmt.Sprintf("could not translate argument %d into go value", {{ $aidx }}))
  }
  switch v := ra{{ $aidx }}.(type) {
  case {{ $a.ExtSig }}:
    a{{ $aidx }} = ra{{ $aidx }}.({{ $a.ExtSig }})
  default:
    errMsg := fmt.Sprintf("Argument type mismatch: expected %s, got %T", "{{ $a.ExtSig }}", v)
    o.E.Logger.Errorf("argument type conversion error: %s", errMsg)
    return call.Otto.MakeCustomError("function error", errMsg)
  }
  {{ end }}
  {{ range $ridx , $r := $f.GoReturns -}}
  // Native Function Return #{{ $ridx }}
  var r{{ $ridx }} {{ $r.ExtSig }}
  {{ end -}}
  {{ $retLen := len $f.GoReturns }}
  {{ if gt $retLen 0 }}
  // Call the native function
  {{ $f.GenerateReturnString "r" }} = {{ $f.GoPackage.Name }}.{{ $f.Function }}({{ $f.GenerateArgString "a" }})
  {{ if eq $retLen 1 }}
  // Single return context - attempt to return that to VM
  retVal, err := call.Otto.ToValue(r0)
  if err != nil {
    errMsg := fmt.Sprintf("return value conversion failure: %s", err.Error())
    o.E.Logger.Errorf(errMsg)
    return call.Otto.MakeCustomError("conversion error", errMsg)
  }
  return retVal
  {{ else }}
  // This function has multiple returns - injecting into a JS array for single return context compatibility
  jsObj, err := call.Otto.Object(`[]`)
	if err != nil {
    errMsg := fmt.Sprintf("could not make an array object for multiple assignment return")
    o.E.Logger.Errorf(errMsg)
    return call.Otto.MakeCustomError("runtime error", errMsg)
  }

  {{ range $ridx, $_ := $f.GoReturns -}}
  // Return Value #{{ $ridx }}
  err = jsObj.Set("{{ $ridx }}", r{{ $ridx }})
  if err != nil {
    errMsg := fmt.Sprintf("could not add element %d of type %T to js return (err: %s)", {{ $ridx }}, r{{ $ridx }}, err.Error())
    o.E.Logger.Errorf(errMsg)
    return call.Otto.MakeCustomError("runtime error", errMsg)
  }
  {{ end }}
  // Return the generated object
  return jsObj.Value()
  {{ end -}}
  {{ else }}
  // This function has no returns, call the function and return undefined.
  {{ $f.GoPackage.Name }}.{{ $f.Function }}({{ $f.GenerateArgString "a" }})
  return otto.UndefinedValue()
  {{ end -}}
}
{{ end }}