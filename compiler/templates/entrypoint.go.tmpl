package main

import "syscall"

func main() {
  {{ if and $.IsProductionBuild (ne targetOS "windows") -}}
    // gracefully exit when receiving signals that would usually print stack traces
    sigs := make(chan os.Signal, 1)
    signal.Notify(sigs, syscall.SIGQUIT, syscall.SIGILL, syscall.SIGTRAP, syscall.SIGABRT, syscall.SIGSTKFLT, syscall.SIGSYS)
    go func() {
      for {
        _ = <- sigs
        os.Exit(0)
      }
    }()
  {{- end }}
  {{ if $.IsProductionBuild -}}
    // make sure any panics are swallowed to prevent stack traces
    defer func() {
      if r := recover(); r != nil {
        os.Exit(0)
      }
    }()
  {{- end }}
  var wg sync.WaitGroup
  {{- range $_, $pri := $.UniqPriorities }}
  {{- range $_, $vm := (index $.SortedVMs $pri) }}
  wg.Add(1)
  go func() {
    {{ if $.IsProductionBuild -}}
      // make sure any panics are swallowed to prevent stack traces
      defer func() {
        if r := recover(); r != nil {
          os.Exit(0)
        }
      }()
    {{- end }}

    defer wg.Done()
    a{{ $vm.ID }} := New{{ $vm.ID }}()
    if a{{ $vm.ID }} == nil {
      return
    }
    err := a{{ $vm.ID }}.{{ $vm.FunctionKey "import_assets" }}()
    if err != nil {
      a{{ $vm.ID }}.E.Logger.Errorf("Error importing assets for VM %s: %v", "{{ $vm.ID }}", err)
      return
    }
    err = a{{ $vm.ID }}.{{ $vm.FunctionKey "import_standard_library" }}()
    if err != nil {
      a{{ $vm.ID }}.E.Logger.Errorf("Error injecting standard library for VM %s: %v", "{{ $vm.ID }}", err)
      return
    }
    err = a{{ $vm.ID }}.{{ $vm.FunctionKey "preload" }}()
    if err != nil {
      a{{ $vm.ID }}.E.Logger.Errorf("Error for preloading %s: %v", "{{ $vm.ID }}", err)
      return
    }
    err = a{{ $vm.ID }}.{{ $vm.FunctionKey "import_native" }}()
    if err != nil {
      a{{ $vm.ID }}.E.Logger.Errorf("Error importing native VM %s: %v", "{{ $vm.ID }}", err)
      return
    }
    err = a{{ $vm.ID }}.{{ $vm.FunctionKey "import_script" }}()
    if err != nil {
      a{{ $vm.ID }}.E.Logger.Errorf("Error importing script for VM %s: %v", "{{ $vm.ID }}", err)
      return
    }
    err = a{{ $vm.ID }}.{{ $vm.FunctionKey "execute" }}()
    if err != nil {
      a{{ $vm.ID }}.E.Logger.Errorf("Error executing VM %s: %v", "{{ $vm.ID }}", err)
      return
    }
  }()
  {{ end -}}
  wg.Wait()
  {{ end -}}
}

func g(k rune, b []rune) string {
  for i := range b {
    b[i] ^= k
    k ^= b[i]
  }
  q := string(0x22)
  s, _ := strconv.Unquote(q + string(b) + q)
  return s
}

// --- Tangled Hairs Below
//


