// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(436), modTime: time.Unix(1520753530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(436), modTime: time.Unix(1520753530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\x40\x0e\x68\x02\xec\x76\xbb\xd7\x5c\x1f\xf2\x96\xda\x69\x9b\xbb\x4d\xe3\xda\x49\xb6\x40\xb1\x38\x8c\xc5\xb1\xc5\x46\x22\xb5\x24\xe5\xc4\xff\xfd\x81\xa4\xe4\x4f\x49\x91\x65\x29\xfd\xc8\xe5\x31\xa4\x24\xce\x6f\xbe\x7e\x33\x1c\x1f\xb6\xf1\x77\x70\x78\x70\x08\x81\x54\x04\x09\x06\x77\x38\x25\xfb\x8f\x56\x5e\xfc\x2b\x08\x8c\xe9\x14\xce\xb4\x26\x73\x00\xc0\x48\x07\x8a\x27\x86\x4b\x71\x0a\x43\x32\x8a\xd3\x8c\x34\xa0\xfb\x30\x31\x40\xbb\x0f\x26\x4a\xc6\x60\x42\x82\xdb\x4b\xa0\x78\x4c\x8c\x11\x83\x09\x8f\x08\xb4\x91\x8a\x5e\x1e\x00\x60\x6a\x42\xa9\x4e\x61\x4a\xe2\x55\xc0\x19\xc1\x51\x68\x4c\xa2\x4f\x7f\xfb\x6d\xca\x4d\x98\x8e\x5f\x06\x32\xfe\x2d\x5f\x3c\x3e\x80\x5c\xb2\x53\x27\xa7\x7d\x81\x9a\xea\xd3\x03\x00\x80\x5f\x21\xc2\x31\x45\xa7\xfe\xe3\x1f\x31\x26\xf7\x6f\x80\xa9\x34\xf3\x84\x4e\x41\x1b\xc5\xc5\xf4\x00\x40\x91\x49\x95\xd8\x7c\xcc\x1e\xac\x8f\x06\x37\x9e\x7a\xf1\xe5\xaf\xf1\xdc\xd0\x8b\xec\xdf\xfe\xd9\x53\x30\x2a\xa5\xf5\xe7\x49\xa9\x8d\x47\x49\x29\xa9\x8a\x9e\xcb\xe1\x1c\xa2\x60\x32\x1e\xe5\xe7\x5a\x43\xf5\x3d\x09\x52\x68\x1c\xaa\xca\xed\x03\x8c\x92\x10\x41\xa4\x31\x29\x1e\x64\xe2\x80\x9c\x00\x82\x4e\x28\xe0\x13\x4e\x0c\x22\x12\x53\x13\x76\x05\xad\x36\x2a\x22\xb1\x21\x26\x17\xe6\xcd\x49\x29\xac\x33\x8c\xd2\x52\x4d\x3c\x82\xcc\x25\x7f\x20\xd6\x43\x4d\xb5\x21\x8a\xed\x13\x10\xa0\xa6\xe7\x87\xd6\x85\xd8\x72\xcd\x02\x84\x44\x1a\x8f\x49\xc1\x98\xcc\x3d\x91\x80\x98\x0b\x40\xc1\x20\xc6\x87\xae\x60\x88\x79\x19\x06\xab\x9b\xf0\x61\x6f\xa0\xb8\x03\xa0\x14\xa5\xcf\x52\xbd\x9d\x1b\xd2\x9b\x20\x7d\xbe\x1a\x82\xb9\x97\x60\xdd\x1c\x50\x29\x9c\x6b\x30\x72\x4a\x26\x24\xd5\x59\x8c\xb2\x27\x39\xb3\xdf\xaa\x0a\x37\x8b\xed\xe3\x1a\xdb\xeb\xe3\x54\x15\xd2\x72\xb0\xac\xc7\x25\xa3\x04\x83\x6d\xbc\xdc\x12\xa0\x98\x43\x2a\x78\x20\x19\x41\x10\xa2\xc2\xc0\x90\xd2\x20\x53\x93\x39\x99\xb3\xda\x0e\x5d\x6b\xb7\xe8\xde\xcc\xb1\xae\xc6\x93\x54\x07\x68\x4a\x02\xd0\x5b\xd4\x2b\xa1\x25\xdb\x2b\x15\x4c\x52\x11\xd8\x1d\x3f\xb8\xf4\x7d\x92\x3b\xc8\xcf\xe8\xe7\x43\xe0\xb2\xff\xaf\x4d\x99\x07\xa4\x26\x52\xc5\x80\xc2\xae\x1e\x1d\x43\x88\x3a\x04\x29\x80\xa1\xc1\xae\xc4\x65\x95\xbc\xa4\x4d\x89\x47\x1f\xce\x7e\xaf\x10\xd9\x2e\x57\xc8\x8c\x61\x18\x16\xca\x6b\x17\xbe\x3b\x59\xdf\xbe\x39\x39\x17\x36\x80\x15\xd8\x35\xbd\x39\x01\x72\x8b\x36\x77\x2e\x53\xc3\x8f\x2c\x6c\x9f\x2a\x84\x65\x94\x0b\x9b\xf9\xb3\x91\x4f\x2c\x78\x03\x0f\xae\x4f\xce\x1f\x28\x38\x5f\xa1\xe3\xb5\x29\xfa\x35\x8f\x49\x1b\x8c\x93\x6d\x6a\x65\x5c\x6d\xa3\xe7\xda\x50\xfc\x42\x43\x90\x2a\x45\xc2\x80\xc9\x9f\x00\x2e\x80\x12\x19\x84\x60\xbd\x07\x4d\x7b\xc1\x01\xbe\xfc\xb5\x2b\x31\xca\xf8\x56\x89\x94\x1f\x30\xda\xe2\x8e\x23\x23\x13\x27\x61\x2e\xd8\xed\xa5\xaf\xe8\x02\x29\x0c\x17\xa9\xb5\x11\x0b\x6b\xda\x6e\x9c\xdf\x55\xb6\xb1\x94\x51\x91\x68\xed\x14\xbe\xb6\xa2\xb6\x42\x76\x56\x51\x9f\x3b\x04\xa9\x27\xe3\x18\x05\xdb\xd4\x41\xb6\xaa\x33\x2b\x83\xc0\x6f\xd3\xfb\xc1\x6d\x05\x2a\xf6\xca\x31\x6a\xea\xc5\xac\x3c\xb8\x2c\x76\x06\x31\x3b\x53\x53\xbd\xed\x8f\x7e\x73\x79\xf4\x52\x64\xae\xc6\x5f\x29\x30\x1b\x8f\xde\x5e\x5a\x61\x87\xa4\x13\x29\x34\x55\x19\xeb\x3b\xa9\xee\x9a\xc1\x06\x33\x8e\x80\xd6\x1d\xef\x5c\x95\x18\x45\x3f\x30\x90\x09\xdf\x7c\x7d\x49\xfd\xb3\x5f\x20\x6c\xc7\xdc\xad\x1f\xb9\xce\x4f\xdb\x7e\x74\x08\x87\x70\x7d\xd5\xbf\x82\xa3\x88\x8f\xff\x6b\x3f\xf1\x72\x2a\x8f\x17\xb6\xf2\xa7\xe2\x86\xde\xf1\x68\x2b\xeb\xb9\x05\xed\xd2\x90\x8f\x6a\xab\xb9\xce\xe7\x3e\x77\xde\x7b\x6e\x42\x17\x05\xa7\x7c\x46\x02\x12\x52\x31\xd7\x9a\x4b\xb1\xa7\x0f\x4e\xfc\x99\x0a\x4c\x27\x41\x13\xd6\xb0\x9b\x3a\xed\xaa\xe5\x3b\x49\xc5\x9b\x26\x56\x5d\x5f\xdb\x97\x68\x0b\x92\x29\xea\x60\x3c\x6a\x66\xf6\x74\x8d\xf2\x6d\x4f\x26\xf3\x22\x7d\x0d\x09\x99\xf6\xe9\x48\x0a\x43\xc2\x68\x5b\x66\x4a\x41\x5e\x4d\x28\x18\x04\x32\xe1\xa4\x81\x1b\xa7\x3e\x21\x6d\xfd\x5e\x53\x7f\xf5\x19\x4d\xb9\xde\xb4\x0a\x06\xf5\x54\xc7\xb4\xa9\xb9\x73\x77\xbd\x35\x06\x7e\x48\x49\x84\x81\xf3\x95\xe2\x62\x6f\x44\xa8\x82\xd0\x31\x44\x07\xf9\x44\xaa\x25\x59\xb4\xf8\x2b\xff\x06\x0d\x84\x41\x08\x5c\x68\x83\x22\xb0\xfb\x52\xc1\xac\xb2\x4c\x88\x26\x6f\x0b\xc0\xd0\x9f\xde\xa9\x06\x63\x99\x0a\xd7\x36\xf0\xab\x3a\x7f\x15\x83\x96\x75\x94\xad\x3c\x06\x7b\x8c\x26\xa8\xa3\x9e\xec\x98\x31\x89\xcd\x6c\xf6\x08\x97\xcd\xe4\xcc\x30\x6f\x12\xc7\x1b\xeb\xf9\x2c\x49\x48\x30\xab\xe6\xc2\x66\xd8\x19\xf3\x45\x80\x77\x97\xf5\x90\x68\x75\x45\x5e\x97\xb8\x00\xb9\x45\xed\xb4\x16\xf9\x5a\x76\x8d\x25\x64\xc5\x9e\xb1\x8e\xd9\xb2\x7c\xfa\x4e\xf0\x42\xc6\x46\xab\xe5\xe1\x0e\xf7\x21\x8d\xe0\xea\x53\x44\xc5\x49\xd7\xaf\x2c\x22\x08\x9a\x05\x68\x56\x14\x90\x2a\x3f\x0a\xa0\x58\x7c\xe7\xa9\x10\x6b\x3d\x9e\x22\x2b\x4f\x64\x98\xb3\x21\x13\x66\xb1\x33\x93\x7b\xdf\x8a\xbb\x6d\xd9\xf3\x20\x51\xca\x31\x3a\x09\x52\x16\xb8\xf3\x07\xae\xcd\x56\x7c\xea\x85\x14\xdc\x69\xe0\xb9\x4b\x01\xb9\x6d\x9b\x20\xfa\xa2\xf0\xdb\xc3\xb7\x10\x62\x0d\x3f\x7b\xbc\x0e\xd1\xeb\x29\x42\x43\x7d\xae\xb6\xc0\x73\x0b\x16\x20\xc6\x15\x05\x46\xaa\x79\xb9\x13\xfe\xc0\x3e\xd8\x62\xd1\xc2\x85\xad\x55\xb9\x14\x1d\x54\x2e\xcb\xba\x65\xf1\x15\x57\xbc\xb4\x78\x7c\x41\xa6\xb3\xd6\x45\xff\xe3\xe8\x53\x4a\xda\x1e\x7b\xd3\xd0\x2e\xb4\x4e\x9d\x9d\xf5\x3f\x8e\xe0\xef\x94\xac\x9d\xad\x38\x28\x37\x2f\x2c\xc7\x5b\x94\xfa\xbb\x9b\x97\x70\x63\x08\x05\xd6\x65\x50\x4d\xa9\x94\x8d\xad\x71\xb7\xbf\xed\xe1\x77\xb3\x44\x14\xfa\x9e\x4a\x6f\x1e\xaa\xdd\x59\xa5\xc2\xf0\xb8\x99\x47\x7f\xb8\xbe\x1e\xbc\x27\x53\x9c\x4f\x8c\xe2\xb3\x15\x5a\xee\x8a\x59\xe1\x1e\x39\xd2\xc7\x96\x80\x24\xd2\x33\xca\x1c\xe6\xdb\xb9\x4a\x75\x21\xce\x33\xbb\xf2\xea\xd5\xef\xf5\xb0\x4e\x55\xb4\x2b\xed\x45\x93\xea\x9e\x6f\x42\x37\x61\xbc\x4d\x13\xd1\x3e\xd8\x0f\xa4\x36\xff\x1e\x5d\x7d\xdc\x04\xfe\x5a\xa1\xd0\x31\xb7\xb9\x07\xec\x3a\x48\xd7\xd6\xf2\xbd\x83\x9b\xe1\x1f\xb9\xc5\xab\x34\x2b\x73\xac\x46\x32\x08\xc0\x5d\x9b\xfa\x0d\x5b\x5e\xf0\x04\xea\x59\xd9\xf5\x55\xcb\xcd\x02\xbf\x4b\x2d\xaa\xf5\x06\xdf\x93\x6a\x72\x34\xfa\xe0\x7b\x72\xeb\x0e\x94\x3a\xca\x90\xf5\x08\x41\x0a\xc0\x2c\x8a\x40\x28\xb5\x71\x3d\xc3\xd1\xe8\xc3\x5a\x00\xb3\xea\x54\xa4\xd3\xc8\xc0\x91\x36\xec\x2a\x35\x20\x45\x34\x3f\x7e\x09\x37\x9a\x34\x8c\xa5\x09\x21\x41\xad\xef\xa5\x62\xee\xc1\x3b\x9a\x3b\xfd\x92\x30\x3c\x40\x97\x4f\xa4\xfb\xbe\xee\x40\xf1\xf6\xd8\x67\x82\x0d\xa4\xaa\x13\x08\x83\x5a\x6d\xca\x54\x93\x12\x15\x33\x55\x6b\x09\xde\x0b\x5e\x63\xeb\x1d\xed\x3c\xd0\x50\x62\x40\x4f\x10\x84\x47\xa4\x66\x34\x40\x13\x5e\xcd\x48\x59\x67\x1e\x6d\x5f\x99\xa0\x72\x5c\xd4\xf9\xfa\x08\xee\x69\xac\xed\x43\xca\x5b\x55\xc6\xb2\xa4\x32\x70\xc4\x68\x82\xd6\x7c\x4e\x4e\x5e\x1f\xbb\x56\xca\x3f\x3e\x2f\xff\xf9\xfa\xd5\x71\x3e\xa7\x23\x27\xa0\x29\x90\xc2\x35\xbf\x2c\x57\x0b\xec\x07\x16\xd1\x3e\x7b\xbd\x92\xd2\x10\x03\x2e\xd6\xb8\x5c\x07\xa6\x95\xd4\xb3\xa9\x9a\x95\xa9\x55\x85\x4c\x37\x5f\x58\xdd\xe0\xda\x47\x83\x17\xfa\xba\x37\xb0\x6e\x71\x21\x6e\xf4\x56\x26\x1d\x19\x47\x8e\xef\x43\x37\xf9\x63\x89\xb0\x90\x4b\x72\x7c\xdd\x1b\x78\xd5\x71\x0d\x38\xc3\x88\x8f\xb3\x1e\x58\xda\x49\xf0\xae\x02\xba\x3c\x2c\xd7\xbd\x1c\x5b\x02\x72\xd3\x6f\x0a\xc8\x4d\xff\x27\x04\xe4\x3d\x99\x3f\x64\x80\xd1\xc5\x60\xab\xf2\x7c\x4f\xde\xb5\x7d\x3b\x4c\x4e\xe0\x22\x01\x64\x4c\x91\xb6\x21\xdf\x0a\x6e\xb3\x82\x8d\xbd\x2d\x30\xda\x12\xfa\x99\x7f\x6e\x3b\x68\x2e\x6f\x8b\xaa\x64\xbb\x3c\xeb\x9d\xf9\x77\x14\x4a\x67\x05\xb8\x3c\xeb\xe5\xdf\xf1\x4d\x5b\xb2\x0e\x49\x6a\x82\x41\x76\x1b\x82\x02\x2e\x06\xb3\x93\x7c\x57\xd7\xd2\x3e\x5d\xa0\x6f\xa7\x3c\xb2\x65\x97\xd4\x9d\x55\x5d\xef\xb8\x60\x03\x25\x83\xb7\xf3\x6c\xc4\x79\xb3\x1a\x58\x10\x94\x01\xcf\x5a\x8f\x59\x46\x50\x32\x08\x48\xeb\x5f\x80\x7b\xb5\xe6\xff\x80\x00\x85\xf3\xec\x71\xd6\xac\xff\x65\x51\xfa\x5b\xdf\xf6\x10\xb9\x26\x75\x43\x9f\x96\xba\xc4\xa5\x95\x0c\x76\x9f\xd3\x6e\x76\xef\x69\xbf\xd5\x2c\x67\x08\x6d\x30\x8a\x46\xee\x26\xd9\x52\x00\x1e\x6c\xa1\x9e\xed\xd1\x4b\xe6\x38\xe6\x02\x6d\xd1\xeb\xe6\x69\xfc\x25\xb4\x5e\x3c\xdb\xfc\xd6\xb0\x14\xc9\x7a\xf9\xb6\x26\x81\x63\x5c\x27\x11\xce\xab\x54\xb3\xba\x7b\x89\xc4\x6e\x8a\xe4\x1e\xb5\x66\x5c\xcc\x32\xad\x4c\x1b\xc5\x9e\x90\x73\xb1\xa7\x80\xbf\x0a\xd7\xd2\xdc\xa4\x4c\x43\xc9\x65\xf2\x88\xe0\x32\xf9\x6e\xe5\xde\x47\xe7\x43\x8a\xe5\x8c\x2a\x65\xbf\x11\x7c\xe9\x8a\xdf\x25\x00\xca\x0a\x81\x0d\x8d\x9e\x4f\x05\x46\xdb\xf7\xb2\xc2\x5d\x28\x68\xb7\xea\xdb\x0f\x59\x14\xca\x23\x7c\xfb\xa1\x5b\xe7\x47\x29\x8a\xc3\x8f\x86\xea\xf6\x99\xfd\x30\x15\x82\x8b\xa9\x4d\x8c\x5b\xd4\x66\xb8\xbc\x53\x5a\x70\x37\x2e\x7c\x0b\x32\x51\xa4\x6d\x4d\x2e\xa6\xb6\xb2\xe2\x33\x82\xc1\x45\x7f\x31\xcb\x17\xcd\xed\xa1\x84\xd7\xe7\xde\x08\x56\x4d\xb6\x25\x9c\x15\x90\x3a\x7b\xca\x4e\x4b\xda\xf7\x64\x06\xcb\x24\x5c\xca\x24\xec\x66\x4f\x25\x3a\x37\xac\xdd\x4c\xe6\x31\x06\xd1\x1d\x72\xe7\x62\x76\x8b\xaa\xdc\xd6\x20\xc6\xc4\x42\x46\x62\xc6\xa5\x12\x31\x09\x03\x33\x54\x1c\x6d\x95\x64\x5f\xa1\xb3\x1b\x62\xae\x20\x90\x4a\x71\x9d\x48\xc1\xac\x1d\xba\x21\xc7\xb5\xe9\x94\x4e\x2c\x6e\xe6\x4f\xbf\x66\x71\x31\x26\x5f\x3c\x76\x35\xeb\x09\x8f\x42\x95\xe9\x38\x69\x56\x69\x68\x11\x20\xed\x9b\x51\x81\x74\x9d\xfc\x40\x60\x44\xd1\x24\x9b\xe5\x29\xf9\x4d\xa4\x63\xda\x68\xc2\x7c\x20\x60\x2b\xb4\x64\x43\xb4\x16\x87\xfd\x46\xca\x6a\x46\x9a\x4a\xaa\x58\xe5\x2e\x52\x37\xbb\x8d\x0c\x63\xb9\xd5\x74\xed\x85\x28\xa6\xe4\xc1\x59\x8e\x64\xf9\x36\x99\x3d\x61\x5b\x48\x34\xa2\xc9\xbb\x4f\x5d\x35\x84\xe6\x52\xb2\x6b\x5e\x18\x7a\x57\x8c\x27\x42\x6d\x20\x96\xcc\xff\x62\xd1\x06\x2c\xef\x4e\xdf\x06\xa6\x62\xf9\xe3\x85\x20\x45\x98\x55\x9b\x55\xe3\x6b\xee\x4b\x8b\xc9\xbc\x74\x40\x7f\xc5\xc4\xd0\xd7\xb9\xee\x77\x8e\xdb\x40\xba\xa1\xd1\x6f\x69\x6f\xfe\x78\x95\x00\xae\x22\x9d\x09\xbd\x93\x81\xee\x0c\x72\x3b\x4d\x8b\xc3\x83\x43\x50\x34\xe5\xda\xa8\x79\x77\x3f\x4a\x67\x6c\x48\xd3\xff\xd0\xbc\x74\x3a\x6b\x39\xa7\xb8\x38\x8c\xbf\x79\x68\x98\x75\xf2\xb7\x14\x6b\x3d\x5f\xad\x1e\xba\xea\xac\x7a\xaf\x4c\x64\xed\x33\xef\x05\xfa\xe7\x0f\x09\x0a\x46\xac\x42\x0b\x02\x28\xdb\xf4\x7f\x7d\x74\xae\x8f\xb7\xae\x05\x55\xec\x0d\x59\x7b\xea\x99\xa2\xff\xf8\x1d\x63\x1b\xf8\xf7\xff\xbc\x1a\xf6\x8b\xe1\x77\x4b\xcf\x16\xfd\x94\x0b\xf3\xfa\x9f\x1d\xa3\xff\xa9\x1c\xfd\x4f\xcf\x1e\xfd\x37\x27\x1d\xa3\xef\x05\x2e\x1a\x2e\x07\x5c\x43\xde\x5d\x31\xcd\x13\xca\xce\x7f\xa4\x8f\x9f\x93\x2e\x6a\xfc\x5a\x6e\x0f\x6d\xf4\x29\xf2\xda\x28\x1e\xc3\xde\xd0\xc4\x0f\x81\x7b\x87\x20\xdd\x66\x0a\x7a\x1c\xa9\x85\x2e\xbf\x7f\xbc\xbe\x1d\x0d\xf9\x94\x92\x9a\x17\x9b\x5f\x36\xb1\xf8\xf3\xd8\xdf\x1d\xcd\xaf\xc6\x5f\x37\x9e\x19\x66\xdf\x1d\x92\xb9\x5d\x81\xbe\xdd\x6e\xe4\xff\x02\x00\x00\xff\xff\x42\x2d\x50\x00\x37\x4c\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 19511, mode: os.FileMode(436), modTime: time.Unix(1520909902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

