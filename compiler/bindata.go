// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520968804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520968804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520968804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1520054504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x73\xdb\x36\x12\x7f\xf7\xa7\xd8\x69\x6e\x26\x76\xa7\x4d\x93\x36\x97\x07\xbf\xd9\x52\xe2\xf8\x5a\xc7\x8a\x64\x27\x9d\xe9\x74\x3a\x2b\x62\x25\x22\x26\x01\x16\x00\x65\xeb\x3e\xfd\x0d\x00\x52\x7f\x49\x9a\xa2\x48\xc7\x6e\xce\x6f\x16\x00\x02\xfb\xdb\x3f\xd8\x5d\x2c\xf0\xac\x8d\xbf\x83\x67\x07\xcf\x20\x90\x8a\x20\xc1\xe0\x06\xa7\x64\x7f\x68\xe5\xc3\x3f\x82\xc0\x98\x8e\xe1\x44\x6b\x32\x07\x00\x8c\x74\xa0\x78\x62\xb8\x14\xc7\x30\x24\xa3\x38\xcd\x48\x03\xba\x89\x89\x01\xda\x7e\x30\x51\x32\x06\x13\x12\x7c\xba\x00\x8a\xc7\xc4\x18\x31\x98\xf0\x88\x40\x1b\xa9\xe8\xc5\x01\x00\xa6\x26\x94\xea\x18\xa6\x24\x5e\x06\x9c\x11\x1c\x86\xc6\x24\xfa\xf8\xa7\x9f\xa6\xdc\x84\xe9\xf8\x45\x20\xe3\x9f\xf2\xc6\xa3\x03\xc8\x29\x3b\x76\x74\xda\x0f\xa8\xa9\x3e\x3e\x00\x00\xf8\x11\x22\x1c\x53\x74\xec\x27\xff\x80\x31\xb9\x9f\x01\xa6\xd2\xcc\x13\x3a\x06\x6d\x14\x17\xd3\x03\x00\x45\x26\x55\x62\x73\x98\x5d\x58\x1f\x0d\x6e\x8c\x7a\xfe\xc7\x9f\xe3\xb9\xa1\xe7\xd9\xcf\x7e\xec\x31\x18\x95\xd2\xfa\x78\x52\x6a\x63\x28\x29\x25\x55\xd1\xb8\x1c\xce\x21\x0a\x26\xe3\x51\xbe\xae\x35\x54\xcf\x48\x90\x42\xe3\x50\x55\xae\x1f\x60\x94\x84\x08\x22\x8d\x49\xf1\x20\x23\x07\xe4\x04\x10\x74\x42\x01\x9f\x70\x62\x10\x91\x98\x9a\xb0\x2b\x68\xb5\x51\x11\x89\x0d\x32\xb9\x30\x6f\x5e\x97\xc2\x3a\xc3\x28\x2d\xe5\xc4\x3d\xc8\x5c\xf0\x3b\x62\x3d\xd4\x54\x1b\xa2\xd8\x8e\x80\x00\x35\x7d\x7b\x68\x9d\x8b\x2d\xd5\x2c\x40\x48\xa4\xf1\x98\x14\x8c\xc9\xdc\x12\x09\x88\xb9\x00\x14\x0c\x62\xbc\xeb\x0a\x86\x98\x97\x61\xb0\xda\x09\xef\xf6\x06\x8a\x3b\x00\x4a\x51\xfa\x5d\xaa\xd3\xb9\x21\xbd\x09\xd2\xef\x97\x43\x30\xb7\x12\xac\x9a\x03\x2a\x85\x73\x0d\x46\x4e\xc9\x84\xa4\x3a\xb3\x51\x76\x25\x27\x76\xae\x2a\x73\xb3\xe8\x3e\xae\xd1\xbd\x3e\x4e\x55\x26\x2d\x07\xcb\x6a\x5c\x32\x4a\x30\xd8\xc6\xcb\x35\x01\x8a\x39\xa4\x82\x07\x92\x11\x04\x21\x2a\x0c\x0c\x29\x0d\x32\x35\x99\x92\x39\xa9\xed\x50\xb5\x76\xb3\xee\xcd\x14\xeb\x72\x3c\x49\x75\x80\xa6\xc4\x00\x9d\xa2\x5e\x31\x2d\x59\x5f\xa9\x60\x92\x8a\xc0\xf6\x78\xe2\xd4\xf7\x49\xee\x40\x3f\xa3\x7f\x1e\x02\x17\xfd\x7f\x6f\xd2\x3c\x20\x35\x91\x2a\x06\x14\xb6\xf5\xf0\x08\x42\xd4\x21\x48\x01\x0c\x0d\x76\x45\x2e\xab\xf4\x4b\xda\xa4\x78\xf4\xfe\xe4\x55\x05\xc9\xb6\xb9\x82\x66\x0c\xc3\xb0\x90\x5e\xdb\xf0\xe8\x68\x3d\x7d\xf3\xfa\xad\xb0\x06\xac\x40\xae\xe9\xcd\x6b\x20\xd7\x68\xf7\xce\xe5\xd6\xf0\x94\x89\xed\x53\x05\xb1\x8c\x72\x62\x33\x7d\x36\xf2\x81\x09\x6f\xa0\xc1\xf5\x9d\xf3\x3b\x0a\xde\xae\xb8\xe3\xb5\x5d\xf4\x2b\x1e\x93\x36\x18\x27\xdb\xae\x95\x71\xb1\x8d\x9e\x6b\x43\xf1\x73\x0d\x41\xaa\x14\x09\x03\x26\x1f\x01\x5c\x00\x25\x32\x08\xc1\x6a\x0f\x9a\xf6\x8c\x03\xfc\xf1\xe7\xae\x8e\x51\xe6\x6f\x95\x50\xf9\x1e\xa3\x2d\xdf\x71\x64\x64\xe2\x28\xcc\x09\xfb\x74\xe1\x23\xba\x40\x0a\xc3\x45\x6a\x65\xc4\xc2\x9a\xb6\x6b\xe7\x77\xa5\x6d\x2c\x65\x54\x44\x5a\x3b\x81\xaf\x8d\xa8\x2d\x91\x9d\x45\xd4\x6f\x1d\x82\xd4\x93\x71\x8c\x82\x6d\xf2\x20\x6b\xd5\x99\x94\x41\xe0\xbb\xe9\xfd\xe0\xb6\x04\x15\x6b\xe5\x18\x35\xf5\x62\x56\x6e\x5c\x16\x3d\x83\x98\x9d\xa8\xa9\xde\xd6\x47\xdf\xb9\xdc\x7a\x29\x32\x97\xe3\x2f\x14\x98\x8d\xa1\x9f\x2e\x2c\xb1\x43\xd2\x89\x14\x9a\xaa\x84\xf5\x9d\x54\x37\xcd\x60\x83\x19\x47\x40\xab\x8e\x37\x2e\x4a\x8c\xa2\x27\x0c\x64\xc2\x37\x3f\x5f\x12\xff\xec\x67\x08\xdb\x11\x77\xab\x47\x2e\xf3\xd3\xb6\x1e\x3d\x83\x67\x70\x75\xd9\xbf\x84\xc3\x88\x8f\xff\xb2\x53\xbc\x98\xca\xa3\x85\xac\x7c\x56\xdc\xd0\x3b\x1e\x6d\xed\x7a\xae\x41\xbb\x6d\xc8\x5b\xb5\xd5\xbd\xce\xef\x7d\x6e\xbd\xb7\xdc\x84\xce\x0a\x4e\xf9\x8c\x04\x24\xa4\x62\xae\x35\x97\x62\x4f\x1d\x9c\xf8\x35\x15\x88\x4e\x82\x26\xac\x21\x37\x75\xd2\x55\xcb\x6f\x92\x8a\x37\x45\xac\x3a\xbe\xb6\x1f\xd1\x16\x24\x53\x94\xc1\xb8\x57\xcc\xec\xea\x1a\xed\xb7\x8e\x2f\x57\x14\x27\x0d\x99\x66\x28\x4e\xa4\x42\x35\xf7\xec\x43\xc1\x72\x02\x1d\x17\x27\x69\x14\xb9\x3e\xb9\x34\x9a\xd0\xf5\xb1\x93\x37\x73\x64\xcb\x19\x29\x2a\x52\x90\x3b\x31\xb2\x24\x5f\x99\x46\x51\xb5\xac\x74\xc2\xa0\x9e\x4c\xe6\x45\xbc\x19\x12\x32\x8f\xb1\xf5\x0f\x48\x18\x0d\x72\x02\x52\xd0\x92\x11\x81\x4c\x38\x69\xe0\xc6\xb1\x4a\x48\x13\x92\xaa\xa9\x60\x6d\xf0\x43\xab\x60\x50\x4f\xb7\x98\x36\x35\x7b\xee\xae\x58\x8d\x81\x1f\x52\x12\x61\xe0\x8c\x59\x71\x34\x3e\x22\x54\x41\xe8\x5c\x78\x07\xf9\x44\xaa\xa5\x37\xef\x15\xc1\x7d\x41\x03\x61\x10\x02\x17\xda\xa0\x08\x6c\xbf\x54\x30\xcb\x2c\x13\xa2\xc9\xf3\x36\x30\x5c\xd1\x1a\x8c\x65\x2a\x5c\x5e\xc7\xb7\xea\xfc\x53\x0c\x5a\xe6\x51\xd6\x72\x1f\xec\x31\x9a\xa0\x0e\x7b\xb2\x65\xc6\x24\x36\xdd\x8d\x7b\x82\x8d\x8c\xce\x0c\xf3\x26\x1b\x6d\x63\x3e\x9f\x24\x09\x09\x66\xd9\x5c\x98\xad\x3c\x61\x3e\x4a\xf3\xea\xb2\x6e\xfe\x2c\xaf\xc8\xf3\x12\x17\x20\xb7\xc8\x9d\xd6\xb6\xa6\x96\x55\x63\x09\x59\xb1\x66\xac\x63\xb6\x8c\x6f\x1f\x09\x5e\xc8\xd8\x68\xd5\x6a\xef\x70\x60\xd5\x08\xae\x3e\x45\x54\xec\x15\xf9\x96\x85\x05\x41\xb3\x00\xcd\xed\x94\x52\x2d\x36\x53\x14\x8b\x79\x1e\x0a\xb1\xd6\xed\x29\xb2\xf2\x8d\x0c\x37\x1c\x84\x05\xdd\xfb\xa6\x44\xda\xa6\x3d\x37\x12\x25\x9a\xd6\x91\x91\xb2\xc0\xbd\xbd\xe3\xda\x6c\xd9\xa7\x5e\x48\xc1\x8d\x06\x9e\xab\x14\x90\xeb\xb6\x09\xa2\x8f\xda\xbf\x3e\x7c\x0b\x22\xd6\xf0\xb3\xcb\xeb\x10\xbd\x9e\x22\x34\xd4\xe7\x6a\x0b\x3c\xd7\x60\x01\x62\x5c\x51\x60\xa4\x9a\x97\x2b\xe1\x13\xd6\xc1\x16\xa3\x4a\x2e\xbe\x90\x3b\x6a\xe8\x2c\x45\x73\xee\x66\x38\x17\x46\x0e\x94\x0c\x36\x59\xe6\x5b\x41\x87\x14\x45\xee\x30\x8c\x0b\x17\x88\x24\x4a\xce\x38\x23\x06\x83\xf3\xfe\x0a\x83\x3e\xcd\x55\xaa\x0b\x39\x34\xb3\x2d\x2f\x5f\xbe\x5a\xe3\xd2\x82\xba\x12\x97\x36\x9f\xb5\x8e\xab\xaa\x64\x10\x90\xd6\x6e\x39\x50\xdb\x5f\x55\xa9\x30\x3c\x6e\x26\xe7\x4b\xe4\x46\x14\x4d\xea\x21\x67\xf7\xe4\x04\x7d\xc6\x31\x5f\xf2\xd7\xc3\xaf\x3d\x4c\xda\x91\x49\x2b\xf1\x82\x4c\x67\xb2\xde\xff\x30\xfa\x98\x92\xce\x10\x5b\x67\x97\xd6\xa9\x33\x4d\xfd\x0f\x23\xf8\x3b\x25\x6b\x9a\x56\x6c\x3a\x37\xcf\x6d\x58\xb0\x48\xdf\xed\x6e\x91\x84\x2b\x2d\x2a\xe0\x92\x41\x35\xa5\x52\x07\x7e\xcd\xdd\xff\xdb\x2e\x7e\x37\x66\xa2\xd0\xb7\x54\x7a\x9a\x58\xbd\x03\xec\xa3\x1c\xef\xaf\xae\x06\x67\x64\x8a\x5d\x10\xa3\xf8\x6c\x25\x92\x73\xb9\x0e\xe1\x86\x1c\xea\x23\xeb\xb3\x26\xd2\x07\x21\x0d\xf5\xa2\x14\xeb\x54\x45\xbb\x46\x4a\x68\x52\xdd\xdb\xd6\xa1\xba\x41\x52\x53\xdf\x65\x1f\xec\x07\x52\x9b\xff\x8c\x2e\x3f\x6c\x02\x7f\xa5\x50\xe8\x98\x5b\x77\x05\x6c\x3b\x48\x97\xaa\xf6\xa9\xa5\xeb\xe1\x6f\xb9\xc4\xab\x34\x8b\x8c\x2d\x47\x32\x08\xc0\xd9\x30\xdf\x61\x4b\x0b\x1e\x80\x3d\x2b\xbd\xbe\x68\xb9\x99\xb4\xeb\x92\x8b\x6a\x3d\x69\xff\xa0\x9c\x1c\x8d\xde\xfb\x3c\xfb\xba\x02\xa5\xce\xcb\xcc\xf2\xfe\x20\x05\x60\x66\x45\x20\x94\xda\xb8\x73\x80\xd1\xe8\xfd\x56\x7a\x50\x91\x4e\x23\x03\x87\xda\xb0\xcb\xd4\x80\x14\xd1\xfc\xe8\x05\x5c\x6b\xd2\x30\x96\x26\x84\x04\xb5\xbe\x95\x8a\xb9\x81\x37\x34\x77\xfc\x25\x61\x78\x80\xce\x05\x91\x6e\xfe\x3d\xf6\xab\x52\xc6\xdb\x65\x9f\x08\x36\x90\xaa\x8e\x21\x0c\x6a\x1d\x3d\xa4\x9a\x54\xcd\x24\x65\x4e\x78\x8d\xae\x37\xb4\x73\x91\x52\x89\x00\x3d\x80\x11\x1e\x91\x9a\xd1\x00\x4d\x78\x39\x23\x65\x95\x79\xb4\x7d\x0c\x8a\xca\x85\x2f\x4e\xd7\x47\x70\x4b\x63\x6d\x07\x29\x2f\x55\x99\x63\x2e\x95\x81\x43\x46\x13\xb4\xe2\xf3\xfa\xf5\x2f\x47\x2e\xfb\xf6\xaf\xdf\x97\x3f\xfe\xf2\xf2\x28\xaf\xbd\x93\x13\xd0\x14\x48\xe1\xf2\xa5\xd6\xbd\x0f\xec\x04\x0b\x6b\x9f\x7d\x5e\x49\x69\x88\x01\x17\x6b\xee\x7f\x07\xa2\x95\xd4\x93\xa9\x9a\xc9\x0c\xcb\x0a\x99\x6e\x7e\xb0\x43\x1f\x53\x5f\xf5\x06\x56\x2d\xce\xc5\xb5\xde\xda\x49\x47\xc6\xc5\x53\xb7\xa1\xab\xe6\xb3\xb1\x93\x90\xcb\x78\xea\xaa\x37\xf0\xac\xe3\x1a\x70\x86\x11\x1f\x67\x69\xd3\xb4\x13\xe3\x5d\x05\x74\xb9\x59\xae\x7b\xe0\xbd\x04\xe4\xba\xdf\x14\x90\xeb\xfe\x3f\x10\x90\x33\x32\xbf\xc9\x00\xa3\xf3\xc1\x56\xb2\xe2\x8c\xbc\x6a\xfb\x0c\xaa\x9c\xc0\x79\x02\xc8\x98\x22\x6d\x4d\xbe\x25\xdc\xee\x0a\xd6\xf6\xb6\xe0\xd1\x96\xb8\x9f\xf9\x74\xdb\x46\x73\x79\x02\x5c\x45\xdb\xc5\x49\xef\xc4\x7f\xa3\x90\x3a\x4b\xc0\xc5\x49\x2f\x9f\xc7\xe7\xf9\x5d\xac\x45\x6a\x82\x41\x76\xc2\x89\x02\xce\x07\xb3\xd7\x79\xaf\xae\xa9\x7d\x38\x43\xdf\x4e\x78\x64\xc3\x2e\xa9\x3b\x8b\xba\xde\x71\xc1\x06\x4a\x06\xa7\xf3\xec\xda\xc2\x66\x34\xb0\x70\x50\x06\x3c\xcb\x56\x67\x3b\x42\x16\x20\xff\x00\xdc\xb3\x35\xff\x01\x02\x14\x4e\xb3\xc7\xd9\xf9\xce\x0f\x8b\x6c\x91\xd5\x6d\x0f\x91\x3b\xd7\x68\xa8\xd3\x52\x97\xa8\xb4\x92\xc1\xee\x77\x2f\x9a\xd5\x32\xd8\xb9\x1a\xe6\x25\xb4\xc1\x28\x1a\xb9\xea\x10\xeb\x02\xf0\x60\x0b\xf5\xac\x8f\x5e\x7a\x8e\x63\x2e\xd0\x06\xbd\xae\x46\xce\x17\x96\xe8\xc5\xd8\xe6\x95\x00\xa5\x48\xd6\xdb\x6f\x6b\x3a\x70\x8c\xeb\x24\xc2\x79\x15\x6b\x56\x7b\x2f\x91\xd8\x8d\x91\xdc\xa3\xd6\xcc\x17\xb3\x9e\x56\xc6\x8d\x62\x4d\xc8\x7d\xb1\x87\x80\xbf\x0a\xd7\xd2\xbd\x49\x99\x86\x94\xcb\xe4\x1e\xc2\x65\xf2\x68\xe9\xde\x87\xe7\x43\x8a\xe5\x8c\x2a\x69\xbf\x16\x7c\xa9\x8a\x8f\x12\x00\x65\x89\xc0\x86\x42\xcf\xa7\x02\xa3\xed\xa3\x7c\xe1\xce\xa0\xb4\x6b\xcd\x2a\x5b\xbc\x15\xda\x3f\x27\x5a\x46\xb8\xce\x97\x52\x64\x87\xef\x35\xd5\xed\x7b\xf6\xc3\x54\x08\x2e\xa6\x76\x63\xdc\x72\x6d\x86\xcb\x63\xc8\x85\xef\xc6\x85\x4f\x41\x26\x8a\xb4\x8d\xc9\xc5\xd4\x46\x56\x7c\x46\x30\x38\xef\x2f\xea\x73\xa3\xb9\x5d\x94\xf0\xfc\xdc\x1b\xc1\xaa\x6a\xd5\x84\xb3\x02\xa7\xce\xae\xb2\xd3\x90\xf6\x8c\xcc\x60\xb9\x09\x97\x7a\x12\xb6\xb3\x77\x25\x3a\x17\xac\xdd\x44\xe6\x3e\x0f\xa2\x3b\xe4\x7e\xe5\x51\xe4\xdd\xb0\x01\xdf\x4a\x29\xd9\x46\x8f\x5c\x39\x5e\xf5\x7d\xe5\x9d\xa0\xaa\x88\x9c\x19\xe1\xe6\x80\xb2\x70\xa8\x55\x98\x8a\xce\x73\x96\x08\x6d\xa9\x1a\x4c\x7d\x3f\x07\x5a\x2b\x98\x3d\x1e\x38\xce\xc8\x5c\x6b\xda\x3a\xca\x5d\x04\x5f\x79\xf9\x7c\xaa\x49\x3d\xd7\xf9\xf6\xd2\x09\xf9\xf7\x27\xf4\xba\x02\xe1\xad\x98\x7d\x42\x55\x6e\xa6\x21\xc6\xc4\x5a\x1b\x12\x33\x2e\x95\x88\x2d\x20\x33\x54\x1c\xc7\x91\x37\x45\x3a\xab\xc7\xe1\x0a\x02\xa9\x14\xd7\x89\x14\xcc\x4a\x8e\xab\xf9\x5f\xab\x05\xec\xc4\x58\xcf\xfc\xea\xd7\x8c\x75\x8c\xc9\x1f\x1e\xbb\x9a\xa1\xb8\x47\xa1\xca\xea\x3a\x6a\x56\x23\xb8\x22\x40\xda\xb7\xc0\x05\xd4\x75\x72\x5f\xce\x9a\x85\xac\x72\xb2\xe4\x89\x00\x7f\xbc\x6b\xc2\xbc\xfc\x6a\xdb\x54\xf8\x3b\x25\x16\x87\xfd\x2a\xac\x6b\x6e\xd2\x8d\x2b\x68\xa5\x6e\x56\xfb\x11\xc6\x72\x6b\x73\xe9\x85\x28\xa6\xe4\xc1\x59\x16\xc0\xfa\x0c\xb3\x5d\x61\x5b\x48\x34\x8a\x30\x77\xaf\x71\x6d\x08\xcd\x85\x64\x57\xbc\xd0\x6b\x59\x11\x9e\x08\xb5\x81\x58\x32\x7f\x81\xdf\x1a\x2c\xaf\x4e\x5f\x07\xa6\x62\xfa\xe3\x05\x21\x45\x98\x55\x8b\x55\xe3\xa2\xa2\x0b\x8b\xc9\xbc\xf4\xbe\xda\x8a\x88\xa1\x4f\x11\xb9\x6b\xff\xdb\x40\xba\x3b\x14\x5f\x53\xde\xfc\xf2\x2a\x01\x5c\x45\x3a\x23\x7a\x27\x01\x6d\x0c\xf2\x19\x99\xf7\x3e\x1b\x5c\x21\xa2\xa1\xd4\x26\x77\xaf\xed\xff\x31\x06\x21\x17\xfb\xee\xfa\x55\x56\x2c\x9f\xf1\x41\x2c\x59\x3b\xb9\xcf\x67\x07\xcf\x40\xd1\x94\x6b\xa3\xe6\xdd\xbd\x57\xc3\xd8\x90\xa6\xbf\xd2\xbc\xb4\x2e\x78\x59\x21\xbf\x58\x8c\x3f\xc0\x6c\xb8\x03\xe7\x5f\x29\xd6\x80\xbc\xb5\xba\xdc\xb7\xb3\x24\x60\xe5\xa6\xde\x7e\x00\xbf\x40\xff\xed\x5d\x82\x82\x11\xab\xe0\x82\x00\xca\x3a\xfd\x9f\x1f\x9d\xf3\xe3\xd4\x65\xb2\x8b\xb5\x21\xcb\x72\x7f\xa3\xe8\xdf\x5f\xaa\xd0\x06\xfe\xfd\xcf\x97\xc3\x7e\x31\xfc\xae\xe9\x9b\x45\x3f\xe5\xc2\xfc\xf2\x73\xc7\xe8\x7f\x2c\x47\xff\xe3\x37\x8f\xfe\x9b\xd7\x1d\xa3\xef\x09\x2e\xba\xd6\x04\xb8\x86\xbc\xf3\x9e\xe6\x09\x65\xeb\x3f\xd4\x47\xdf\x12\x2f\x6a\x5c\xa4\xdf\x83\x1b\x7d\x8a\x3c\x37\x8a\x2f\x00\x6d\x70\xe2\x49\xe0\xde\x21\x48\x9f\x32\x06\xdd\x8f\xd4\x82\x97\x8f\x1f\xaf\xaf\xe7\x86\x7c\x4c\x49\xcd\x8b\xc5\x2f\x2b\x7c\x7e\x8a\xf2\x57\x59\x01\x79\x0f\x9a\x37\x34\xbf\x1c\x7f\xd9\x18\x33\xcc\x56\x37\x24\xf3\x69\x85\x41\x8f\xb5\x3c\x46\x1b\xc2\xc8\x95\xc8\x3a\xec\xe1\xf0\xfb\x54\x18\xd2\x86\xd8\xf7\x47\xad\xc7\x75\x17\x78\x43\xd7\xa2\x4f\xe3\x74\x3a\xcd\x32\xa6\x6b\x72\x64\xdb\xd7\x92\xef\x8b\xba\x98\x54\x00\x5b\x0c\x83\xf1\x1c\xd0\x18\x17\x9e\x4f\x01\xb3\x16\x52\x60\x24\x70\xa3\xfd\x19\x47\x43\xd1\xcb\xf0\xa8\x13\xbd\xdf\xba\xf7\x48\x36\x58\xd6\xf9\xb9\x85\xc5\xa8\x1c\xc1\x21\xcd\x48\x69\x0f\xa2\x87\xc5\x42\xe4\xca\xef\x40\x93\xb1\xc8\x6d\x32\xc1\xfe\xc6\x28\x47\x73\x39\x90\xd4\x3f\x18\xc5\x73\xdd\xcf\x88\x1c\xf8\x63\xe7\xad\x7d\x82\xeb\x40\x5a\x2c\xe1\x96\x70\xb5\xe6\xb2\x50\x3c\xb9\x86\x31\xf9\xd7\xf4\xdc\x57\xf7\xa8\xd0\xda\x01\x3a\xae\x4f\xed\xa4\xfd\xe5\x9c\x0f\x8a\xa1\xbb\x32\x7a\x3e\xf9\xcc\x05\x9d\x91\xb9\x16\xfc\xee\x1d\x8f\xe8\x03\xc6\xd5\x57\x4c\xf3\xf2\x4c\x77\xc1\xd4\xbd\x64\x90\x3d\x3c\xc9\x7e\xe3\xe3\xc5\x0b\x84\xee\x99\x1f\x62\xf0\x5d\x2a\xf8\x9d\x7b\x20\xe6\x2f\x3b\xeb\x5f\xfe\x5a\xea\x77\x2f\xe0\x2a\xe4\x0e\x77\x04\x8d\x82\x8d\xe5\x1d\x04\xf6\xfb\xd6\x06\xb0\x8c\x77\x79\x75\x5d\x11\xbb\xf2\x63\x8b\x5b\x6e\x42\x57\xab\x6d\xc9\x58\x3d\xd6\x79\x10\x0e\xa2\xa2\xcf\x94\x15\x4c\x9c\x8b\xcf\x3e\xdb\xf8\xf0\x4c\x1c\x79\x04\xaf\xb3\x73\xc8\x32\xce\x19\x09\x9a\x68\x13\xd5\xfc\xf4\xd2\x3d\x20\x82\xdc\x1d\x1b\x6a\x52\x9c\x74\x16\x0a\xf0\x00\xa3\x05\x93\xb2\x17\x1a\xf6\x38\x18\xdc\x15\xde\x73\x71\x92\xd1\xf7\x95\x14\xa4\x37\xb8\xee\xc9\x54\x98\x73\xfd\x9e\x4f\x43\x52\x57\x21\x8a\x4b\xb1\x65\xba\x0b\x41\xce\x0a\xa7\x6e\xc9\xd2\x02\x52\x40\x88\x1a\xd0\x40\x44\xa8\x0d\xfc\x0c\xbd\xc1\xb5\x86\x43\xe9\x4e\x5f\x49\x1f\xc1\xe1\x9a\x32\x1c\x3d\x66\x98\x37\x50\x1a\x9e\x5c\x9c\xc4\x1e\xa6\x53\x8a\xe4\xed\xab\xb3\xd3\x16\x10\x7a\x75\x76\x6a\xa5\x50\x61\xfc\x94\xa0\x69\xc7\xeb\xb2\xee\x5d\x22\xa3\x79\x2c\x55\xf2\x40\x0e\x5e\x7e\xa0\x32\x78\x3b\xc8\x27\xe6\x41\xf6\xa6\x48\x61\xc4\xe0\xde\x84\x72\xcf\xca\xb3\xdc\x14\xa7\x82\x0b\x6e\x30\xe2\xff\x25\x06\x3a\xc1\xc0\x3d\x68\xb1\xf2\xe6\x87\x7b\x75\x28\x2b\x4c\x19\xe7\x29\xd1\x86\xac\x5c\xe0\x53\x72\xf4\x95\x3f\xb7\xb1\x43\x54\x50\xfd\x36\x68\x77\xd6\xc6\xbd\xb2\x75\x2f\xf0\xae\x97\x87\x3d\x3b\xca\x7f\x3a\x78\xd7\x06\xb9\xeb\xeb\xdf\x07\xff\x0b\x00\x00\xff\xff\x9c\x40\x4e\x62\xf8\x61\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 25080, mode: os.FileMode(420), modTime: time.Unix(1526315928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1518913673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

