// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520731539, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520147337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520734132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1519707598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5f\x6f\xdc\xb8\x11\xc0\xdf\xfd\x29\x06\xf0\x43\x12\xe0\x2e\x49\xdb\xeb\x3d\xec\x5b\xe2\x75\xae\x41\xe1\xda\x59\xa7\xbe\x03\x82\x43\x31\x12\x67\x25\x9e\x25\x52\x20\x47\x1b\xeb\xdb\x17\xa4\xa4\xb5\x56\x2b\x69\xff\x49\x8d\x73\xae\x1f\x97\xa4\x34\xf3\x9b\x3f\x9c\x19\xeb\x7c\x8c\xbf\xb3\xf3\xb3\x73\x08\xb5\x21\xc8\x30\xbc\xc7\x88\xdc\x0f\xa3\x3c\xf8\x47\x50\x98\xd2\x0c\xde\x59\x4b\x7c\x06\x20\xc8\x86\x46\x66\x2c\xb5\x9a\xc1\x82\xd8\x48\x5a\x91\x05\xf4\x2f\x26\x01\xe8\xf6\xc1\xd2\xe8\x14\x38\x26\xb8\xbb\x02\x4a\x03\x12\x82\x04\x2c\x65\x42\x60\x59\x1b\x7a\x7d\x06\x80\x39\xc7\xda\xcc\x20\x22\xf5\x36\x94\x82\xe0\x65\xcc\x9c\xd9\xd9\x9b\x37\x91\xe4\x38\x0f\x5e\x87\x3a\x7d\x53\x2f\xbe\x3a\x83\x5a\xb3\x99\xd7\xd3\x3d\xc0\x44\x76\x76\x06\x00\xf0\x23\x24\x18\x50\x32\x2b\x5f\xfe\x2f\x4c\xc9\xff\x0c\x10\x69\x2e\x32\x9a\x81\x65\x23\x55\x74\x06\x60\x88\x73\xa3\xda\xc7\x9c\x60\x73\x64\x6c\x9d\x7a\xf1\xe5\xf7\xa0\x60\x7a\x51\xfd\x5c\x9e\x9d\x01\x9b\x9c\x36\xcf\x93\x31\xad\xa3\x64\x8c\x36\x5d\xe7\x6a\x9c\x0b\x54\x42\xa7\xb7\xb5\x5c\x1b\x54\x7f\x21\x45\x06\xd9\x53\x35\x7e\x1f\x60\x92\xc5\x08\x2a\x4f\xc9\xc8\xb0\x52\x07\xf4\x12\x10\x6c\x46\xa1\x5c\x4a\x12\x90\x90\x8a\x38\x9e\x0a\xad\x65\x93\x90\x6a\xa9\x29\x15\xff\xfc\x53\x2f\xd6\x15\x26\x79\xaf\x25\x76\x90\xb9\x92\x0f\x24\x2e\xd0\xd2\xde\x88\x52\x77\x02\x42\xb4\xf4\xfc\x68\x7d\x54\x5b\xa1\xd9\x41\x48\xe5\x69\x40\x06\x02\xe2\xaf\x44\x0a\x52\xa9\x00\x95\x80\x14\x1f\xa6\xc2\x90\xca\x3e\x06\xcd\x4d\xf8\x70\x32\x28\xe9\x01\xf4\x52\xfa\x4d\x9b\xf7\x05\x93\x6d\x43\xfa\xed\x7a\x01\xfc\x55\x83\x0b\x73\x40\x63\xb0\xb0\xc0\x3a\x22\x8e\xc9\x4c\x96\xa3\x9c\x24\xef\xdc\xbb\x86\xd2\xcd\x7a\x7b\xb0\xc7\xf6\xfd\x39\x0d\xa5\xb4\x1a\x96\x8b\xb8\xec\x36\xc3\x70\x9b\x97\x5f\x02\x54\x05\xe4\x4a\x86\x5a\x10\x84\x31\x1a\x0c\x99\x8c\x05\x9d\x73\x15\x64\xde\x6b\x27\x0c\xad\xc3\xb2\xfb\x71\x81\x75\x1d\x2c\x73\x1b\x22\xf7\x24\xa0\xf7\x68\x1b\xa9\xa5\xda\xab\x0d\x2c\x73\x15\xba\x1d\xdf\xb9\xf6\x73\xd2\x07\xe8\x2f\xe8\xcf\x47\xe0\x6a\xfe\xf7\xb6\xce\x37\x64\x96\xda\xa4\x80\xca\xad\xbe\x7c\x05\x31\xda\x18\xb4\x02\x81\x8c\x53\xa9\x2b\x06\xeb\x92\x31\x35\xfe\x2c\x53\xb2\x8c\x69\xb6\x7d\x95\xb0\xaf\xe5\x6c\x61\x99\xd2\x17\x16\xc2\xdc\x18\x52\x0c\x5c\x9f\x00\xa9\x80\x32\x1d\xc6\xe0\x00\x21\x8f\x07\x03\xbe\xfc\x7e\xe8\x45\x50\xdd\x2f\x3d\x5a\xfe\x03\x93\xad\xbb\xf2\x96\x75\xe6\x35\xac\x15\xbb\xbb\x2a\x2b\xd8\x50\x2b\x96\x2a\x77\x3e\x4e\x0f\x14\xe6\xe3\xfa\xf5\xa1\xba\x05\x5a\x27\x5d\xaa\x8d\x53\xe8\xbb\x0e\xc2\x29\x39\x59\x07\x71\xe9\x09\xd2\x85\x4e\x53\x54\xa2\x6d\x83\x6a\xd5\x56\x5e\x06\x61\xb9\xcd\x9e\x86\xdb\x29\xd4\x1d\x57\x01\x5a\xba\x48\x45\x7f\x94\xac\x77\x86\xa9\x78\x67\x22\xbb\x1d\x84\xe5\xe6\xfe\x30\x34\xc4\xd7\xc1\x1f\x14\x72\xeb\xe8\xdd\x95\x53\x76\x41\x36\xd3\xca\xd2\x90\xb3\x7e\xd0\xe6\xfe\x38\x6c\xb0\x92\x08\xe8\xc2\xf1\xde\x57\xc5\x49\xf2\x1d\x83\xcc\x64\xfb\xf1\x3d\xf5\xde\xc6\x29\x27\xf2\x65\xa3\x0f\xdb\xd9\x9b\x8d\xe3\xee\x2e\x8e\x7c\xa7\x3b\x76\x1c\x9d\xc3\x39\x7c\xbe\x9e\x5f\xc3\xcb\x44\x06\xff\x71\xaf\x78\x1d\xe9\x57\x6b\x5f\xf9\xd5\x48\xa6\x0f\x32\xa1\xb6\x8b\xf8\x05\xeb\x2f\x92\x32\xab\x61\xa3\xde\x05\xd6\xce\x4d\x9c\xbc\x5f\x25\xc7\x3e\x0b\x46\x72\x45\x0a\x32\x32\xa9\xb4\x56\x6a\x75\x62\x0c\x2e\x4b\x99\x3a\x5c\x27\x43\x8e\xf7\xf0\x9b\x7d\xda\xf3\xc7\x67\x92\x49\xdb\x2e\x36\xdc\x4f\xb8\x87\x58\x07\x89\xbb\x3a\xb6\x9d\x6e\xe6\xa4\x3b\xc8\xcd\xd6\xad\x1b\xa1\xe8\xb2\x97\xfb\xdd\xd6\x46\x71\x88\x7c\x97\x56\xc9\xbe\x61\xbc\x86\x59\x30\x8e\xe3\x4e\x93\xb8\x85\x11\xcc\xd1\x3f\x38\xa9\x1b\xab\x5e\xd3\x4c\x02\xcf\x81\xbb\x7c\x90\x96\xb7\x7a\x94\x8b\x98\xc2\x7b\x0b\x72\x59\x23\x24\xbf\xad\x0d\xb1\xbc\x4b\xbf\x3d\xbe\xb5\x12\x1b\xfc\x9c\x78\x13\xd2\xbb\x30\x84\x4c\x73\x69\xb6\xe0\xf9\x05\x07\x48\x48\x43\x21\x6b\x53\x00\x32\x60\x9d\x13\x9c\x37\x6a\x53\x3d\xd4\x15\xc2\xf5\xab\x9e\x00\xc8\x43\x40\x8c\x98\xeb\xa5\x72\x57\xbc\xd4\x6a\x82\x84\xff\x98\xee\xd7\x6f\xf1\x39\x7f\x44\xf1\x15\xf1\xa4\x82\x2b\xe2\xb1\x45\xd6\x76\xb2\x1a\xf5\x83\x54\xe2\xc6\xe8\xf0\x7d\x51\x4d\x91\xdb\xe3\x6e\x9f\x3e\xdc\x25\x79\x23\x45\x39\xed\xa8\x22\xc3\xe8\x30\x24\x6b\x7f\x70\x89\xc7\xad\xd7\x3f\x40\x88\x0a\x94\x66\x08\x08\x96\x3a\x57\xe2\x87\x75\xd8\x80\xb4\x95\x57\x92\x68\x84\xd0\x5d\x61\x72\xdb\x19\x43\x2b\xb7\xf2\xf6\xed\x5f\x36\xe2\x48\xdb\x9e\x28\x32\x3a\x3c\x7c\x14\x7e\x5c\xa9\xe5\xde\x75\x54\x22\xfa\xa8\x2c\x63\x92\xdc\xfa\xe2\xf5\x96\xcc\x4a\x86\x5b\xd4\xab\x3d\x2e\x29\x31\x9a\x88\x18\x02\xa9\xd0\x25\x26\xf7\x53\x55\xf7\xda\xf5\xd9\xe3\x0b\x95\x5e\x92\xfb\x95\x29\x6a\x00\x76\xb3\xa1\x97\x36\x4b\xb0\x18\x32\x4d\x73\xf7\x23\x89\xc3\x0c\x29\x4b\x6a\x47\x59\xe5\x96\xd1\x70\x65\x8d\xee\x48\xf0\x3b\xfe\x47\xf8\x87\xb8\x76\xeb\x6e\x9d\x74\x47\x6a\xae\xb3\x1d\x8a\xeb\xec\xc9\xea\x7d\x8a\xcd\x17\x94\xea\x15\x0d\xea\xfe\x6f\x25\x1f\x43\xf1\x49\x02\x30\x4e\x09\x3c\xd2\xe9\x65\xa4\x30\xd9\xb2\x37\x29\x5f\x8c\x5b\xbf\x5a\x76\x4b\x55\x16\xaa\x33\xfc\xf8\xa9\xdb\xd6\xa2\x74\xe5\xe1\x9d\xa9\xba\x07\x4d\xae\x58\xa6\x47\x76\x2a\xb9\x52\x52\x45\xee\x62\xdc\x2a\xb7\xeb\x3b\x11\x55\xd5\x50\xea\xa5\x93\xe3\x85\xbb\xda\x32\x43\x96\x14\x4b\x15\x01\x86\x2c\x57\x04\x37\x1f\xe7\xeb\xf1\x61\x52\x38\xa1\x54\x69\xcf\x93\x09\x0e\x0d\xd3\x32\x29\x3a\x3a\x14\x27\xe5\xce\x9b\xed\x14\x6c\xbf\x10\xdf\x3c\x5e\xc2\xbd\x95\x84\xdb\x5c\x96\x12\x93\x3b\xd6\x61\x2e\xb3\xab\x82\x98\x8e\xdc\xa5\x5a\xdd\xa1\xe9\xf7\x35\x48\x31\x73\xc8\x48\xad\xa4\x36\x2a\x25\xc5\xb0\x42\x23\x31\x48\x4a\x9e\xd6\x45\x2a\xc7\x24\x0d\x84\xda\x18\x69\x33\xad\x84\xf3\x43\x3f\x57\xdd\x18\x68\x4c\xe2\x71\xab\x52\xfa\x0d\x8f\x4b\x31\xfb\x52\xb2\x6b\x0c\xbc\x86\x9c\xa7\xa4\x30\xe4\x3a\x5e\x9b\x66\x19\xda\x05\x64\x7c\x37\xea\xd0\x6e\x92\xff\xc1\xdc\x52\xb2\xbc\x29\x8b\xaf\x9e\xcf\x4e\x7c\xa5\xed\x9a\xd2\xd2\xdc\xdb\xa9\xa5\x9a\xdb\x3b\x0e\xa7\x4d\xb1\xf6\xcc\x34\x83\xa5\xe2\x50\xb8\x68\x7b\x5c\x27\x1f\xa7\x7a\x6b\x28\x7c\x11\xa3\x8a\xa8\x84\xf3\x38\xc5\x03\xad\xfc\x67\x3a\xa7\x7e\xf5\x70\x62\x99\x7c\xf8\x80\xee\x48\x34\x57\x5a\x7c\x96\x9d\xa9\xb7\xe1\x3c\x09\x5a\x86\x54\x8b\xf2\xa3\x10\x97\xb0\xca\x70\xfa\x36\x98\xba\xf5\x4f\xd7\x8a\x74\x31\x1b\x76\xab\xa3\x47\x44\x57\x8e\x49\xd1\xfb\x3f\xc1\x86\x8b\x61\xd9\xe7\xfa\x4f\x49\xb6\x41\xfa\x39\xf5\xb7\xf4\xb7\x52\xbc\x41\x80\x4d\xd2\x95\xd2\x07\x39\xe8\xc1\x90\xc7\x19\x5a\x9c\x9f\x9d\x83\xa1\x48\x5a\x36\xc5\x74\xdf\xfd\x09\xb1\xa0\xe8\x9f\x54\x74\x7f\x07\xf0\x4e\x88\xf5\x17\x1f\x8f\xc2\xdc\x53\x71\xfc\xad\x53\x3f\xa5\xdb\xea\xf5\xea\x6d\x33\xad\x0e\xe6\x9b\x51\xbb\xf7\xc1\x8b\x6c\xfc\xca\x7b\x4d\xff\xf2\x21\x43\x25\x48\x0c\x58\x41\x01\x55\x9b\xfe\x6f\x8f\xc9\xed\xf1\xde\x8f\xa0\xba\xa3\xa1\x1a\x4f\x3d\x53\xfa\x3b\xbf\x4e\x19\x85\xff\xfc\xd7\xeb\xc5\xbc\x1b\xbf\x5f\x7a\xb6\xf4\x73\xa9\xf8\x6f\x7f\x9d\x98\xfe\xa7\x7e\xfa\x9f\x9e\x3d\xfd\x9f\x7f\x9a\x98\x7e\xa9\xf0\x56\x77\x5c\xf2\x6f\x92\x77\x15\x98\x7b\x78\x25\xff\x4b\xfb\xea\x39\xd9\x62\x8f\x0f\x74\x4e\xb0\xc6\x9c\x92\xd2\x1a\x6d\x33\xcc\x29\x21\xa6\x96\x25\xbe\x0b\xee\x13\x42\xba\xab\x0c\xb4\x9b\xd4\xda\x96\x4f\x9f\xd7\xb7\x2b\x43\x3e\xe5\x64\x8a\x6e\xf7\xf3\xed\xed\xea\x4f\xe4\x7f\xf7\x54\x5c\x07\x7f\xb4\xce\x2c\xaa\xf7\x2e\x88\xef\x1a\xe8\xc7\x9d\x46\xfe\x37\x00\x00\xff\xff\x78\x57\xd3\x56\x9a\x35\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 13722, mode: os.FileMode(420), modTime: time.Unix(1520745177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1520144733, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

