// Code generated by go-bindata.
// sources:
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xc1\x4a\x04\x31\x10\x44\xef\xf3\x15\x75\x98\x43\x02\xbb\xf9\x00\xc1\x83\xa2\xe0\xc5\x45\x14\xbd\x88\x2c\x59\xd3\xa3\x0d\x33\x19\xed\x24\xab\x12\xf2\xef\xd2\xe3\x9c\x44\x6f\xa9\x74\xd5\xab\xaa\x75\x0b\xf1\xf1\x85\xd0\xef\x37\xe8\xdf\x84\x71\x72\x8a\xde\xdd\x47\x7e\xbf\x11\x9e\x85\x33\x53\x42\x6b\xdd\x2f\xe7\x71\x52\xa3\xe1\x18\xe8\x13\xbd\xbb\x9b\x25\x53\x78\xb8\x4e\x0b\xc3\xfe\x11\xa0\xe9\x40\x61\x81\x1f\x27\x77\xa9\x62\xc1\x0e\x25\x3e\xa3\xd6\xf5\xee\x76\x7e\xa2\x2b\x9f\x5e\xd1\x9a\xb1\x78\x7c\x3a\x7c\x65\x42\xed\x80\xb4\xc1\x5e\xd3\x3c\x97\xcc\xa3\xbb\x25\x1f\xce\xc6\xd1\x0c\xa3\xcf\xe4\x76\xf4\xa1\x1f\x24\x46\xfd\x49\xf5\x79\x19\x06\x12\xf3\x43\x50\x00\xa0\x83\xd6\x9a\x0b\x9f\xbd\xb6\x03\xcd\x5a\xdb\x01\x42\xb9\x48\x44\xea\x74\x37\x28\x06\x6c\xdb\x3f\xcf\xef\x00\x00\x00\xff\xff\xf0\x23\xa3\xa9\x33\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 307, mode: os.FileMode(420), modTime: time.Unix(1520115917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x4f\xe3\x3a\x10\xbe\xe7\x57\x8c\xa2\xea\x29\x11\xc5\xe5\x71\x44\xea\x01\x3d\x0a\x0f\x09\x58\xa4\x2e\x70\x40\x2c\x72\x92\xa9\xb1\x9a\xd8\xe9\xd8\x6e\x41\x55\xfe\xfb\x6a\x9c\x14\x28\x1c\x76\x2f\x95\x67\xf2\xcd\x37\xdf\x7c\x33\x6d\x65\xb9\x94\x0a\xa1\x91\xda\x24\x89\x6e\x5a\x4b\x1e\xb2\x04\x20\x2d\xde\x3c\xba\x94\x5f\xa5\x6d\x5a\x42\xe7\x26\x8b\x5a\x7a\x8c\x29\x6d\x27\xda\x06\xaf\xeb\x18\xb9\x37\x53\xf6\x0f\x4f\xa5\x35\xeb\x34\xe1\x40\x69\xff\x12\x0a\x51\xda\x66\xa2\xd0\x1c\x95\xba\xc2\x89\x72\x25\xe9\xd6\x4f\xd0\x28\x6d\x22\xd5\x76\x7b\x08\x7a\x01\xb8\x82\x91\x98\x19\x59\xd4\x78\x65\x95\xd2\x46\x81\xa7\x80\xd0\x75\x7f\xa2\xaa\x7b\x78\xfa\x05\xe7\x34\x85\xd6\xa1\xe1\xef\x14\x5c\xdf\x0a\xd0\x54\x4c\x99\x27\xc9\x22\x98\x32\x4e\x9d\xe5\xb0\x4d\x00\xd6\x92\x60\xa3\x80\x47\x11\x0f\x52\xfb\x0b\xb2\xa1\x1d\xf4\x91\x34\x0a\x61\xf4\x3c\x86\x51\x4b\x1a\x4e\xa6\x30\x12\x77\x46\xaf\x6e\x49\x5b\xd2\x5e\xa3\xeb\x75\x7e\xc1\xae\x1b\x86\x66\xda\x54\xf8\x0a\x23\x31\xb7\xe4\xb1\xba\xbf\x76\x91\x25\xef\x4b\x36\x4a\x9c\x56\x55\xf6\x6f\x9e\x00\x28\x0b\xac\x6a\x10\x04\x50\xe1\x02\x59\x94\x38\xb3\x06\xb3\x3c\xe6\x94\x43\x26\xed\xfd\x13\x37\xb8\xc9\xd2\xed\x96\x5b\x89\xcb\x33\xe8\xba\xb4\x47\xfd\x8d\xa9\x91\x4b\x70\x1e\x49\x9c\x5b\x6a\xa4\xf7\x48\x30\x85\x7f\x06\x47\xc5\xc5\x7c\xf6\x9e\xdf\x7e\x2b\xf9\x11\x3c\x4c\x61\x87\xbd\xb2\xea\x81\x34\x03\x6f\x64\x83\x27\xb0\xaf\xea\x5b\xf1\x15\xae\xb1\xee\xcb\x29\x38\x71\x86\x45\x50\x31\xf7\x2e\x7f\xd8\xd4\xae\xee\x3f\x42\xe9\xf1\xfe\xfa\xc3\x06\x31\x47\xff\x53\x37\x68\x83\xcf\x86\x66\x43\x08\x5d\xb7\xb3\xe1\xf3\x3a\xb0\x29\xb0\x8a\xcb\x5b\x37\x62\xc6\x81\x83\xc3\x4f\x2d\x4e\xab\xea\x32\xde\x7f\x6f\x69\x84\x8b\x73\x5d\xa3\x91\x0d\x7b\x96\x8e\xe1\x23\xcf\x53\xfe\x2f\xdd\xcb\xe7\x5e\x2c\xf9\x70\xcf\x5b\x59\xcd\xe3\x91\x66\x1c\xf6\xe4\xee\x71\xcf\x1a\xa1\x5c\xfa\x94\xe5\x1f\x53\xcd\x5e\xb1\x0c\x1e\x6f\x6b\x69\xe2\xac\x5d\xfc\xdd\x63\xdf\xa8\x78\xa1\x5f\x3f\x74\xc3\x51\xab\x6c\x09\x14\x0c\x8e\xa1\x80\xc7\x27\x7e\xe5\xe0\x3c\xf1\xf6\xf9\xae\x16\x96\x40\x8f\xe1\x99\x9d\xe8\xdd\x29\x86\x7b\x2b\x1e\xf5\x13\xfc\x9a\xc2\x32\x46\x4b\x7e\x72\x8a\x45\x24\x00\x2b\x2e\xe8\x79\xb2\xa3\xd7\xe3\x63\xee\xee\x06\x9e\xe1\x7f\x2f\xee\xcc\x2a\x58\x8f\xd9\x0a\x0e\x76\xd0\x22\x87\x03\x58\x31\x98\xd0\x07\x32\xe0\x92\x2e\xf9\x1d\x00\x00\xff\xff\xb1\x82\xe2\x8d\x76\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1142, mode: os.FileMode(420), modTime: time.Unix(1520112101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1519707598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1511857680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

