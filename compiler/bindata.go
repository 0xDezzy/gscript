// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/vm_file.go.tmpl
package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcf\x4b\xfb\x40\x10\xc5\xef\xf9\x2b\xde\xb7\xe4\x90\xc0\xb7\x01\xaf\x42\x0f\x42\x51\x44\x14\x41\xd4\x63\x59\xb2\xd3\x30\xd8\xce\xc6\xd9\x4d\x7f\xb0\xe4\x7f\x97\x4d\x23\xd8\x7a\xa9\x87\x5e\x42\x66\xf6\xcd\xfb\xbc\x81\x69\x4d\xfd\x61\x1a\xc2\xda\xb0\x64\xd9\xb2\x93\x7a\xf8\x2d\x4a\xc4\x0c\xd8\x18\xc5\xb6\x81\xdf\x4b\x5d\xbd\x1b\x0e\x77\xea\xba\x36\x03\x62\x9c\x42\x8d\x34\x84\x7c\xf1\x1f\x79\xab\x8c\xeb\x19\xf2\xea\x55\xf8\xf3\x59\xd9\x29\x07\x26\x8f\xbe\xff\xad\xdd\xac\x93\xb4\x60\xb1\xb4\x43\x5e\xbd\x38\x0d\x64\xdf\x1e\xfd\xe0\x52\x1e\x46\xb6\x4d\x75\x63\x6d\x71\x55\x66\x40\xe3\x90\x52\x8d\x81\x00\x4b\x4b\x4a\xa1\xaa\xb9\x13\x2a\xca\xa1\x67\x62\x4c\xc6\xd5\xfd\x1c\x7d\x9f\xec\x9f\x68\xfb\xb3\x35\xca\x78\x79\xa2\x9c\xcd\x20\xbc\x1a\x8d\x01\xa5\xd0\xa9\x0c\x45\x3f\x7c\x49\x35\xb9\x1d\x0d\x55\x63\x71\xdb\x49\x1d\xd8\xc9\x03\xed\x31\xe1\x75\xeb\x34\x2c\x8c\xf7\x14\xfc\xe4\x88\x98\x3c\xfe\x9d\xc1\x39\x07\xd3\x2a\xad\x9c\xb1\x97\x03\x8c\x7b\x88\x09\xbc\xa1\x8b\x63\x7c\xad\xdc\x86\xcb\x61\x68\x47\x75\x17\xfe\xbc\xc7\x41\x1c\x23\x48\x2c\xa6\xdf\x07\x99\xce\xff\xf4\xa1\xff\x0a\x00\x00\xff\xff\x87\x68\xa4\x81\x3e\x03\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 830, mode: os.FileMode(420), modTime: time.Unix(1530571510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1530143358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x53\x1b\xc9\x11\x7f\x46\x7f\x45\x67\x03\xa9\xd5\xd5\xb2\xd8\x97\x54\x1e\x94\x38\x55\x80\x74\x2e\x62\x0c\x14\xe2\x7c\x95\xa2\x28\x3c\xda\xed\x5d\x8d\xd9\x9d\xd9\xcc\x8c\x00\x99\xd2\xff\x9e\xea\x99\xd9\x2f\x21\xd9\x70\xe7\x87\x3c\x81\xe6\xa3\x3f\x7e\xdd\xfd\xeb\x9e\xad\x58\x72\xc7\x72\x84\x92\x71\x31\x18\xf0\xb2\x92\xca\x40\x38\x00\x08\x66\x4b\x83\x3a\x18\xec\x04\x89\x2c\x2b\x85\x5a\x1f\xe4\x5f\x79\x15\xd0\x56\xa2\x96\x95\x91\x07\x8c\xf6\xdb\x9f\x09\xaf\xe6\xa8\xe8\x06\x8a\x44\xa6\x5c\xe4\x07\x33\xa6\xf1\xef\x7f\xb3\x87\xb2\xd2\xd0\x16\x97\xc1\x80\x7e\xe6\xdc\xcc\x17\xb3\x38\x91\xe5\x41\x8e\xe2\x4d\xc2\x53\x3c\xc8\x75\xa2\x78\x65\x0e\x50\xe4\x5c\x60\xb0\x76\x4c\xc9\x19\x2a\x73\xa7\x78\x89\xe2\x40\x1a\xe3\x04\x3d\x3d\x81\x62\x22\x47\xd8\x15\x3a\x82\xdd\xea\x2e\x87\xd1\x3b\xd8\x8d\xdf\xcb\x0b\xe7\xd9\xd1\xf2\x8c\x95\xa8\x2b\x96\x20\xac\x56\x03\x80\x83\x03\x38\xb1\x6e\x72\x91\x43\x8a\x15\x8a\x14\x45\xb2\x84\x1a\x89\xa7\x27\x2b\x26\xa6\x6b\xb0\x5a\x41\x26\x15\x08\x66\xf8\x3d\x76\x4e\x93\x6d\xf5\x41\x27\xed\x82\x99\x39\xac\x56\x81\xb3\x09\x45\x4a\xda\x86\x83\x41\x22\x85\x26\x44\x9f\x9e\xf6\x6b\x4b\x6f\x23\xd8\xc5\x72\x86\xa9\x33\x75\x42\xff\xea\xc6\x38\x12\x6b\x77\xe3\x93\x31\xe9\x9f\xcb\x22\xd5\x60\xe6\x08\x29\x33\xcc\x9a\x63\xb7\x53\x4c\x21\xe3\x05\x76\x2e\x9c\x2b\x9e\x7b\xb3\x9d\x19\x3d\x41\xef\xe0\x73\xbb\x34\x26\x59\xab\xd5\xe7\x81\x35\xac\x35\xd7\x1b\xe0\xaf\x3c\x28\x56\x39\xdd\x39\x0a\xd4\x5c\xc3\xa7\x8f\xd6\x02\x7b\xa6\x56\x65\x96\x15\x76\x6f\x69\xa3\x16\x89\x81\xa7\x01\xc0\x04\x7e\x72\xd1\x8c\x27\xf6\xcf\x00\xe0\x03\x5c\xdf\x50\x6e\x0d\x56\x56\xdb\x19\x3e\x74\xae\x26\x0a\x99\xc1\xbe\x4a\xb5\x10\x86\x97\x68\xf5\xba\x0c\xe9\xab\xcf\x16\x22\xe9\x8b\x09\x87\xf0\x53\x47\x28\x19\x62\x90\xc0\xf6\xb6\x9c\xe1\x43\x18\x74\x65\x04\x91\x0b\xa7\xbb\x10\x44\xf0\xd7\x37\x11\x04\x93\x47\x4c\x16\x06\x83\xe1\x00\x40\xd2\xf5\xbf\xb4\x67\x48\x26\xc0\x64\x04\x06\xa3\x01\x00\xe1\xad\xd0\x2c\x94\x00\xe9\x1d\xb3\x67\x7f\x59\x88\xc4\x70\x29\x3e\xe0\x12\x02\x57\x5d\xb7\x4c\x6b\x34\x3a\x20\xcb\xdc\x8a\x06\xb7\x04\x5c\x18\xf9\x7a\xd7\x43\xd9\xf5\x76\xf8\x12\xc5\xe1\x10\x50\x29\x8a\x63\xaf\x84\x90\xa7\x1b\x53\x73\xbf\x97\x9b\x3c\x75\xd9\xb4\x2d\xef\x64\x3c\xf1\x35\xa1\xaf\x83\xf6\x46\x70\x03\xef\x80\x0c\x0e\x87\x3e\x03\xc0\x81\x78\x70\x00\xbf\x0a\xaa\x3e\x54\x36\xe1\x2a\xfa\xcb\xcd\x1c\x5c\xe9\xa4\x98\x14\x4c\x61\x0a\x6c\x26\xef\xd1\xde\xf0\x48\xb7\x4e\x8f\xc3\xb5\x64\x1f\xfa\x98\xf8\x52\x74\x0e\xf8\x6b\x82\x17\x14\xa2\x2d\x41\xaa\x14\x16\x92\xa5\xbd\xf0\x50\x48\xea\x50\xf8\x7d\x28\xf8\x4c\x31\xb5\xfc\xa3\xa1\xe9\xa8\xeb\x05\xa5\x4e\xa6\x78\x12\x9f\x4a\x96\x4e\xad\x86\xb0\x3e\x1e\xe7\x3a\x88\xfa\x40\xdf\xde\x5e\x5c\x4e\x4e\xcf\x0f\xc7\xc1\x4d\x38\x1c\x7e\x2f\x07\x9d\xc5\xd6\x49\x92\xe7\x5c\xdc\xe0\xc6\xf3\x94\xfc\xf4\xf1\x95\x59\xd7\xaa\x7a\x89\x83\x6b\x55\xb9\xe6\xe2\xe4\xec\xea\xf2\x3f\x17\xe7\x27\x67\x57\xdf\xf6\x12\x7d\xe5\x92\x07\xfe\xff\x67\x34\xc6\x8c\x5d\x41\x61\xd4\x12\x2a\xc9\x85\x81\x30\xc5\x8c\x0b\x4c\x61\xb6\x84\x7b\x54\x9a\x4b\x11\xc1\x42\x2f\x58\x51\x2c\x61\x8c\x55\x21\x97\xa4\xf5\x85\xfe\x77\x8c\xe8\x79\x7e\x1b\xd1\x0f\x2a\x30\xf2\xee\x98\x15\x45\x7d\xed\x37\x6e\xe6\x57\xbc\x44\xb9\x30\x61\xe0\xf4\x59\xf2\xf1\x58\xa1\x52\xdf\x8b\xab\x6b\x54\x2e\x79\xc5\x17\x4c\x7c\xf2\xa6\x4b\xc1\x4a\x9e\x58\x3f\x0a\x2e\xee\x30\xad\x5b\x5a\xe6\x85\x6c\x20\x1f\x4f\xf5\x7f\x9c\x77\x5a\xa3\x7a\x38\xdc\x33\x65\x81\xb0\x2b\x03\xb0\xff\xbf\xb3\xd5\xe9\xc8\x66\x7f\x1f\x8e\x26\xef\x4f\xce\xe0\xec\xf0\xea\xe4\xd3\x04\x2e\x0e\x8f\x3f\x1c\xbe\x9f\xc0\xc9\xc7\x8b\xf3\xcb\xab\xe9\x6b\x9b\xff\xfe\xf3\xee\xbf\xb1\x83\xc3\x42\xa4\x48\x2d\xbf\xbe\x48\xa7\x84\xef\xcf\xb7\xa2\x6a\x7e\xda\x8e\x50\x77\x14\xeb\xa2\xd7\xea\x68\xad\x15\x3a\xda\x36\x2b\x44\xf6\x20\x99\xd8\x39\xd2\x24\xbf\xdd\x9c\x2e\xcb\x99\x2c\xae\xd8\xac\xc0\x11\x94\xac\xba\xd6\x46\x71\x91\xdf\xfc\xd4\x53\x4c\xa8\x3f\xad\xa2\x96\xf4\x3c\x2c\x19\x4f\x1f\x23\xd8\xcd\x2c\x2c\x24\xfc\xd4\x06\x9f\x8e\x77\x58\xfd\x30\xa5\x61\xad\x49\x05\x57\x0c\xa8\xba\x93\x4f\xb3\xb7\x66\x65\x4c\xbf\xb3\x26\xea\x84\x8a\x91\xa0\xad\xd1\x60\xc8\x6a\x0b\x5a\x76\xdb\xa0\x66\x2f\xf0\xf4\x71\x23\x80\xd6\x8f\x75\x50\x7a\xe2\x3d\x2c\xb4\x32\x02\x19\x77\x1a\xb2\x3d\x69\xff\xad\x71\xe8\x06\x2b\xee\x00\x79\xbd\x41\x2c\x35\xa7\xd6\xce\x9e\x99\xeb\x6d\x84\x52\xc8\xd6\x16\x81\xe6\xf1\xa9\x87\xc7\x4d\x74\x59\x67\x76\xcb\x65\xbd\x6c\x71\x9c\x67\x8d\x0c\xa2\x9e\xcd\x54\xfa\x3c\xb3\xb7\xff\x64\x0b\xc3\x37\xcc\x0e\x1d\x6c\xe8\x72\xae\x72\x26\x67\xe3\xed\x75\xb3\x99\x4f\x2c\x76\xe7\xe3\x0f\x7e\xdb\x33\x07\xda\xe9\x9e\x50\xba\x43\xd7\xed\xd6\x79\xd4\x4e\x15\x8e\x12\x7a\x72\xfa\x7d\xde\xeb\x74\x2b\x9e\xe7\xc7\x8d\x70\xa2\x8b\xd5\x2a\x18\x3e\xb3\x67\x0c\xbc\x31\x44\xf6\xd3\xb4\x37\x09\xfb\x09\xea\x9b\x84\xd5\x9d\x17\x34\xb8\x42\xea\xd9\x38\x6b\x98\x99\xa1\xa6\x29\xf1\xd8\x3e\x69\xc2\x35\xb7\xbe\x13\x17\x27\xf0\x69\xe5\x83\x93\xce\xde\x92\x44\x81\x0f\xa1\x7d\x52\xc5\x47\x8b\x2c\x43\x35\xb4\x5b\x3f\x6f\xde\xda\xd1\x2a\xa1\x1d\xb7\x7a\x86\x0f\x97\xc8\x52\x54\xa1\x47\x4f\x5b\x13\x88\x3f\xf9\x3d\x5c\x93\xad\x47\x85\x4c\xee\xa6\xfc\x2b\xba\xd1\x1a\xc8\x3b\x64\x25\xc9\x70\xcf\x32\x12\x72\xfe\xcb\x51\x38\x8b\x80\xdf\x5f\x8f\x6e\x86\x83\x1d\x8b\x28\x5a\x77\xdd\x3b\x8d\xce\x8c\xdd\x62\xe8\x57\xa6\x26\x9d\xf8\xc7\x5c\x04\x5a\x25\xa4\x17\x45\xe2\xcc\xb1\xf5\xeb\xc5\x4f\xad\x3e\xb7\xfe\x34\x1d\x79\xfd\x11\x5c\x8e\xc0\xeb\x59\x39\xd4\xda\xee\xc7\x65\x7c\x2c\xab\x65\x98\xce\xde\x46\xad\xd0\xe1\x3f\x5e\x06\xec\x4e\xfe\x55\x35\xa2\xe8\x65\xda\x81\x29\x9d\xbd\x1d\x0e\x76\xd6\x43\xb4\xb3\xb3\x2e\x67\x67\x35\xd8\xf1\xf6\x74\xcd\xf9\x39\x82\xfc\xab\x7a\xb1\x84\xfc\xab\x8a\x8f\x0b\xa9\x31\x1c\x0e\xea\x03\xe9\xec\xe7\xf8\x88\x82\x17\xd6\x29\x3d\xb6\x63\x2c\x25\xf0\xb8\xd3\x8c\x1d\x1f\x43\xc3\x44\xbf\xb9\xf9\x57\x0f\x5a\x0e\xbf\x6d\x08\xdc\xb1\xb7\x8a\x1d\x7d\xaf\x56\xfd\x4a\xe9\x10\x60\x5d\x33\xb6\xd5\xab\x7e\xc5\xb8\x63\x4d\x87\xdc\x4e\xe4\xdf\x68\xf2\xeb\xfa\x42\x72\x06\xe8\x4d\xde\x08\xa0\xb1\x66\xe8\x96\x3e\xb1\x62\xe1\xea\x8b\x7a\x8d\xca\x17\x25\x0a\x03\x53\x26\xb8\x59\xc2\xf1\x1c\x93\x3b\xed\x52\xa3\x40\x61\x25\xc5\xf5\xa1\x53\xae\xcd\x10\xfe\x45\x4a\x0b\x14\xce\xee\x43\x95\xeb\xfa\x51\x07\x7e\x7c\xcc\x73\x54\xf1\x84\xc6\x88\x2c\x0c\x8c\x94\x50\x32\xb1\x04\xe6\xa5\x68\xa8\x88\x1d\x52\xea\x4c\x0d\x14\x7b\x9a\x06\xc0\x3d\x5d\xbf\xfc\xd6\x9a\x0c\x58\x3b\xc8\x09\x54\xa7\x32\x61\xb4\xe1\x0a\xbf\xc9\x46\x7b\xe2\x9c\x1c\xfc\xc8\xee\xf0\x78\xa1\x8d\x2c\xad\x0d\x61\xd0\x68\xb1\xa3\x0d\xa9\xd8\x6e\x94\xed\x18\xf5\x85\xa0\x7e\xb7\x6c\x47\xe3\x9f\xaf\x47\x23\xc3\x87\xff\x3b\x30\x36\xda\xb4\x09\x8b\xde\x3c\xc3\xdc\x3c\xc3\x6c\x39\x34\xfe\x37\x7d\xcf\xf5\xd5\xb6\x9a\x9a\x64\xfb\x33\x79\xc5\x9a\x76\x4e\xcc\xc9\x3a\x4b\x36\xab\x59\x3c\x79\x34\x53\x9e\xbb\x23\xaa\xbb\xdf\xf0\x4c\x2f\x1e\x61\xe7\xc4\x30\x9e\x3c\x52\x67\x0f\xb7\xf5\x86\x0d\xa1\x49\xe4\xa2\x48\x41\x48\x03\x68\xef\x36\x78\xc0\x5e\x0a\x32\xdb\x18\x9e\x9e\x51\xaf\x8d\xd5\xba\x0d\x21\x2a\xf5\xbb\xa3\x98\x95\x26\x9e\x56\x8a\x0b\xd3\x73\xc5\x28\x26\x74\xc1\x0c\xf6\xbc\xb1\x81\xcd\x25\xdc\x13\x15\xf4\xdd\x18\xd6\x29\xaf\x1f\xb8\x49\xe6\x70\x4f\x38\xf7\xd0\x8f\x43\xb3\xac\x70\x68\x81\x4c\x98\xc6\xf5\x68\x8d\xac\x0b\xbd\x78\x3e\x93\xb0\x76\xc5\x36\x5f\xcc\xd8\xa2\x30\xee\x36\x2a\xf5\x51\xdb\xd7\x43\xcf\xaf\x26\x81\xec\x27\xae\x92\xeb\x92\x99\x64\x3e\xa2\x80\x61\x62\x30\x85\x3d\x1d\x41\x2e\x0d\xec\x5d\xd5\xb5\xd3\xd1\x12\x44\x70\xbf\x19\xf9\x2c\x0c\x58\x4f\x74\x22\x85\x7f\x70\x3a\x80\x47\x2e\xdc\xce\xac\xdf\x1d\xa3\xf6\xfa\xaa\xf7\x59\xb2\x5b\x52\x8a\x20\x8a\x60\x57\x35\x35\x75\xe9\xc7\xbf\xad\x65\xe5\x0e\xb8\xa2\x52\xbd\xa2\x52\x9d\x25\x1b\x26\xd5\x2b\xaa\xde\x9c\x6a\xb7\xd1\x9c\xa2\x20\xcd\x0d\xa3\xd5\xda\xeb\x33\x3c\x83\xdc\x34\x27\xdf\x34\x9f\x49\x29\xc5\x6d\x93\x5b\x7b\xa1\x78\xc9\x59\xfc\x1e\x05\x2a\x66\xd0\x09\x9c\xda\x69\x0f\x02\x15\xb4\x1f\xaf\x5e\xd4\x06\xc3\xbe\xb4\x43\x95\xd7\xa2\x58\xe0\x33\xc9\x59\x89\xff\x6d\xac\x7c\xdb\x58\x39\xe5\x22\x2f\xb0\x89\x9d\x14\x06\x1f\x0d\xec\x03\x33\x06\xcb\xca\x10\x0b\xfb\x3d\x33\x67\xf6\xa7\x7d\x30\x28\x34\x9f\x58\xd1\xa7\x1d\x1b\xf3\x2b\x69\xbb\x69\xa8\xde\x6c\x23\x9a\x2d\x99\xec\xb5\xd8\x02\xec\x66\x5b\xc6\x78\xb1\x50\xd8\xe6\x9b\xa7\x86\x2d\x94\x91\x85\xaf\x4b\xc9\xf5\xbc\x7e\x96\x94\x5e\x84\x73\xd8\xa7\x48\xa1\xdb\x4f\xf5\x57\x73\xae\x5b\x26\x9c\x33\x0d\xe5\xa2\x30\xbc\x6a\x40\xd5\xb0\xef\x3f\x75\x50\x50\x2c\xd1\x30\xf8\xf7\x14\x98\x52\xcc\x7f\x9d\xdb\x18\x83\x44\x96\x15\x33\x7c\xc6\x0b\x6e\x96\x03\x80\x2f\xfa\x7c\xf6\x65\x03\xe2\xe7\x33\x92\x1d\x7e\xbe\xbe\xf9\xbc\x61\x22\xfc\x06\xe2\x2d\x27\x96\xec\x0e\x81\x09\x6f\x92\xb4\x02\xad\x65\x8d\x2b\x4c\x6b\x9e\x0b\x4b\x07\xce\xcc\xe0\xc7\xc0\x5f\x7f\xb4\xdc\x84\xfd\x33\x16\x88\x60\xf7\x76\x3b\x09\xf8\xa2\x77\xc3\xdc\x5a\xe9\xbb\x01\xda\x22\x18\x4f\xd1\x7f\xc5\xf3\xdb\x41\xd4\x63\x85\x57\xa6\x6d\x0b\x22\x4b\x53\xc0\x02\x3b\xfd\xd1\x12\xe7\xde\x15\x15\xcd\x17\x5d\x83\x41\x00\x51\x32\x0f\x7d\x97\x51\x75\xb3\x54\xbd\x5f\x3f\x3c\xd1\xbf\x85\x74\x9f\x7a\x5b\x2c\xeb\x87\x34\xf1\x4a\xea\xf3\xa2\x2d\x09\x07\xa7\x2b\xf7\xe1\x06\xf2\xfc\x4e\x99\x88\x9a\x59\xb4\x9b\x09\xac\xb6\xe6\x04\x13\x69\xad\x67\x21\xfc\x57\xcf\xb8\xa5\xce\x1f\x42\x8b\xf5\x17\x5e\xc2\xeb\xd7\x5a\xc9\x46\x7f\x56\x83\x06\xa0\xff\x05\x00\x00\xff\xff\xe6\x8a\x79\x1b\x90\x1c\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 7312, mode: os.FileMode(420), modTime: time.Unix(1530942716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"preload.gs": preloadGs,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

