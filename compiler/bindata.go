// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520746550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520147337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520746550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1519707598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5f\x6f\xdb\x38\x12\xc0\xdf\xf3\x29\x06\xc8\x43\x5b\x60\xb7\xed\xdd\xed\xed\x43\xde\xd2\x38\xdd\x2b\x0e\xb9\xa4\x76\x2f\xbb\x40\xb1\x38\x8c\xc9\xb1\xc5\x8d\x44\x0a\xe4\xc8\x8d\xbe\xfd\x81\x94\xe4\xbf\x92\x6c\xcb\xd2\x36\x6d\xd6\x8f\x26\x25\xcd\xfc\xe6\x0f\x67\x48\x9e\xf7\xf1\x3b\x3b\x3f\x3b\x07\x61\x2c\x41\x8a\xe2\x01\xe7\xe4\xff\xe8\xe5\xc5\x3f\x82\xc6\x84\x2e\xe0\xd2\x39\xe2\x33\x00\x49\x4e\x58\x95\xb2\x32\xfa\x02\xc6\xc4\x56\xd1\x82\x1c\x60\xf8\x30\x49\x40\x3f\x0f\x66\xd6\x24\xc0\x11\xc1\xfd\x0d\x50\x32\x25\x29\x49\xc2\x4c\xc5\x04\x8e\x8d\xa5\xd7\x67\x00\x98\x71\x64\xec\x05\xcc\x49\xbf\x15\x4a\x12\xbc\x8c\x98\x53\x77\xf1\xe6\xcd\x5c\x71\x94\x4d\x5f\x0b\x93\xbc\xa9\x06\x5f\x9d\x41\xa5\xd9\x45\xd0\xd3\xbf\xc0\xce\xdd\xc5\x19\x00\xc0\x8f\x10\xe3\x94\xe2\x8b\xe2\xe3\xff\xc1\x84\xc2\xdf\x00\x73\xc3\x79\x4a\x17\xe0\xd8\x2a\x3d\x3f\x03\xb0\xc4\x99\xd5\xdb\x8f\x79\xc1\x46\xc8\xb8\xf5\xd4\x8b\xcf\xbf\x4f\x73\xa6\x17\xe5\xdf\xc5\xb3\x17\xc0\x36\xa3\xcd\xe7\xc9\xda\xad\x47\xc9\x5a\x63\xeb\x9e\xab\x70\x8e\x51\x4b\x93\x4c\x2a\xb9\x36\xa8\xfe\x42\x9a\x2c\x72\xa0\x6a\xc3\x3c\xc0\x38\x8d\x10\x74\x96\x90\x55\xa2\x54\x07\xcc\x0c\x10\x5c\x4a\x42\xcd\x14\x49\x88\x49\xcf\x39\x1a\x0a\xad\x63\x1b\x93\xde\x52\x53\x69\xfe\xf9\xa7\x46\xac\x0b\x8c\xb3\x46\x4b\xec\x21\x73\xa3\x1e\x49\x5e\xa1\xa3\x83\x11\x25\xfe\x09\x10\xe8\xe8\xf9\xd1\xfa\xa0\x77\x42\xb3\x86\x90\xce\x92\x29\x59\x98\x12\x7f\x21\xd2\x90\x28\x0d\xa8\x25\x24\xf8\x38\x14\x86\x44\x35\x31\x58\x9f\x84\x8f\x27\x83\x52\x01\x40\x23\xa5\xdf\x8c\x7d\x97\x33\xb9\x6d\x48\xbf\xdd\x8e\x81\xbf\x18\xf0\x61\x0e\x68\x2d\xe6\x0e\xd8\xcc\x89\x23\xb2\x83\xe5\x28\x2f\xc9\xa5\xff\x56\x5b\xba\x59\x4e\x9f\x1e\x30\xfd\x70\x4e\x6d\x29\xad\x82\xe5\x23\x2e\x9d\xa4\x28\x76\x79\x85\x21\x40\x9d\x43\xa6\x95\x30\x92\x40\x44\x68\x51\x30\x59\x07\x26\xe3\x32\xc8\x82\xd7\x0e\x18\x5a\xc7\x65\xf7\x6e\x81\x75\x3b\x9d\x65\x4e\x20\x37\x24\xa0\x77\xe8\xd6\x52\x4b\x39\xd7\x58\x98\x65\x5a\xf8\x19\xdf\xb8\xf6\x23\x32\x47\xe8\x2f\xe9\xfb\x23\x70\x33\xfa\xe7\xb6\xce\x77\x64\x67\xc6\x26\x80\xda\x8f\xbe\x7c\x05\x11\xba\x08\x8c\x06\x89\x8c\x43\xa9\x2b\x5b\xeb\x92\x3e\x35\xfe\xa4\x12\x72\x8c\x49\xba\xbb\x94\x70\xa8\xe5\x5c\xee\x98\x92\x17\x0e\x44\x66\x2d\x69\x06\xae\x9e\x00\xa5\x81\x52\x23\x22\xf0\x80\x90\xfb\x83\x01\x9f\x7f\x3f\x76\x21\x28\xd7\x97\x06\x2d\xff\x85\xf1\xce\x5a\x39\x61\x93\x06\x0d\x2b\xc5\xee\x6f\x8a\x0a\x56\x18\xcd\x4a\x67\xde\xc7\xe9\x91\x44\xd6\xaf\x5f\x1f\xab\xdb\xd4\x98\xb8\x4e\xb5\x7e\x0a\x7d\xdf\x41\x78\x25\x07\xeb\x20\xae\x03\x41\xba\x32\x49\x82\x5a\x6e\xdb\xa0\x1c\x75\xa5\x97\x81\x28\xa6\xb9\xd3\x70\x7b\x85\xea\xe3\x6a\x8a\x8e\xae\x12\xd9\x1c\x25\xcb\x99\x22\x91\x97\x76\xee\x76\x83\xb0\x98\xdc\x1c\x86\x96\xf8\x76\xfa\x07\x09\xde\x7a\xf4\xfe\xc6\x2b\x3b\x26\x97\x1a\xed\xa8\xcd\x59\xdf\x1b\xfb\xd0\x0d\x1b\x2c\x14\x02\xfa\x70\x7c\x08\x55\x71\x1c\x7f\xc3\x20\x53\xb5\xfd\xfa\x86\x7a\x6f\xe3\x29\x2f\xf2\xf5\x5a\x1f\xb6\xb7\x37\xeb\xc7\xdd\x7d\x1c\x85\x4e\xb7\xef\x38\x3a\x87\x73\xf8\x74\x3b\xba\x85\x97\xb1\x9a\xfe\xcf\x7f\xe2\xf5\xdc\xbc\x5a\xfa\xca\xaf\x56\x31\xbd\x57\x31\x6d\xbb\x48\x18\x70\x61\x21\x29\xb2\x1a\xae\xd5\xbb\xc0\xc6\xbb\x89\x97\xf7\x8b\xe2\x28\x64\xc1\xb9\x5a\x90\x86\x94\x6c\xa2\x9c\x53\x46\x9f\x18\x83\xb3\x42\xa6\x1a\xd7\x49\x91\xa3\x03\xfc\xe6\x90\xf6\x7c\xf5\x4e\xb2\xc9\xb6\x8b\xb5\xf7\x13\xfe\x25\xce\x43\xe2\xba\x8e\x6d\xaf\x9b\x79\xe9\x8e\x72\xb3\xca\x60\x57\x26\xcd\xeb\xec\x35\x26\x94\xae\x58\x8e\x8c\x66\xd2\xec\x7c\x59\x6d\x34\x15\x66\xf2\x2d\x9b\x30\xa9\x22\x07\x8a\x83\xf9\xb4\xf1\xfd\xca\x81\xf6\xc3\x28\x8a\x6a\x6d\xe7\x07\x0e\xb4\x9b\xb3\xe2\xee\x30\xd3\x49\xc7\x07\xce\x3c\xde\x6e\x9d\xc1\x8f\x29\x8d\x51\x84\x58\xa9\x2f\x6e\x27\x84\x56\x44\xa1\x75\x0e\xc8\x67\xc6\x2e\xdb\x9a\xc0\xdf\x16\x6f\x70\x40\x28\x22\x50\xda\x31\x6a\xe1\xe7\x65\x5a\x7a\x63\x71\x84\x5c\xb5\x41\x30\x2e\xa4\x0f\xa6\xc1\xc4\x64\x3a\xb4\x49\xc5\xa8\xab\x5e\x25\xa1\x67\x1b\x95\x23\xfb\xb0\x27\xc8\xe2\x10\xf3\x94\x62\x26\xa4\xb7\x57\xb3\x3d\xd5\x77\xa9\x67\xc9\xbc\x4b\x1e\xef\x6c\xe7\xcb\x34\x25\x2d\xbd\x99\x6b\x9b\xff\x4b\x29\x83\x89\x8b\x70\xd9\x4c\x89\xde\x56\x54\xd8\x12\x97\x90\x7b\xb4\x4e\x6f\x99\xaf\xe7\xd0\x58\x21\xab\x8f\x8c\x4d\x66\x65\x44\x3c\x1d\x5e\x28\xe5\x64\xbd\xcf\x39\x62\xff\xb7\x13\xae\x11\xc5\x54\xbf\xe8\x16\x23\xcb\x0c\x82\xbc\x84\xe6\x55\x01\x63\x2b\x51\x7c\x37\x59\x7d\xe7\xcf\x22\xd6\x7b\x3e\x45\xd9\xbc\x90\x61\x55\x0d\x71\x54\xe6\xce\x52\xef\xb5\x90\x7b\x12\xba\x57\x49\xa2\xb1\xc6\x18\x24\x49\x79\x70\xd7\x8f\xca\xf1\x4e\x7e\xba\x8a\x48\x3c\x38\x50\x55\x48\x01\x85\x69\xdb\x10\x8b\xa6\xf0\xeb\xe3\x5b\x2a\xb1\xc1\xcf\x8b\x37\x20\xbd\x2b\x4b\xc8\x34\x52\x76\x07\x5e\x18\xf0\x80\xa4\xb2\x24\xd8\xd8\xbc\x39\x08\xbf\xe1\x18\xec\xb1\x69\x51\xda\xf7\xaa\xca\xe8\x01\x3a\x97\x55\xdf\xb2\xfc\x4a\x68\x5e\x7a\x14\x5f\x13\x0f\x2a\xb8\x26\xee\x5b\x64\xe3\x06\xdb\x6c\x79\xaf\xb4\xbc\xb3\x46\xbc\xcb\xcb\xe3\xd0\xed\x73\xdb\x65\x49\x7a\xa7\xca\x65\xbb\x8c\x0c\x6b\x84\x20\xe7\x7e\xf0\x89\xc7\x8f\x57\x7f\x80\x40\x0d\xda\x30\x4c\xcb\x42\xf7\x87\x65\xd8\x80\x72\xa5\x57\x86\x02\xaf\x0a\xa1\xfb\xdc\x66\xae\x36\x86\x16\x7e\xe4\xed\xdb\xbf\x6d\xc4\x91\x71\x0d\x51\x64\x8d\x38\xfe\x4c\xb7\xdb\x9e\x81\xff\x56\xa7\x44\xf4\xc1\xf7\x00\x71\x3c\x09\xbb\x30\x13\xb2\x0b\x25\x76\xa8\x97\x73\x7c\x52\x62\xb4\x73\x62\x98\x2a\x8d\x3e\x31\xf9\xbf\xca\x0d\x1c\xb7\x7c\xb6\x7b\xc7\xdd\x48\xf2\xb0\x2a\x4a\xb7\xc0\x5e\xef\xed\x94\x4b\x63\xcc\xdb\x4c\xb3\x3e\x7b\x45\xe2\x38\x43\xaa\x82\x5a\x27\xab\x4c\x18\x2d\x97\xd6\xa8\x8f\x84\x30\xe3\x4f\xc2\xdf\xc6\xb5\xa9\x79\x42\xcb\x1d\x35\x37\xe9\x1e\xc5\x4d\xfa\x64\xf5\x3e\xc5\xe6\x63\x4a\xcc\x82\x5a\x75\xff\xaf\x56\xab\x50\x7c\x92\x00\xac\x57\x02\x3b\x3a\xbd\x9a\x6b\x8c\x77\xf7\x34\x74\x28\xc6\x5d\x18\x2d\xb6\xfd\xca\x2c\x54\x65\xf8\xfe\x53\xb7\xab\x44\xa9\xcb\xc3\x7b\x53\x75\x03\x9a\x4c\xb3\x4a\x3a\x76\x2a\x99\xd6\x4a\xcf\xfd\xc2\xb8\x53\x6e\x8f\x57\xfd\x58\xb1\x0d\x60\x66\x5e\x8e\x17\x61\x8b\xc6\x92\x23\xcd\x61\xfb\x47\xb0\x5a\x10\xdc\x7d\x18\x2d\xcf\xc1\xe2\xdc\x0b\xa5\x0b\x7b\x9e\x4c\xb0\xed\x54\x28\x55\xb2\xa6\x43\xf1\x52\xee\x5d\xd9\x4e\xc1\xf6\x0b\xf1\xdd\x6a\x11\x6e\xac\x24\xfc\xe4\xa2\x94\x18\xdc\xb1\x8e\x73\x99\x7d\x15\xc4\x70\xe4\xae\xf5\xe2\x1e\x6d\xb3\xaf\x41\x82\xa9\x47\x46\x7a\xa1\x8c\xd5\x09\x69\x86\x05\x5a\x85\xd3\xb8\xe0\xe9\xca\xdd\x15\x65\x41\x18\x6b\x95\x4b\x8d\x96\xde\x0f\xc3\x01\xe1\xc6\xce\xee\x20\x1e\xb7\x28\xa4\xdf\xf0\xb8\x04\xd3\xcf\x05\xbb\xb5\x93\x9b\x36\xe7\x29\x28\xb4\xb9\x4e\xd0\x66\xbd\x0c\xad\x03\xd2\xbf\x1b\xd5\x68\x37\xc8\x65\x82\x09\xc5\xb3\x72\x1f\xbc\xe1\xfe\x64\xa8\xb4\x7d\x53\x5a\x6e\xa6\xed\xa4\x96\xf2\x00\xda\x73\x38\xed\x38\xe6\xc0\x4c\xd3\x5a\x2a\xb6\x85\x8b\x71\xdd\x3a\xf9\x28\x31\x3b\xa7\x9b\x57\x11\xea\x39\x15\x70\x56\xc7\x19\x60\x74\xb8\x6f\x7a\xea\xf5\xbd\x13\xcb\xe4\xe3\x4f\x2c\x3a\xa2\xb9\x31\xf2\x93\xaa\x4d\xbd\x6b\xce\x13\xa3\x63\x48\x8c\x2c\x6e\x37\xfa\x84\x55\x84\xd3\xd7\xc1\x54\xaf\x7f\xb2\x54\xa4\x8e\x59\xbb\x5b\x75\xde\x22\xba\xf1\x4c\xf2\xc6\xcb\x2d\x6b\x2e\x86\x45\x9f\x1b\xee\x44\xee\x82\x0c\x07\xae\x5f\xd3\xdf\x0a\xf1\x5a\x01\xae\x93\x2e\x95\x3e\xca\x41\x8f\x86\xdc\xcf\xa6\xc5\xf9\xd9\x39\x58\x9a\x2b\xc7\x36\x1f\xee\x02\xbb\x94\x63\x9a\xff\x9b\xf2\xc6\x93\x8d\xd5\x19\xdf\x52\x98\x07\xca\xbb\xaf\x3a\xd5\x5b\xea\xad\x5e\x8d\xb6\x1f\x58\x0c\xd6\xbd\xb7\x2e\x64\xfd\x57\xde\x4b\xfa\xd7\x8f\x29\x6a\x49\xb2\xc5\x0a\x1a\xa8\x9c\xf4\x97\x3d\x06\xb7\xc7\xbb\xb0\x05\x55\x1f\x0d\xe5\xf6\xd4\x33\xa5\xbf\xf7\x94\xb5\x17\xfe\xa3\x5f\x6f\xc7\xa3\x7a\xfc\x61\xe8\xd9\xd2\xcf\x94\xe6\x7f\xfc\x7d\x60\xfa\x1f\x9b\xe9\x7f\x7c\xf6\xf4\x7f\xfe\x69\x60\xfa\x85\xc2\x75\x17\x33\x00\x37\xc8\x87\x3b\x35\x79\x4a\xa5\xfc\x2f\xdd\xab\xe7\x64\x8b\x03\x6e\x9a\x9e\x60\x8d\x11\xc5\x85\x35\xea\xaf\x30\x6c\x59\xe2\x9b\xe0\x3e\x20\xa4\xfb\xd2\x40\xfb\x49\x2d\x6d\xf9\xf4\x79\x7d\xbd\x32\xe4\x63\x46\x36\xaf\x77\xbf\xd0\xde\x2e\xbe\x23\xff\x7b\xa0\xfc\x76\xfa\xc7\xd6\x33\xe3\xf2\xbb\x63\xe2\xfb\x35\xf4\xfd\xee\x46\xfe\x3f\x00\x00\xff\xff\x85\x38\xe5\x4f\x63\x3c\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 15459, mode: os.FileMode(420), modTime: time.Unix(1520746575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1520144733, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

