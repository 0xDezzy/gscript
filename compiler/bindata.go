// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x73\xdb\xb6\xb3\x7f\xf7\xa7\xd8\xa9\xcf\x4c\xec\x99\x36\x4d\x5a\x9f\x3c\xf8\xcd\x96\x12\x47\xe7\xd4\xb1\x22\xd9\x4e\x67\x3a\x9d\xce\x8a\x58\x89\x88\x49\x80\x05\x40\xd9\xfa\xf6\xff\x01\x40\xea\x4a\xca\x14\x45\xda\x4e\xf2\xd7\xa3\x70\xdd\xdf\x5e\xb0\xbb\x58\xf0\xb0\x89\xdf\xc1\xe1\xc1\x21\x04\x52\x11\x24\x18\xdc\xe1\x84\xec\x1f\x8d\x4c\xfc\x0b\x08\x8c\xe9\x14\xce\xb4\x26\x73\x00\xc0\x48\x07\x8a\x27\x86\x4b\x71\x0a\x03\x32\x8a\xd3\x94\x34\xa0\x5b\x98\x18\xa0\xed\x07\x63\x25\x63\x30\x21\xc1\xed\x25\x50\x3c\x22\xc6\x88\xc1\x98\x47\x04\xda\x48\x45\xaf\x0f\x00\x30\x35\xa1\x54\xa7\x30\x21\xf1\x26\xe0\x8c\xe0\x28\x34\x26\xd1\xa7\xbf\xfe\x3a\xe1\x26\x4c\x47\xaf\x03\x19\xff\x9a\x37\x1e\x1f\x40\x4e\xd9\xa9\xa3\xd3\x4e\xa0\x26\xfa\xf4\x00\x00\xe0\x17\x88\x70\x44\xd1\xa9\x5f\xfc\x13\xc6\xe4\xfe\x06\x98\x48\x33\x4b\xe8\x14\xb4\x51\x5c\x4c\x0e\x00\x14\x99\x54\x89\xf5\x61\x76\x63\x5d\x34\xb8\x36\xea\xd5\x5f\x7f\x8f\x66\x86\x5e\x65\x7f\xfb\xb1\xa7\x60\x54\x4a\xab\xe3\x49\xa9\xb5\xa1\xa4\x94\x54\x45\xe3\x72\x38\x07\x28\x98\x8c\x87\xf9\xbe\x56\x50\xbd\x20\x41\x0a\x8d\x43\x55\xb9\x7e\x80\x51\x12\x22\x88\x34\x26\xc5\x83\x8c\x1c\x90\x63\x40\xd0\x09\x05\x7c\xcc\x89\x41\x44\x62\x62\xc2\xb6\xa0\xd5\x46\x45\x24\xd6\xc8\xe4\xc2\xbc\x3b\x29\x85\x75\x8a\x51\x5a\xca\x89\x47\x90\xb9\xe4\x0f\xc4\x3a\xa8\xa9\x32\x44\xb1\x1d\x01\x01\x6a\xfa\xf1\xd0\xea\x89\x0d\xd5\x2c\x40\x48\xa4\xf1\x88\x14\x8c\xc8\xdc\x13\x09\x88\xb9\x00\x14\x0c\x62\x7c\x68\x0b\x86\x98\x97\x61\xb0\xdc\x09\x1f\xf6\x06\x8a\x3b\x00\x4a\x51\xfa\x53\xaa\xf3\x99\x21\xbd\x0e\xd2\x9f\x57\x03\x30\xf7\x12\xac\x9a\x03\x2a\x85\x33\x0d\x46\x4e\xc8\x84\xa4\x5a\xb3\x51\x76\x27\x67\x76\xad\x6d\xe6\x66\xde\x7d\x54\xa1\x7b\x75\x9c\xb6\x99\xb4\x1c\x2c\xab\x71\xc9\x30\xc1\x60\x13\x2f\xd7\x04\x28\x66\x90\x0a\x1e\x48\x46\x10\x84\xa8\x30\x30\xa4\x34\xc8\xd4\x64\x4a\xe6\xa4\xb6\x45\xd5\xda\xcd\xba\xd7\x53\xac\xab\xd1\x38\xd5\x01\x9a\x12\x03\x74\x8e\x7a\xc9\xb4\x64\x7d\xa5\x82\x71\x2a\x02\xdb\xe3\x1b\xa7\xbe\x4b\x72\x07\xfa\x19\x7d\x7f\x08\x5c\x76\xff\x77\x9d\xe6\x3e\xa9\xb1\x54\x31\xa0\xb0\xad\x47\xc7\x10\xa2\x0e\x41\x0a\x60\x68\xb0\x2d\x72\xd9\x56\xbf\xa4\x49\x8a\x87\x1f\xcf\xde\x6e\x21\xd9\x36\x6f\xa1\x19\xc3\x30\x2c\xa4\xd7\x36\xbc\x38\x5a\xcf\xdf\x9d\xbc\x17\xd6\x80\x15\xc8\x35\xbd\x3b\x01\x72\x8d\xf6\xec\x5c\x1c\x0d\xdf\x32\xb1\x5d\xda\x42\x2c\xa3\x9c\xd8\x4c\x9f\x8d\x7c\x62\xc2\x6b\x68\x70\x75\xe7\xfc\x81\x82\xf7\x4b\xee\x78\x65\x17\xfd\x9a\xc7\xa4\x0d\xc6\xc9\xa6\x6b\x65\x5c\x6c\xa3\x67\xda\x50\xfc\x4a\x43\x90\x2a\x45\xc2\x80\xc9\x47\x00\x17\x40\x89\x0c\x42\xb0\xda\x83\xa6\x39\xe3\x00\x7f\xfd\xbd\xab\x63\x94\xf9\x5b\x25\x54\x7e\xc4\x68\xc3\x77\x1c\x1a\x99\x38\x0a\x73\xc2\x6e\x2f\x7d\x44\x17\x48\x61\xb8\x48\xad\x8c\x58\x58\xd3\x66\xed\xfc\xae\xb4\x8d\xa4\x8c\x8a\x48\x6b\x26\xf0\xb5\x11\xb5\x25\xb2\xb5\x88\xfa\xbd\x43\x90\x3a\x32\x8e\x51\xb0\x75\x1e\x64\xad\x3a\x93\x32\x08\x7c\x37\xbd\x1f\xdc\x96\xa0\x62\xad\x1c\xa1\xa6\x4e\xcc\xca\x8d\xcb\xbc\x67\x10\xb3\x33\x35\xd1\x9b\xfa\xe8\x3b\x97\x5b\x2f\x45\xe6\x6a\xf4\x95\x02\xb3\x36\xf4\xf6\xd2\x12\x3b\x20\x9d\x48\xa1\x69\x9b\xb0\x7e\x90\xea\xae\x1e\x6c\x30\xe5\x08\x68\xd5\xf1\xce\x45\x89\x51\xf4\x0d\x03\x99\xf0\xf5\xe9\x4b\xe2\x9f\xfd\x0c\x61\x33\xe2\x6e\xf5\xc8\x65\x7e\x9a\xd6\xa3\x43\x38\x84\xeb\xab\xee\x15\x1c\x45\x7c\xf4\x8f\x5d\xe2\xf5\x44\x1e\xcf\x65\xe5\x8b\xe2\x86\x3e\xf0\x68\xe3\xd4\x73\x0d\xda\x1d\x43\xde\xaa\x2d\x9f\x75\xfe\xec\x73\xfb\xbd\xe7\x26\x74\x56\x70\xc2\xa7\x24\x20\x21\x15\x73\xad\xb9\x14\x7b\xea\xe0\xd8\xef\xa9\x40\x74\x12\x34\x61\x05\xb9\xa9\x92\xae\x5a\xcc\x49\x2a\x5e\x17\xb1\xed\xf1\xb5\x9d\x44\x5b\x90\x4c\x51\x06\xe3\x51\x31\xb3\xbb\xab\x75\xde\x3a\xbe\x5c\x53\x9c\xd4\x64\x9a\xa1\x38\x91\x0a\xd5\xcc\xb3\x0f\x05\xcb\x09\x74\x5c\x1c\xa7\x51\xe4\xfa\xe4\xd2\x68\x42\xd7\xc7\x2e\x5e\xcf\x91\x2d\x67\xa4\xd8\x92\x82\xdc\x89\x91\x25\xf9\xca\x34\x8a\xb6\xcb\x4a\x2b\x0c\xea\xc8\x64\x56\xc4\x9b\x01\x21\xf3\x18\x5b\xff\x80\x84\xd1\x20\xc7\x20\x05\x2d\x18\x11\xc8\x84\x93\x06\x6e\x1c\xab\x84\x34\x21\xa9\x8a\x0a\xd6\x04\x3f\xb4\x0a\xfa\xd5\x74\x8b\x69\x53\xb1\xe7\xee\x8a\x55\x1b\xf8\x01\x25\x11\x06\xce\x98\x15\x47\xe3\x43\x42\x15\x84\xce\x85\x77\x90\x8f\xa5\x5a\x78\xf3\x5e\x11\xdc\x0c\x1a\x08\x83\x10\xb8\xd0\x06\x45\x60\xfb\xa5\x82\x59\x66\x99\x10\x4d\x9e\xb7\x81\xc1\x92\xd6\x60\x2c\x53\xe1\xf2\x3a\xbe\x55\xe7\x53\x31\x68\x98\x47\x59\xcb\x63\xb0\xc7\x68\x82\x2a\xec\xc9\xb6\x19\x93\x58\x77\x37\x1e\x09\x36\x32\x3a\x33\xcc\xeb\x1c\xb4\xb5\xf9\x7c\x96\x24\x24\x98\x65\x73\x61\xb6\xf2\x8c\xf9\x28\xcd\xab\xcb\xaa\xf9\xb3\xbc\x22\xcf\x4b\x9c\x83\xdc\x20\x77\x1a\x3b\x9a\x1a\x56\x8d\x05\x64\xc5\x9a\xb1\x8a\xd9\x22\xbe\x7d\x21\x78\x21\x63\xc3\x65\xab\xbd\xc3\x85\x55\x2d\xb8\xba\x14\x51\xb1\x57\xe4\x5b\xe6\x16\x04\xcd\x1c\x34\x77\x52\x4a\x35\x3f\x4c\x51\xcc\xd7\x79\x2a\xc4\x1a\xb7\xa7\xc8\xca\x0f\x32\x5c\x73\x10\xe6\x74\xef\x9b\x12\x69\x9a\xf6\xdc\x48\x94\x68\x5a\x4b\x46\xca\x02\xf7\xfe\x81\x6b\xb3\x61\x9f\x3a\x21\x05\x77\x1a\x78\xae\x52\x40\xae\xdb\x3a\x88\x3e\x6a\x7f\x7e\xf8\xe6\x44\xac\xe0\x67\xb7\xd7\x22\x7a\x1d\x45\x68\xa8\xcb\xd5\x06\x78\xae\xc1\x02\xc4\xb8\xa2\xc0\x48\x35\x2b\x57\xc2\x6f\x58\x07\x1b\x8c\x2a\xb9\xf8\x4a\xee\xaa\xa1\xb5\x14\x4d\xcf\xad\xd0\x13\x46\xf6\x95\x0c\xd6\x59\xe6\x5b\x41\x87\x14\x45\xee\x32\x8c\x0b\x17\x88\x24\x4a\x4e\x39\x23\x06\xfd\x5e\x77\x89\x41\xb7\x33\x95\xea\x42\x0e\x4d\x6d\xcb\x9b\x37\x6f\x57\xb8\x34\xa7\xae\xc4\xa5\xcd\x57\xad\xe2\xaa\x2a\x19\x04\xa4\xb5\xdb\x0e\x54\xf6\x57\x55\x2a\x0c\x8f\xeb\xc9\xf9\x02\xb9\x21\x45\xe3\x6a\xc8\xd9\x33\x39\x41\x9f\x71\xcc\xb7\xfc\x7c\xf8\x35\x87\x49\x33\x32\x69\x25\x5e\x90\x69\x4d\xd6\xbb\x9f\x86\x9f\x53\xd2\x19\x62\xab\xec\xd2\x3a\x75\xa6\xa9\xfb\x69\x08\xff\xa6\x64\x4d\xd3\x92\x4d\xe7\xe6\x95\x0d\x0b\xe6\xe9\xbb\xdd\x2d\x92\x70\xa5\x45\x05\x5c\x32\xa8\x26\x54\xea\xc0\xaf\xb8\xfb\xff\xda\xcd\xef\xc6\x4c\x14\xfa\x9e\x4a\x6f\x13\xb7\x9f\x00\xfb\x28\xc7\xc7\xeb\xeb\xfe\x05\x99\x62\x17\xc4\x28\x3e\x5d\x8a\xe4\x5c\xae\x43\xb8\x21\x47\xfa\xd8\xfa\xac\x89\xf4\x41\x48\x4d\xbd\x28\xc5\x3a\x55\xd1\xae\x91\x12\x9a\x54\x77\x36\x75\xa8\x6a\x90\x54\xd7\x77\xd9\x07\xfb\xbe\xd4\xe6\xff\x86\x57\x9f\xd6\x81\xbf\x56\x28\x74\xcc\xad\xbb\x02\xb6\x1d\xa4\x4b\x55\xfb\xd4\xd2\xcd\xe0\x8f\x5c\xe2\x55\x9a\x45\xc6\x96\x23\x19\x04\xe0\x6c\x98\xef\xb0\xa1\x05\x4f\xc0\x9e\xa5\x5e\x5f\xb5\x5c\x4f\xda\xb5\xc9\x45\xb5\x9a\xb4\x7f\x52\x4e\x0e\x87\x1f\x7d\x9e\x7d\x55\x81\x52\xe7\x65\x66\x79\x7f\x90\x02\x30\xb3\x22\x10\x4a\x6d\xdc\x3d\xc0\x70\xf8\x71\x23\x3d\xa8\x48\xa7\x91\x81\x23\x6d\xd8\x55\x6a\x40\x8a\x68\x76\xfc\x1a\x6e\x34\x69\x18\x49\x13\x42\x82\x5a\xdf\x4b\xc5\xdc\xc0\x3b\x9a\x39\xfe\x92\x30\x3c\x40\xe7\x82\x48\xb7\xfe\x1e\xe7\x55\x29\xe3\xed\xb6\xcf\x04\xeb\x4b\x55\xc5\x10\x06\x95\xae\x1e\x52\x4d\xaa\x62\x92\x32\x27\xbc\x42\xd7\x3b\xda\xb9\x48\xa9\x44\x80\x9e\xc0\x08\x0f\x49\x4d\xa9\x8f\x26\xbc\x9a\x92\xb2\xca\x3c\xdc\xbc\x06\x45\xe5\xc2\x17\xa7\xeb\x43\xb8\xa7\x91\xb6\x83\x94\x97\xaa\xcc\x31\x97\xca\xc0\x11\xa3\x31\x5a\xf1\x39\x39\xf9\xfd\xd8\x65\xdf\xfe\xe7\xcf\xc5\x9f\xbf\xbf\x39\xce\x6b\xef\xe4\x18\x34\x05\x52\xb8\x7c\xa9\x75\xef\x03\xbb\xc0\xdc\xda\x67\xd3\x2b\x29\x0d\x31\xe0\x62\xc5\xfd\x6f\x41\xb4\x92\x6a\x32\x55\x31\x99\x61\x59\x21\xd3\xf5\x09\x5b\xf4\x31\xf5\x75\xa7\x6f\xd5\xa2\x27\x6e\xf4\xc6\x49\x3a\x34\x2e\x9e\xba\x0f\x5d\x35\x9f\x8d\x9d\x84\x5c\xc4\x53\xd7\x9d\xbe\x67\x1d\xd7\x80\x53\x8c\xf8\x28\x4b\x9b\xa6\xad\x18\xef\x6d\x40\x97\x9b\xe5\xaa\x17\xde\x0b\x40\x6e\xba\x75\x01\xb9\xe9\x7e\x87\x80\x5c\x90\xf9\x43\x06\x18\xf5\xfa\x1b\xc9\x8a\x0b\xf2\xaa\xed\x33\xa8\x72\x0c\xbd\x04\x90\x31\x45\xda\x9a\x7c\x4b\xb8\x3d\x15\xac\xed\x6d\xc0\xa3\x2d\x71\x3f\xf3\xe5\x36\x8d\xe6\xe2\x06\x78\x1b\x6d\x97\x67\x9d\x33\x3f\x47\x21\x75\x96\x80\xcb\xb3\x4e\xbe\x8e\xcf\xf3\xbb\x58\x8b\xd4\x18\x83\xec\x86\x13\x05\xf4\xfa\xd3\x93\xbc\x57\xdb\xd4\x3e\x9d\xa1\x6f\x26\x3c\xb2\x61\x97\xd4\xad\x45\x5d\x1f\xb8\x60\x7d\x25\x83\xf3\x59\xf6\x6c\x61\x3d\x1a\x98\x3b\x28\x7d\x9e\x65\xab\xb3\x13\x21\x0b\x90\x7f\x06\xee\xd9\x9a\xff\x01\x01\x0a\xa7\xd9\xa3\xec\x7e\xe7\xe7\x79\xb6\xc8\xea\xb6\x87\xc8\xdd\x6b\xd4\xd4\x69\xa9\x4b\x54\x5a\xc9\x60\xf7\xb7\x17\xf5\x6a\x19\xec\x5a\x35\xf3\x12\xda\x60\x14\x0d\x5d\x75\x88\x75\x01\x78\xb0\x81\x7a\xd6\x47\x2f\x3c\xc7\x11\x17\x68\x83\x5e\x57\x23\xe7\x0b\x4b\xf4\x7c\x6c\xfd\x4a\x80\x52\x24\xab\x9d\xb7\x15\x1d\x38\xc6\x75\x12\xe1\x6c\x1b\x6b\x96\x7b\x2f\x90\xd8\x8d\x91\xdc\xa3\x56\xcf\x17\xb3\x9e\x56\xc6\x8d\x62\x4d\xc8\x7d\xb1\xa7\x80\x7f\x1b\xae\xa5\x67\x93\x32\x35\x29\x97\xc9\x23\x84\xcb\xe4\xc5\xd2\xbd\x0f\xcf\x07\x14\xcb\x29\x6d\xa5\xfd\x46\xf0\x85\x2a\xbe\x48\x00\x94\x25\x02\x6b\x0a\x3d\x9f\x08\x8c\x36\xaf\xf2\x85\xbb\x83\xd2\xae\x35\xab\x6c\xf1\x56\x68\xff\x9c\x68\x19\xe1\x3a\xdf\x4a\x91\x1d\x7e\xd4\x54\x37\xef\xd9\x0f\x52\x21\xb8\x98\xd8\x83\x71\xc3\xb5\x19\x2c\xae\x21\xe7\xbe\x1b\x17\x3e\x05\x99\x28\xd2\x36\x26\x17\x13\x1b\x59\xf1\x29\x41\xbf\xd7\x9d\xd7\xe7\x46\x33\xbb\x29\xe1\xf9\xb9\x37\x82\xdb\xaa\x55\x13\xce\x0a\x9c\x3a\xbb\xcb\x56\x43\xda\x0b\x32\xfd\xc5\x21\x5c\xea\x49\xd8\xce\xde\x95\x68\x5d\xb0\x76\x13\x99\xc7\x3c\x88\xf6\x90\x7b\x2f\xa6\xb7\xa8\xca\x65\x0d\x62\x4c\x2c\x64\x24\xa6\x5c\x2a\x11\x93\x30\x30\x45\xc5\xd1\x46\x49\x76\x0a\x9d\x15\x15\x70\x05\x81\x54\x8a\xeb\x44\x0a\x66\xe5\xd0\x15\x2e\xaf\x14\x34\xb5\x22\x71\x53\xbf\xfb\x15\x89\x8b\x31\xf9\xcb\x63\x57\x31\x9e\xf0\x28\x6c\x13\x1d\x47\xcd\xb2\x1b\x5a\x04\x48\xf3\x62\x54\x40\x5d\x2b\x8f\x7e\x86\x14\x8d\xb3\xf2\xaf\x92\x77\xce\xfe\x8e\xca\x84\x79\x0d\xc9\x86\x69\xc9\x0a\xe3\x2d\x0e\xfb\x95\x89\x56\xb4\x34\xb5\xcb\x00\xa5\xae\x77\x81\x1d\xc6\x72\x23\xe9\xda\x09\x51\x4c\xc8\x83\xb3\xa8\xe2\xf3\x69\x32\xbb\xc3\xa6\x90\xa8\xe5\x26\xef\x5e\xa8\x57\x13\x9a\x4b\xc9\xae\x79\xa1\xe9\x5d\x12\x9e\x08\xb5\x81\x58\x32\xff\x0a\xd9\x1a\x2c\xaf\x4e\xcf\x03\x53\x31\xfd\xf1\x9c\x90\x22\xcc\xb6\x8b\x55\xed\xca\x88\x4b\x8b\xc9\xac\xf4\xd1\xcd\x92\x88\xa1\x8f\x73\xdd\xdb\xe5\x4d\x20\x5d\x21\xf8\x73\xca\x9b\xdf\xde\x56\x00\x97\x91\xce\x88\xde\x49\x40\x77\x06\xb9\x99\xa4\xc5\xe1\xc1\x21\x28\x9a\x70\x6d\xd4\xac\xbd\x0f\x4d\x30\x36\xa0\xc9\xff\xd3\xac\xb4\xa0\x6f\x51\xda\x3a\xdf\x8c\xbf\x79\xa8\x79\xea\xe4\xb3\x14\x73\x3d\x6f\xdd\x5e\xa7\xd7\x5a\xf4\xbe\xf5\x20\x6b\xde\xf3\x9e\xa3\xff\xfe\x21\x41\xc1\x88\x6d\xe1\x82\x00\xca\x3a\xfd\x97\x1f\xad\xf3\xe3\xdc\xa5\xa0\x8a\xb5\x21\x4b\x4f\xfd\xa0\xe8\x3f\x7e\xc7\xd8\x04\xfe\xdd\x2f\x57\x83\x6e\x31\xfc\xae\xe9\x87\x45\x3f\xe5\xc2\xfc\xfe\x5b\xcb\xe8\x7f\x2e\x47\xff\xf3\x0f\x8f\xfe\xbb\x93\x96\xd1\xf7\x04\x17\xbd\x47\x00\x5c\x41\xde\x5d\x31\xcd\x12\xca\xf6\x7f\xa4\x8f\x7f\x24\x5e\x54\x78\x01\xbb\x07\x37\xba\x14\x79\x6e\x14\x57\xee\xaf\x71\xe2\x9b\xc0\xbd\x45\x90\x6e\x33\x06\x3d\x8e\xd4\x9c\x97\x2f\x1f\xaf\xe7\x73\x43\x3e\xa7\xa4\x66\xc5\xe2\x97\x55\x2c\x7e\x3f\xf2\x77\x47\xb3\xab\xd1\xd7\xb5\x31\x83\x6c\xdd\x01\x99\xdb\x25\xe8\x5f\xea\x8d\xb5\x36\x84\x91\xab\x5a\x6b\x27\x48\xbb\xc4\x3b\xba\x11\x5d\x1a\xa5\x93\x49\x96\xf2\x5b\x11\x0a\xdb\xbe\xf2\x05\x89\xf9\xed\x74\x2a\x80\xcd\x87\xc1\x68\x06\x68\x0c\x06\xa1\x4b\xd9\x67\x2d\xa4\xc0\x48\xe0\x46\xfb\xca\xf1\x9a\x72\x94\x41\x50\x25\x89\x76\xef\xbe\x0a\xb0\xc6\xa5\xb2\xda\x92\xc6\x74\xca\x62\x54\x8e\xe0\x80\xa6\xa4\xb4\x07\xd1\xc3\x62\x21\x72\x45\x30\xa0\xc9\x58\xe4\xd6\x99\x60\xff\x63\x94\xa3\xb9\x18\x48\xea\x3b\x46\xb1\xa7\xbb\x19\x91\x7d\x7f\xf9\xb3\x61\xf4\xb9\x0e\xa4\xc5\x12\xee\x09\x97\x2b\x9f\x0a\xc5\x93\x6b\x18\x91\xff\xa6\x95\x9b\x75\x8f\x3a\x89\x1d\xa0\xe3\xfa\xdc\x2e\xda\x5d\xac\xf9\xa4\x18\xba\x87\x5b\xbd\xf1\x17\x2e\xe8\x82\xcc\x8d\xe0\x0f\x1f\x78\x44\x9f\x30\xde\xfe\xd0\x2b\x2f\x92\x72\xcf\xbc\xdc\x7b\xe2\xec\xf3\x6f\xec\x0f\x3e\x9a\x7f\x07\xcc\x7d\x6c\x83\x18\xfc\x94\x0a\xfe\xe0\x3e\xd3\xf0\x8f\x5d\xf5\x1f\xff\x38\xec\xa7\xd7\x70\x1d\x72\x87\x3b\x82\x46\xc1\x46\xf2\x01\x02\x3b\xbf\xb5\x01\x2c\xe3\x5d\x5e\xe3\x52\xc4\xae\x3c\xef\x7e\xcf\x4d\xe8\x2a\x26\x2d\x19\xcb\xf7\x12\x4f\xc2\x41\x54\xf4\x85\xb2\x6b\xcb\x9e\xb0\x5b\x78\x16\x26\x0e\x3d\x82\x37\x59\x79\x6f\x19\xe7\x8c\x04\x4d\xb4\x8e\x6a\x5e\x14\xec\x9e\xf1\x23\x77\xf7\x5e\x9a\x14\x27\x9d\xf9\xf5\x3c\xc0\x68\xce\xa4\xec\x9d\xf4\x1e\x37\x5b\xbb\xc2\xdb\x13\x67\x19\x7d\xcf\xa4\x20\x9d\xfe\x4d\x47\xa6\xc2\xf4\xf4\x47\x3e\x09\x49\x5d\x87\x28\xae\xc4\x86\xe9\x2e\x04\x39\x2b\x5f\xb8\x27\x4b\x0b\x48\x01\x21\x6a\x40\x03\x11\xa1\x36\xf0\x1b\x74\xfa\x37\x1a\x8e\xa4\xbb\x3e\x24\x7d\x0c\x47\x2b\xca\x70\xfc\x92\x61\x5e\x43\x69\x70\x76\x79\x16\x7b\x98\xce\x29\x92\xf7\x6f\x2f\xce\x1b\x40\xe8\xed\xc5\xb9\x95\x42\x85\xf1\xb7\x04\x4d\x89\x1b\xf5\x9f\x00\x00\x00\xff\xff\xa8\x6b\x60\x76\xf4\x59\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 23028, mode: os.FileMode(420), modTime: time.Unix(1521223172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

