// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x73\xdb\x38\x0e\x7f\xcf\x5f\x81\x99\xdc\x4c\x93\x99\xdd\x6e\xef\xda\xdb\x87\xbc\xa5\x71\xbf\xee\x2e\x8d\x6b\x27\xd9\xce\x74\x76\x6e\x60\x11\xb6\xd8\x48\xa4\x96\xa4\x9c\xf8\xbf\xbf\x01\x25\xf9\x53\x92\x65\x45\xea\xe7\xf9\x51\x24\x25\xe2\xf7\x03\x40\x00\x84\x8f\xbb\xf8\x1d\x1d\x1f\x1d\x43\xa0\x0d\x41\x82\xc1\x1d\xce\x88\x1f\x74\xf2\xe2\x5f\x41\x61\x4c\x67\x70\x6e\x2d\xb9\x23\x00\x41\x36\x30\x32\x71\x52\xab\x33\x18\x91\x33\x92\xe6\x64\x01\xfd\x87\x49\x00\xf2\x3c\x98\x1a\x1d\x83\x0b\x09\x6e\x2f\x81\xe2\x09\x09\x41\x02\xa6\x32\x22\xb0\x4e\x1b\x7a\x7a\x04\x80\xa9\x0b\xb5\x39\x83\x19\xa9\x67\x81\x14\x04\x27\xa1\x73\x89\x3d\xfb\xed\xb7\x99\x74\x61\x3a\x79\x1a\xe8\xf8\xb7\x62\xf0\xf4\x08\x0a\xc9\xce\xbc\x9c\xfc\x02\x33\xb3\x67\x47\x00\x00\xbf\x42\x84\x13\x8a\xce\xb2\x8f\xbf\xc7\x98\xfc\x63\x80\x99\x76\x8b\x84\xce\xc0\x3a\x23\xd5\xec\x08\xc0\x90\x4b\x8d\xda\x5e\xc6\x1b\x1b\xa0\xc3\xad\x55\x4f\x3e\xfd\x39\x59\x38\x7a\x92\x3f\xce\xd6\x9e\x81\x33\x29\x6d\xae\x27\x63\xb6\x96\x92\x31\xda\x94\xad\x2b\xe0\x1c\xa1\x12\x3a\x1e\x17\xfb\xda\x40\xf5\x0d\x29\x32\xe8\x3c\xaa\xc6\xcf\x03\x8c\x92\x10\x41\xa5\x31\x19\x19\xe4\xe2\x80\x9e\x02\x82\x4d\x28\x90\x53\x49\x02\x22\x52\x33\x17\xf6\x05\xad\x75\x26\x22\xb5\x25\xa6\x54\xee\xf7\x17\x95\xb0\xce\x31\x4a\x2b\x99\xd8\x83\xcc\xa5\x7c\x20\x71\x81\x96\x1a\x43\x14\xf3\x0a\x08\xd0\xd2\xcf\x87\xd6\x3b\xb5\x63\x9a\x25\x08\xa9\x34\x9e\x90\x81\x09\xb9\x7b\x22\x05\xb1\x54\x80\x4a\x40\x8c\x0f\x7d\xc1\x10\xcb\x2a\x0c\xd6\x27\xe1\xc3\xa3\x81\x92\x1e\x80\x4a\x94\x3e\x6a\xf3\x72\xe1\xc8\x6e\x83\xf4\xf1\x6a\x04\xee\x5e\x03\x9b\x39\xa0\x31\xb8\xb0\xe0\xf4\x8c\x5c\x48\xa6\x37\x1f\xc5\x3b\x39\xe7\x6f\xd5\xb9\x9b\xe5\xf4\x49\x83\xe9\xcd\x71\xaa\x73\x69\x05\x58\x6c\x71\xc9\x38\xc1\x60\x17\x2f\x3f\x04\xa8\x16\x90\x2a\x19\x68\x41\x10\x84\x68\x30\x70\x64\x2c\xe8\xd4\xe5\x46\xe6\xb5\xb6\x47\xd3\x3a\xcc\xbb\xb7\x33\xac\xab\xc9\x34\xb5\x01\xba\x0a\x07\xf4\x12\xed\x9a\x6b\xc9\xe7\x6a\x03\xd3\x54\x05\x3c\xe3\x3b\x97\x7e\x40\xfa\x00\xf9\x05\xfd\x78\x08\x5c\x0e\xfe\xb9\x2d\xf3\x90\xcc\x54\x9b\x18\x50\xf1\xe8\xc9\x29\x84\x68\x43\xd0\x0a\x04\x3a\xec\x4b\x5c\x51\x1b\x97\x74\x29\xf1\xb5\x8c\xc9\x3a\x8c\x93\xdd\xa3\xc4\xf9\x58\xce\x2e\xac\xa3\xf8\x89\x85\x20\x35\x86\x94\x03\x57\xac\x00\xa9\x80\x12\x1d\x84\xc0\x00\xa1\xeb\x0e\x0c\xf8\xf4\xe7\xa1\x07\x41\x7e\xbe\x54\x48\xf9\x16\xa3\x9d\xb3\x72\xec\x74\xe2\x25\x2c\x04\xbb\xbd\xcc\x22\xd8\x40\x2b\x27\x55\xca\x3a\x4e\x0f\x14\xa4\xdd\xea\xf5\xa1\xb2\x4d\xb4\x8e\xca\x44\xeb\x26\xd0\xe7\x0c\x82\x85\xec\x2d\x83\x78\xe5\x11\xa4\x0b\x1d\xc7\xa8\xc4\x36\x07\xf9\xa8\xcd\xb5\x0c\x82\x6c\x9a\x7d\x1c\xdc\x2c\x50\xb9\x5d\x4d\xd0\xd2\x45\x2c\xaa\xad\x64\x39\x33\x88\xc5\xb9\x99\xd9\x5d\x23\xcc\x26\x57\x9b\xa1\x21\x77\x35\xf9\x4c\x81\xdb\x5a\x7a\x7b\xc9\xc2\x8e\xc8\x26\x5a\x59\xaa\x53\xd6\xd7\xda\xdc\xb5\x83\x0d\xe6\x12\x01\xd9\x1c\xef\x7c\x54\x1c\x45\xdf\x31\x90\x89\xdc\x7e\x7d\x45\xbc\xb7\xb1\x8a\xb7\xfc\x6a\x2d\x0f\xdb\x9b\x9b\x75\xa3\xee\x6c\x47\x3e\xd3\xed\xda\x8e\x8e\xe1\x18\xae\xaf\x06\x57\x70\x12\xc9\xc9\x7f\xf9\x13\x4f\x67\xfa\x74\xa9\x2b\x7f\x18\xe9\xe8\xb5\x8c\x68\x5b\x45\xfc\x80\xf5\x07\x49\xe6\xd5\x70\x2d\xde\x05\xa7\x59\x4d\x78\xbf\xf7\xd2\x85\xde\x0b\xce\xe4\x9c\x14\x24\x64\x62\x69\xad\xd4\xea\x91\x36\x38\xcd\xf6\x54\xa2\x3a\x09\xba\xb0\x81\xde\x34\x49\xcf\x57\xef\x24\x13\x6f\xab\x58\x7d\x3e\xc1\x2f\xb1\x0c\x92\x2b\xcb\xd8\xf6\xaa\x19\xef\xee\x20\x35\x2b\x08\xbb\xd0\xc9\xa2\x8c\xaf\x11\xa1\xb0\xd9\x71\xa4\x95\x23\xe5\x2c\x87\xd5\x5a\x51\x46\x13\xa7\x6c\x81\x4e\x24\x59\x90\xce\xd3\xa7\x34\xe7\x2b\x0d\xf9\xc3\x30\x0c\x4b\xb9\xe3\x81\x86\xbc\x59\x13\x0c\x9b\x51\x27\xac\x6b\x38\xf3\x70\xde\x5a\x03\x3f\xa2\x24\xc2\xc0\xdb\x4a\x79\x70\x3b\x26\x34\x41\xe8\x53\x67\x0f\xf9\x54\x9b\x65\x5a\xe3\xf1\x37\xd9\x1b\x2c\x10\x06\x21\x48\x65\x1d\xaa\x80\xe7\xa5\x4a\x30\x59\x2e\x44\x57\xa4\x41\x30\xca\x76\xef\xa9\xc1\x58\xa7\xca\xa7\x49\xd9\xa8\x2d\x5e\x25\xa0\x63\x8e\xf2\x91\x7d\xb0\xc7\xe8\x82\x26\xf4\xe4\xdb\x8c\x49\x6d\x9f\x66\x7b\xa2\xef\x5c\xce\x1c\xf3\x36\x7e\xbc\x35\xcf\xe7\x49\x42\x4a\x30\xcd\xa5\xc9\xff\xb9\x10\x9e\xe2\xcc\x5c\x36\x5d\x22\x73\x45\x19\x97\xb8\x04\xb9\x43\x76\x3a\xf3\x7c\x1d\x9b\xc6\x0a\xb2\x72\xcb\xd8\xc4\x2c\xb7\x88\x6f\x07\x2f\x14\x62\xbc\x9e\xe7\x1c\x50\xff\x6d\x05\xd7\x80\x22\x2a\x3f\x74\xb3\x91\xa5\x07\x41\xb7\x04\x8d\x45\x01\x6d\x8a\xad\x70\x36\x59\x7c\xe7\x4b\x21\xd6\xb9\x3f\x45\x51\x7d\x90\x61\x11\x0d\xb9\x30\xf7\x9d\xb9\xdc\x6b\x26\xf7\x4d\xc8\x5e\x38\x89\xca\x18\xa3\x17\x27\xc5\xc0\xbd\x7a\x90\xd6\xed\xf8\xa7\x8b\x90\x82\x3b\x0b\xb2\x30\x29\x20\x3f\x6d\x1b\xc4\x2c\x29\xfc\xfa\xf0\x2d\x85\xd8\xc0\x8f\xb7\xd7\x23\x7a\x17\x86\xd0\xd1\x40\x9a\x1d\xf0\xfc\x00\x03\x24\xa4\xa1\xc0\x69\xb3\xa8\x36\xc2\xef\xd8\x06\x3b\x4c\x5a\xa4\xe2\x5c\x55\x6a\xd5\x43\xe6\xb2\xca\x5b\x96\x5f\xf1\xc9\x4b\x87\xdb\x57\xe4\x7a\x2b\x5d\x0c\xde\x8f\x3f\xa4\x64\x79\xdb\xdb\x8a\xf6\xce\xda\xd4\xeb\xd9\xe0\xfd\x18\xfe\x4a\x89\xf5\x6c\xcd\x40\xa5\x7b\xc2\x31\xde\x32\xd5\x3f\x5c\xbd\x94\xbf\x76\x2d\xd1\x2e\x87\x66\x46\x95\xd1\xd8\x46\xec\xf6\x17\x6f\xfe\x30\x4d\x44\x65\xef\xa9\xb2\xd2\x5a\x6f\xce\x26\x55\x4e\xc6\xed\x2c\xfa\xed\xf5\xf5\xf0\x0d\xb9\xf2\xf3\xc4\x19\x39\x5f\x0b\xcb\x7d\x32\xab\xfc\x92\x13\x7b\xca\x01\x48\xa2\xb3\x88\xb2\x80\xf9\x76\x61\x52\x5b\x8a\xf3\x9c\x47\x9e\x3d\xfb\x7b\x33\xac\x53\x13\x1d\x1a\xf6\xa2\x4b\xed\x85\x16\x0d\x6f\xaa\x76\xbc\x40\xdb\x83\xe8\x31\xd8\x0f\xb5\x75\xff\x1a\x5f\xbd\xdf\x06\xfe\xda\xa0\xb2\xb1\xe4\xb3\x07\x78\x1c\xb4\x2f\x6b\x65\xb5\x83\x9b\xd1\x7f\x0a\x8d\x37\x69\x9e\xe6\x30\x23\x39\x04\xe0\xaf\x89\xb2\x09\x3b\x56\xf0\x05\xe8\x59\x9b\xf5\xd9\xea\xed\x04\x7f\x6f\x24\xfd\x28\x1e\xcd\x66\x89\xef\x8b\x72\x39\x1e\xbf\xcd\xaa\x72\x9b\x26\x94\xfa\xa0\x21\xaf\x12\x82\x56\x80\xb9\x1f\x81\x50\x5b\xe7\xab\x86\xe3\xf1\xdb\x0d\x17\xc6\x84\x1a\xb2\x69\xe4\xe0\xc4\x3a\x71\x95\x3a\xd0\x2a\x5a\x9c\x3e\x85\x1b\x4b\x16\x26\xda\x85\x90\xa0\xb5\xf7\xda\x08\xbf\xf0\x8e\x16\x9e\x61\x52\x4e\x06\xe8\x4f\x14\xed\xbf\x6f\x7b\xa0\x9e\xb7\x7d\xae\xc4\x50\x9b\x26\xae\x30\x68\x54\xa8\x4c\x2d\x19\x55\xd3\x45\xb2\x71\xc4\x67\x82\x37\x98\x7a\x47\x07\x5f\xe1\x56\x28\xd0\x17\x70\xc3\x63\x32\x73\x1a\xa2\x0b\xaf\xe6\x64\xd8\x9c\xc7\xbb\x97\x26\x68\x7c\x34\xea\xad\x7d\x0c\xf7\x34\xb1\xbc\xc8\x64\x5a\x95\xc7\x59\xda\x38\x38\x11\x34\x45\x56\x9f\x17\x2f\x9e\x9f\xfa\x62\xca\xdf\x3e\xae\x1e\x3e\x7f\x76\x5a\x74\x26\xe8\x29\x58\x0a\xb4\xf2\xe5\x2f\x8e\xd6\x02\xfe\xc0\xd2\xdf\xe7\xaf\x37\x5a\x3b\x12\x20\xd5\x46\x34\xd7\x83\x6a\x25\xcd\x74\xaa\x61\x6e\xca\x54\xe8\x74\xfb\x85\xf5\x25\xae\xc7\x30\xf8\xce\x5e\x5f\x0c\xd9\x2c\xde\xa9\x1b\xbb\x73\x96\x8e\x9d\x0f\x8f\xef\x43\xdf\xeb\xc0\xa1\xb0\xd2\xab\xf0\xf8\xfa\x62\x98\x51\x27\x2d\xe0\x1c\x23\x39\xc9\xab\x60\x69\x2f\xee\xbb\x0e\xe8\x6a\xb7\xdc\xf4\x7a\x6c\x05\xc8\xcd\xa0\x2d\x20\x37\x83\x1f\x08\x90\x6e\x62\x63\x8e\xb9\xb5\xed\x2d\xe4\x7e\x2d\x95\x18\x1a\x1d\xbc\x5c\xe4\xfd\x7c\xdb\xa1\xe0\xf2\x6c\x1a\xca\xbc\xee\x94\x3b\x03\xa3\x83\x80\xac\xfd\x85\x33\x67\x1e\x2f\x1e\x40\x80\xca\x93\x3a\xc9\x2b\xb5\xbf\x2c\xf3\x3e\xa6\x35\x83\xc8\x57\x28\x5b\xd2\xa9\x6d\x05\x9b\x46\x07\x87\x37\x25\xb6\xbb\xf4\xe2\x6f\xb5\x73\x17\xca\x3a\x8c\xa2\xb1\xbf\x46\x64\xef\x2f\x83\x1d\xd4\xf3\x39\x76\x15\x34\x4c\xa4\x42\xce\x78\xf8\x51\x7e\x03\x69\x97\x6b\xdb\x5f\x19\x55\x22\xd9\xcc\xd5\x36\x3c\xbb\x85\xb4\x49\x84\x8b\x3a\x6a\xd6\x67\xaf\x90\x38\x8c\x48\x99\xa1\xd6\xee\x18\xe6\x43\x36\x67\xa3\xdc\x12\x8a\x63\xf8\x4b\xc0\x5f\x87\x6b\xa5\x5b\x32\xae\xa5\xe4\x3a\xd9\x23\xb8\x4e\xbe\x59\xb9\x1f\xc3\xf9\x88\x62\x3d\xa7\x5a\xd9\x6f\x94\x5c\x99\xe2\x37\x09\x80\x61\x21\xb0\xa5\xd2\xcb\x99\xc2\x68\xf7\x52\x4e\xf9\x6a\xb2\xf5\xa3\x59\xee\x99\x7b\xa1\xc2\xc3\x77\xef\xba\x6d\xb1\x95\x32\x3f\xbc\xd7\x55\x77\x1f\xd4\x8d\x52\xa5\xa4\x9a\xf1\xc1\xb8\x53\x2f\x1e\xad\x2e\x14\xb2\x7b\x2c\x3d\xe5\x7d\xf8\xfa\x53\x62\xc8\x72\x3a\xa6\x66\x1c\x54\xcb\x39\xc1\xf0\xdd\x60\xd9\xc8\x15\x2d\x78\x53\x2a\xe3\xf3\xd1\x08\xd6\xb5\x35\x25\x52\x94\x94\xd8\x79\x97\xbd\x66\x33\x6f\xc8\x0d\x57\x87\x70\x65\x24\xc1\x93\xb3\x50\xa2\x77\xc5\x3a\x4c\x65\xf6\x45\x10\xfd\x21\xf7\x4a\xcd\x6f\xd1\x54\xeb\x1a\xc4\x98\x30\x64\xa4\xe6\x52\x1b\x15\x93\x72\x30\x47\x23\x91\x03\x64\x7e\x85\xcd\xaf\x07\xa5\x81\x40\x1b\x23\x39\xa1\x15\xac\x87\xbe\xc3\x6d\xa3\x35\xa1\x17\x8d\x9b\x67\xbb\xdf\xd0\xb8\x18\x93\x4f\x19\x76\x6b\xad\x47\x75\xca\x93\xa1\x50\xa7\x3a\x5e\x9a\xf5\x30\xb4\x0c\x90\xee\xd5\xa8\x44\xba\x5e\xba\x61\xc7\x14\x4d\xf3\x46\x8e\x8a\x3f\x00\xf9\x48\x1b\x5d\x58\xdc\x06\xef\xb8\x96\xbc\x83\x92\x71\x78\x5c\x3f\x51\x43\x4f\x53\x1b\x2a\xd6\x99\x8b\xb6\xed\xae\xa2\xc2\x58\xef\xd4\xdb\x2e\x42\x54\x33\xca\xc0\x59\xf5\xe3\x64\x15\x12\xde\x61\x57\x48\xb4\x0a\x93\x0f\x6f\xb9\x69\x09\xcd\xa5\x16\xd7\xb2\xd4\xf5\xae\x29\x4f\x84\xd6\x41\xac\x45\xf6\xf7\x1c\x76\x58\x99\x39\x7d\x1d\x98\xca\xe5\x8f\x97\x82\x94\x61\x56\xaf\x56\xad\xef\x38\x2f\x19\x93\x45\x65\x77\xf6\x9a\x8a\x61\x96\xe7\xfa\x3f\xf5\xec\x02\xe9\x3b\x06\xbf\xa6\xbe\x65\xdb\xab\x05\x70\x1d\xe9\x5c\xe8\x83\x14\xf4\x60\x90\xbb\x29\x5a\x1c\x1f\x1d\x83\xa1\x99\xb4\xce\x2c\xfa\xfb\x07\xa6\x10\x23\x9a\xfd\x9b\x16\x95\xad\x39\xab\x26\xb5\xe5\x66\xb2\xa2\x73\xcb\x53\xa7\x78\x4b\x39\xeb\xc5\x68\x7d\xc7\x4d\x6f\xd9\x7b\xed\x41\xd6\x7d\xe4\xbd\x44\xff\xd5\x43\x82\x4a\x90\xa8\x61\x41\x01\xe5\x93\xfe\xcf\x47\xef\x7c\xbc\xf4\x25\xa8\x72\x6b\xc8\xcb\x53\x3f\x29\xfa\xfb\xaf\x97\xba\xc0\x7f\xf0\xc7\xd5\x68\x50\x0e\xbf\x1f\xfa\x69\xd1\x4f\xa5\x72\xcf\xff\xd1\x33\xfa\x1f\xaa\xd1\xff\xf0\xd3\xa3\xff\xfb\x8b\x9e\xd1\xcf\x04\x2e\xeb\x2c\x06\xdc\x40\xde\x37\x85\x2f\x12\xca\xf7\x7f\x62\x4f\x7f\x26\x2e\x1a\xfc\x55\xea\x11\x6c\x0c\x28\xca\xd8\x28\xef\xc1\xdd\x62\xe2\xbb\xc0\xbd\x47\x90\x6e\x73\x82\xf6\x23\xb5\xe4\xf2\xdb\xc7\xeb\xeb\x85\x21\x1f\x52\x32\x8b\x72\xf5\xcb\xdb\xd5\x7e\x1c\xfd\xbb\xa3\xc5\xd5\xe4\xf3\xd6\x9a\x51\xfe\xdd\x11\xb9\xdb\x35\xe8\xbb\xad\x46\xfe\x2f\x00\x00\xff\xff\x55\x96\x33\x00\x24\x47\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 18212, mode: os.FileMode(420), modTime: time.Unix(1520832443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

