// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(436), modTime: time.Unix(1520753530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(436), modTime: time.Unix(1520753530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xdb\x3a\xf2\x7f\xcf\xa7\x18\x20\x7f\xa0\x09\x70\x4e\xdb\xf3\x6f\xb6\x0f\x79\x4b\xe3\xf4\xb2\xbb\x69\x5c\x3b\xc9\x29\x50\x1c\x2c\xc6\xe2\xd8\x62\x23\x91\x3a\x24\xe5\x44\xdf\x7e\x41\x52\xf2\x55\x52\x64\x59\x4a\x6f\x9b\xc7\x90\x92\x38\xbf\xb9\xfd\x66\x38\x3e\xec\xe2\xef\xe0\xf0\xe0\x10\x02\xa9\x08\x12\x0c\xee\x70\x46\xf6\x1f\x9d\xbc\xf8\x77\x10\x18\xd3\x29\x9c\x69\x4d\xe6\x00\x80\x91\x0e\x14\x4f\x0c\x97\xe2\x14\x46\x64\x14\xa7\x39\x69\x40\xf7\x61\x62\x80\x76\x1f\x4c\x95\x8c\xc1\x84\x04\xb7\x97\x40\xf1\x84\x18\x23\x06\x53\x1e\x11\x68\x23\x15\x3d\x3f\x00\xc0\xd4\x84\x52\x9d\xc2\x8c\xc4\xcb\x80\x33\x82\xa3\xd0\x98\x44\x9f\xbe\x78\x31\xe3\x26\x4c\x27\xcf\x03\x19\xbf\x28\x16\x8f\x0f\xa0\x90\xec\xd4\xc9\x69\x5f\xa0\x66\xfa\xf4\x00\x00\xe0\x77\x88\x70\x42\xd1\xa9\xff\xf8\x47\x8c\xc9\xfd\x1b\x60\x26\x4d\x96\xd0\x29\x68\xa3\xb8\x98\x1d\x00\x28\x32\xa9\x12\x9b\x8f\xd9\x83\x0d\xd0\xe0\xc6\x53\xcf\xbe\xfc\x35\xc9\x0c\x3d\xcb\xff\xed\x9f\x3d\x05\xa3\x52\x5a\x7f\x9e\x94\xda\x78\x94\x94\x92\xaa\xec\xb9\x02\xce\x11\x0a\x26\xe3\x71\x71\xae\x35\x54\xdf\x91\x20\x85\xc6\xa1\xaa\xdc\x3e\xc0\x28\x09\x11\x44\x1a\x93\xe2\x41\x2e\x0e\xc8\x29\x20\xe8\x84\x02\x3e\xe5\xc4\x20\x22\x31\x33\x61\x5f\xd0\x6a\xa3\x22\x12\x1b\x62\x72\x61\x5e\x9f\x54\xc2\x3a\xc7\x28\xad\xd4\xc4\x23\xc8\x5c\xf2\x07\x62\xe7\xa8\xa9\x31\x44\xb1\x7d\x02\x02\xd4\xf4\xeb\xa1\xf5\x41\x6c\xb9\x66\x09\x42\x22\x8d\x27\xa4\x60\x42\xe6\x9e\x48\x40\xcc\x05\xa0\x60\x10\xe3\x43\x5f\x30\xc4\xbc\x0a\x83\xd5\x4d\xf8\xb0\x37\x50\xdc\x01\x50\x89\xd2\x67\xa9\xde\x64\x86\xf4\x26\x48\x9f\xaf\x46\x60\xee\x25\x58\x37\x07\x54\x0a\x33\x0d\x46\xce\xc8\x84\xa4\x7a\x8b\x51\xf6\x24\x67\xf6\x5b\x75\xe1\x66\xb1\x7d\xd2\x60\x7b\x73\x9c\xea\x42\x5a\x01\x96\xf5\xb8\x64\x9c\x60\xb0\x8d\x97\x5b\x02\x14\x19\xa4\x82\x07\x92\x11\x04\x21\x2a\x0c\x0c\x29\x0d\x32\x35\xb9\x93\x39\xab\xed\xd1\xb5\x76\x8b\xee\xed\x1c\xeb\x6a\x32\x4d\x75\x80\xa6\x22\x00\xbd\x41\xbd\x12\x5a\xf2\xbd\x52\xc1\x34\x15\x81\xdd\xf1\x83\x4b\x3f\x20\xb9\x83\xfc\x8c\x7e\x3e\x04\x2e\x07\xff\xd8\x94\x79\x48\x6a\x2a\x55\x0c\x28\xec\xea\xd1\x31\x84\xa8\x43\x90\x02\x18\x1a\xec\x4b\x5c\x56\xcb\x4b\xba\x94\x78\xfc\xfe\xec\x8f\x1a\x91\xed\x72\x8d\xcc\x18\x86\x61\xa9\xbc\x76\xe1\xbb\x93\xf5\xcd\xeb\x93\x0b\x61\x03\x58\x89\x5d\xd3\xeb\x13\x20\xb7\x68\x73\xe7\x32\x35\xfc\xc8\xc2\x0e\xa8\x46\x58\x46\x85\xb0\xb9\x3f\x1b\xf9\xc4\x82\xb7\xf0\xe0\xe6\xe4\xfc\x81\x82\x8b\x15\x3a\xde\x98\xa2\x5f\xf3\x98\xb4\xc1\x38\xd9\xa6\x56\xc6\xd5\x36\x3a\xd3\x86\xe2\x67\x1a\x82\x54\x29\x12\x06\x4c\xf1\x04\x70\x01\x94\xc8\x20\x04\xeb\x3d\x68\xba\x0b\x0e\xf0\xe5\xaf\x5d\x89\x51\xce\xb7\x2a\xa4\x7c\x8f\xd1\x16\x77\x1c\x1b\x99\x38\x09\x0b\xc1\x6e\x2f\x7d\x45\x17\x48\x61\xb8\x48\xad\x8d\x58\x58\xd3\x6e\xe3\xfc\xae\xb2\x4d\xa4\x8c\xca\x44\xeb\xa6\xf0\xb5\x15\xb5\x15\xb2\xb7\x8a\xfa\xc2\x21\x48\xe7\x32\x8e\x51\xb0\x4d\x1d\xe4\xab\x3a\xb7\x32\x08\xfc\x36\xbd\x1f\xdc\x56\xa0\x72\xaf\x9c\xa0\xa6\xf3\x98\x55\x07\x97\xc5\xce\x20\x66\x67\x6a\xa6\xb7\xfd\xd1\x6f\xae\x8e\x5e\x8a\xcc\xd5\xe4\x2b\x05\x66\xe3\xd1\xdb\x4b\x2b\xec\x88\x74\x22\x85\xa6\x3a\x63\x7d\x2b\xd5\x5d\x3b\xd8\x60\xce\x11\xd0\xba\xe3\x9d\xab\x12\xa3\xe8\x07\x06\x32\xe1\x9b\xaf\xaf\xa8\x7f\xf6\x0b\x84\xdd\x98\xbb\xf5\x23\xd7\xf9\xe9\xda\x8f\x0e\xe1\x10\xae\xaf\x06\x57\x70\x14\xf1\xc9\x7f\xec\x27\x9e\xcf\xe4\xf1\xc2\x56\xfe\x54\xdc\xd0\x5b\x1e\x6d\x65\x3d\xb7\xa0\x5d\x1a\xf2\x51\x6d\x35\xd7\xf9\xdc\xe7\xce\x7b\xcf\x4d\xe8\xa2\xe0\x8c\xcf\x49\x40\x42\x2a\xe6\x5a\x73\x29\xf6\xf4\xc1\xa9\x3f\x53\x89\xe9\x24\x68\xc2\x06\x76\xd3\xa4\x5d\xb5\x7c\x27\xa9\x78\xd3\xc4\xea\xeb\x6b\xfb\x12\x6d\x41\x32\x65\x1d\x8c\x47\xcd\xcc\x9e\xae\x55\xbe\x3d\x97\x49\x56\xa6\xaf\x11\x21\xd3\x3e\x1d\x49\x61\x48\x18\x6d\xcb\x4c\x29\xc8\xab\x09\x05\x83\x40\x26\x9c\x34\x70\xe3\xd4\x27\xa4\xad\xdf\x1b\xea\xaf\x39\xa3\xa9\xd6\x9b\x56\xc1\xb0\x99\xea\x98\x36\x0d\x77\xee\xae\xb7\xd6\xc0\x8f\x28\x89\x30\x70\xbe\x52\x5e\xec\x8d\x09\x55\x10\x3a\x86\xe8\x20\x9f\x4a\xb5\x24\x8b\x16\x7f\xe5\xdf\xa0\x81\x30\x08\x81\x0b\x6d\x50\x04\x76\x5f\x2a\x98\x55\x96\x09\xd1\x14\x6d\x01\x18\xf9\xd3\x3b\xd5\x60\x2c\x53\xe1\xda\x06\x7e\x55\x17\xaf\x62\xd0\xb1\x8e\xf2\x95\xc7\x60\x8f\xd1\x04\x4d\xd4\x93\x1f\x33\x26\xb1\x99\xcd\x1e\xe1\xb2\xb9\x9c\x39\xe6\x6d\xe2\x78\x6b\x3d\x9f\x25\x09\x09\x66\xd5\x5c\xda\x0c\x3b\x63\xbe\x08\xf0\xee\xb2\x1e\x12\xad\xae\xc8\xeb\x12\x17\x20\x77\xa8\x9d\xce\x22\x5f\xc7\xae\xb1\x84\xac\xdc\x33\xd6\x31\x5b\x96\x4f\xdf\x09\x5e\xc8\xd8\x78\xb5\x3c\xdc\xe1\x3e\xa4\x15\x5c\x03\x8a\xa8\x3c\xe9\xfa\x95\x45\x04\x41\xb3\x00\xcd\x8a\x02\x52\x15\x47\x01\x14\x8b\xef\x3c\x15\x62\x9d\xc7\x53\x64\xd5\x89\x0c\x0b\x36\x64\xc2\x3c\x76\xe6\x72\xef\x5b\x71\x77\x2d\x7b\x11\x24\x2a\x39\x46\x2f\x41\xca\x02\x77\xf1\xc0\xb5\xd9\x8a\x4f\xe7\x21\x05\x77\x1a\x78\xe1\x52\x40\x6e\xdb\x26\x88\xbe\x28\xfc\xf6\xf0\x2d\x84\x58\xc3\xcf\x1e\xaf\x47\xf4\xce\x15\xa1\xa1\x01\x57\x5b\xe0\xb9\x05\x0b\x10\xe3\x8a\x02\x23\x55\x56\xed\x84\x3f\xb0\x0f\x76\x58\xb4\x70\x61\x6b\x55\x2e\x45\x0f\x95\xcb\xb2\x6e\x59\x7c\xc5\x15\x2f\x1d\x1e\x5f\x90\xe9\xad\x75\x31\xf8\x38\xfe\x94\x92\xb6\xc7\xde\x34\xb4\x0f\x5a\xa7\xce\xce\x06\x1f\xc7\xf0\x77\x4a\xd6\xce\x56\x1c\x94\x9b\x67\x96\xe3\x2d\x4a\xfd\xdd\xcd\x4b\xb8\x31\x84\x12\xeb\x32\xa8\x66\x54\xc9\xc6\xd6\xb8\xdb\xdf\xf6\xf0\xbb\x59\x22\x0a\x7d\x4f\x95\x37\x0f\xf5\xee\xac\x52\x61\x78\xdc\xce\xa3\xdf\x5f\x5f\x0f\xdf\x91\x29\xcf\x27\x46\xf1\xf9\x0a\x2d\x77\xc5\xac\x70\x8f\x1c\xe9\x63\x4b\x40\x12\xe9\x19\x65\x01\xf3\x6d\xa6\x52\x5d\x8a\xf3\xdc\xae\xbc\x7c\xf9\x47\x33\xac\x53\x15\xed\x4a\x7b\xd1\xa4\xfa\xdc\x37\xa1\xdb\x30\xde\xb6\x89\x68\x1f\xec\x87\x52\x9b\x7f\x8e\xaf\x3e\x6e\x02\x7f\xad\x50\xe8\x98\xdb\xdc\x03\x76\x1d\xa4\x6b\x6b\xf9\xde\xc1\xcd\xe8\xdf\x85\xc5\xab\x34\x2f\x73\xac\x46\x72\x08\xc0\x5d\x9b\xfa\x0d\x5b\x5e\xf0\x04\xea\x59\xd9\xf5\x55\xcb\xcd\x02\xff\x51\x26\xbd\x97\x1e\xd5\x7a\x8b\xef\x49\x75\x39\x1e\xbf\xf7\x5d\xb9\x75\x17\x4a\x1d\x69\xc8\xbb\x84\x20\x05\x60\x1e\x47\x20\x94\xda\xb8\xae\xe1\x78\xfc\x7e\x2d\x84\x59\x85\x2a\xd2\x69\x64\xe0\x48\x1b\x76\x95\x1a\x90\x22\xca\x8e\x9f\xc3\x8d\x26\x0d\x13\x69\x42\x48\x50\xeb\x7b\xa9\x98\x7b\xf0\x8e\x32\xa7\x61\x12\x86\x07\xe8\x32\x8a\x74\xdf\xd7\x3d\xa8\xde\x1e\xfb\x4c\xb0\xa1\x54\x4d\x42\x61\xd0\xa8\x51\x99\x6a\x52\xa2\x66\xaa\x6a\x2d\xc5\x7b\xc1\x1b\x6c\xbd\xa3\x9d\x47\x1a\x2a\x0c\xe8\x09\xc2\xf0\x98\xd4\x9c\x86\x68\xc2\xab\x39\x29\xeb\xce\xe3\xed\x4b\x13\x54\x8e\x8d\x3a\x6f\x1f\xc3\x3d\x4d\xb4\x7d\x48\x79\xab\xca\x79\x96\x54\x06\x8e\x18\x4d\xd1\x9a\xcf\xc9\xc9\xab\x63\xd7\x4c\xf9\xbf\xcf\xcb\x7f\xbe\x7a\x79\x5c\x4c\xea\xc8\x29\x68\x0a\xa4\x70\xed\x2f\xcb\xd6\x02\xfb\x81\x45\xbc\xcf\x5f\xaf\xa4\x34\xc4\x80\x8b\x35\x36\xd7\x83\x69\x25\xcd\x6c\xaa\x61\x6d\x6a\x55\x21\xd3\xcd\x17\xd6\xb7\xb8\xf6\xd1\xe0\x07\x7d\x7d\x3e\xb4\x6e\xf1\x41\xdc\xe8\xad\x5c\x3a\x36\x8e\x1e\xdf\x87\x6e\xf6\xc7\x52\x61\x21\x97\xf4\xf8\xfa\x7c\xe8\x55\xc7\x35\xe0\x1c\x23\x3e\xc9\xbb\x60\x69\x2f\xe1\xbb\x0e\xe8\xea\xb0\xdc\xf4\x7a\x6c\x09\xc8\xcd\xa0\x2d\x20\x37\x83\x9f\x08\x90\x6e\xb8\xb1\xe5\xdc\x52\xf7\x46\xb9\xdf\x72\xc1\x86\x4a\x06\x6f\xb2\x7c\xbe\x75\x93\x0a\x2e\x72\xd3\x90\xe7\x7d\xa7\x3c\x18\x28\x19\x04\xa4\xf5\x6f\xb6\x72\xb6\xeb\xc5\x3f\x20\x40\xe1\x94\x3a\xc9\x3b\xb5\xbf\x2d\xea\x3e\xab\x56\x0f\x91\xeb\x50\xb6\x54\xa7\xd4\x15\xda\x54\x32\xd8\x7d\x48\xb7\xdd\xa5\x97\xfd\x56\xbb\x70\x21\xb4\xc1\x28\x1a\xbb\x6b\x44\x1b\xfd\x79\xb0\x85\x7a\xbe\x47\x2f\x49\xc3\x84\x0b\xb4\x15\x8f\x1b\xa6\xf0\x37\x90\x7a\xf1\x6c\xfb\x2b\xa3\x4a\x24\x9b\x85\xda\x86\xb9\x9b\x71\x9d\x44\x98\xd5\xa9\x66\x75\xf7\x12\x89\xdd\x14\xc9\x3d\x6a\xed\xd2\xb0\x4d\xb2\xb9\x36\xca\x3d\xa1\x48\xc3\x4f\x01\x7f\x1d\xae\x95\x61\x49\x99\x96\x92\xcb\xe4\x11\xc1\x65\xf2\xdd\xca\xbd\x8f\xce\x47\x14\xcb\x39\xd5\xca\x7e\x23\xf8\xd2\x15\xbf\x4b\x00\x94\x15\x02\x5b\x1a\x3d\x9f\x09\x8c\xb6\x2f\xe5\x84\xeb\x26\x6b\xb7\xea\x6b\xcf\x3c\x0a\x15\x11\xbe\xfb\xd0\xad\x8b\xa3\x94\xc5\xe1\x47\x43\x75\xf7\xa4\x6e\x94\x0a\xc1\xc5\xcc\x26\xc6\xad\x7e\xf1\x68\x79\xa1\xe0\xef\xb1\xe4\xd4\x9e\xc3\xf5\x9f\x12\x45\xda\x96\x63\x62\x66\x49\x35\x9f\x13\x0c\x3f\x0c\x16\x83\x5c\x51\x66\x0f\x25\xbc\x3e\xf7\x46\xb0\x6e\xac\x29\xe1\xac\xa4\xc5\x6e\x4f\xd9\x6b\x35\xf3\x8e\xcc\x70\x99\x84\x2b\x99\x84\xdd\xec\xa9\x44\xef\x86\xb5\x9b\xc9\x3c\xc6\x20\xfa\x43\xee\x42\xcc\x6f\x51\x55\xdb\x1a\xc4\x98\x58\xc8\x48\xcc\xb9\x54\x22\x26\x61\x60\x8e\x8a\xa3\x25\xc8\xf6\x15\x3a\xbf\x1e\xe4\x0a\x02\xa9\x14\xb7\x05\x2d\xb3\x76\xe8\x26\xdc\xd6\x46\x13\x7a\xb1\xb8\xb9\x3f\xfd\x9a\xc5\xc5\x98\x7c\xf1\xd8\xad\x8c\x1e\xd5\x19\x8f\x47\xa1\xce\x74\x9c\x34\xab\x34\xb4\x0c\x90\xee\xcd\xa8\x44\xba\x5e\xa6\xc3\xc7\x14\x4d\xf3\x41\x8e\x8a\x1f\xc4\x39\xa6\x8d\x26\x2c\x6e\x83\xb7\x42\x4b\x3e\x41\x69\x71\xd8\x6f\x9e\xa8\x61\xa4\xa9\xa5\x8a\x75\xee\x22\x75\xbb\xab\xa8\x30\x96\x5b\xfd\xb6\xf3\x10\xc5\x8c\x3c\x38\xcb\x79\x1c\xdf\x21\xb1\x27\xec\x0a\x89\x56\x34\x79\xf7\x91\x9b\x96\xd0\x5c\x4a\x76\xcd\x4b\x43\xef\x8a\xf1\x44\xa8\x0d\xc4\x92\xf9\x9f\xab\xd9\x80\xe5\xdd\xe9\xdb\xc0\x54\x2e\x7f\xbc\x10\xa4\x0c\xb3\x7a\xb3\x6a\x7d\xc7\x79\x69\x31\xc9\x2a\xa7\xb3\x57\x4c\x0c\x7d\x9d\xeb\x7e\xe4\xb6\x0d\xa4\x9b\x18\xfc\x96\xf6\xe6\x8f\x57\x0b\xe0\x2a\xd2\xb9\xd0\x3b\x19\xe8\xce\x20\x77\xd3\xb4\x38\x3c\x38\x04\x45\x33\xae\x8d\xca\xfa\xfb\x45\x32\x63\x23\x9a\xfd\x8b\xb2\xca\xd1\x9c\xe5\x90\xda\xe2\x30\xbe\xe9\xdc\x32\xeb\x14\x6f\x29\xd7\x7a\xb1\x5a\x3f\x71\xd3\x5b\xf5\x5e\x9b\xc8\xba\x67\xde\x0b\xf4\x2f\x1e\x12\x14\x8c\x58\x8d\x16\x04\x50\xbe\xe9\x7f\xfa\xe8\x5d\x1f\x6f\x5c\x0b\xaa\xdc\x1b\xf2\xf6\xd4\x2f\x8a\xfe\xe3\xd7\x4b\x5d\xe0\x3f\xf8\xf3\x6a\x34\x28\x87\xdf\x2d\xfd\xb2\xe8\xa7\x5c\x98\x57\xff\xdf\x33\xfa\x9f\xaa\xd1\xff\xf4\xcb\xa3\xff\xfa\xa4\x67\xf4\xbd\xc0\x65\x93\xc5\x80\x6b\xc8\xbb\xa1\xf0\x2c\xa1\xfc\xfc\x47\xfa\xf8\x57\xd2\x45\x83\x9f\x4a\xed\xa1\x8d\x01\x45\x5e\x1b\xe5\x33\xb8\x1b\x9a\xf8\x21\x70\xef\x11\xa4\xdb\x5c\x41\x8f\x23\xb5\xd0\xe5\xf7\x8f\xd7\xb7\xa3\x21\x9f\x52\x52\x59\xb9\xf9\xe5\xe3\x6a\x3f\x8f\xfd\xdd\x51\x76\x35\xf9\xba\xf1\xcc\x28\xff\xee\x88\xcc\xed\x0a\xf4\xdd\x76\x23\xff\x1b\x00\x00\xff\xff\x79\x94\x00\xd4\x34\x4a\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 18996, mode: os.FileMode(436), modTime: time.Unix(1520897235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

