// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(436), modTime: time.Unix(1520753530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(436), modTime: time.Unix(1520753530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\x40\x0e\x68\x02\xec\x76\xbb\xb7\xb9\x3e\xe4\x2d\xb5\xb3\x6d\xee\x36\x8d\x6b\x27\xd9\x02\xc5\xe2\x30\x16\xc7\x16\x1b\x89\xd4\x92\x94\x13\xff\xf7\x07\x92\x92\xfc\x25\x29\xb2\x22\xa5\x5f\xd7\xc7\x90\x14\x39\xbf\xf9\xe0\x6f\x86\xe3\x1e\x76\xf1\xef\xe0\xf0\xe0\x10\x02\xa9\x08\x12\x0c\xee\x70\x4e\xf6\x0f\x9d\x7c\xf8\x67\x10\x18\xd3\x29\x9c\x69\x4d\xe6\x00\x80\x91\x0e\x14\x4f\x0c\x97\xe2\x14\xc6\x64\x14\xa7\x05\x69\x40\xb7\x31\x31\x40\x3b\x0f\x66\x4a\xc6\x60\x42\x82\xdb\x4b\xa0\x78\x4a\x8c\x11\x83\x19\x8f\x08\xb4\x91\x8a\x5e\x1e\x00\x60\x6a\x42\xa9\x4e\x61\x4e\xe2\x55\xc0\x19\xc1\x51\x68\x4c\xa2\x4f\x7f\xf9\x65\xce\x4d\x98\x4e\x5f\x06\x32\xfe\x25\x1f\x3c\x3e\x80\x5c\xb2\x53\x27\xa7\xfd\x80\x9a\xeb\xd3\x03\x00\x80\x9f\x21\xc2\x29\x45\xa7\x7e\xf3\xf7\x18\x93\xfb\x33\xc0\x5c\x9a\x65\x42\xa7\xa0\x8d\xe2\x62\x7e\x00\xa0\xc8\xa4\x4a\x6c\x2f\xb3\x07\x1b\xa2\xc1\xad\x55\x2f\x3e\xfd\x35\x5d\x1a\x7a\x91\xfd\xd9\xaf\x3d\x05\xa3\x52\xda\x5c\x4f\x4a\x6d\x2d\x25\xa5\xa4\x2a\x5b\x97\xc3\x39\x46\xc1\x64\x3c\xc9\xcf\xb5\x81\xea\x5b\x12\xa4\xd0\x38\x54\x95\x9b\x07\x18\x25\x21\x82\x48\x63\x52\x3c\xc8\xc4\x01\x39\x03\x04\x9d\x50\xc0\x67\x9c\x18\x44\x24\xe6\x26\xec\x0b\x5a\x6d\x54\x44\x62\x4b\x4c\x2e\xcc\xeb\x93\x4a\x58\x17\x18\xa5\x95\x9a\x78\x04\x99\x4b\xfe\x40\x6c\x80\x9a\x1a\x43\x14\xdb\x15\x10\xa0\xa6\x1f\x0f\xad\x0b\xb1\xe3\x9a\x25\x08\x89\x34\x9e\x92\x82\x29\x99\x7b\x22\x01\x31\x17\x80\x82\x41\x8c\x0f\x7d\xc1\x10\xf3\x2a\x0c\xd6\x27\xe1\xc3\x93\x81\xe2\x0e\x80\x4a\x94\x3e\x4a\xf5\x66\x69\x48\x6f\x83\xf4\xf1\x6a\x0c\xe6\x5e\x82\x75\x73\x40\xa5\x70\xa9\xc1\xc8\x39\x99\x90\x54\x6f\x31\xca\x9e\xe4\xcc\xee\x55\x17\x6e\x8a\xe9\xd3\x06\xd3\x9b\xe3\x54\x17\xd2\x72\xb0\xac\xc7\x25\x93\x04\x83\x5d\xbc\xdc\x10\xa0\x58\x42\x2a\x78\x20\x19\x41\x10\xa2\xc2\xc0\x90\xd2\x20\x53\x93\x39\x99\xb3\xda\x1e\x5d\x6b\xbf\xe8\xde\xce\xb1\xae\xa6\xb3\x54\x07\x68\x2a\x02\xd0\x1b\xd4\x6b\xa1\x25\x9b\x2b\x15\xcc\x52\x11\xd8\x19\xdf\xb8\xf4\x43\x92\x7b\xc8\xcf\xe8\xfb\x43\xe0\x72\xf8\xaf\x6d\x99\x47\xa4\x66\x52\xc5\x80\xc2\x8e\x1e\x1d\x43\x88\x3a\x04\x29\x80\xa1\xc1\xbe\xc4\x65\xb5\xbc\xa4\x4b\x89\x27\xef\xce\x7e\xad\x11\xd9\x0e\xd7\xc8\x8c\x61\x18\x96\xca\x6b\x07\xbe\x3a\x59\xdf\xbc\x3e\x39\x17\x36\x80\x95\xd8\x35\xbd\x3e\x01\x72\x83\xf6\xee\x5c\x5d\x0d\xdf\xb2\xb0\x43\xaa\x11\x96\x51\x2e\x6c\xe6\xcf\x46\x3e\xb3\xe0\x2d\x3c\xb8\x39\x39\x7f\xa0\xe0\x7c\x8d\x8e\x37\xa6\xe8\xd7\x3c\x26\x6d\x30\x4e\x76\xa9\x95\x71\xb9\x8d\x5e\x6a\x43\xf1\x0b\x0d\x41\xaa\x14\x09\x03\x26\x5f\x01\x5c\x00\x25\x32\x08\xc1\x7a\x0f\x9a\xee\x82\x03\x7c\xfa\x6b\x5f\x62\x94\xf1\xad\x0a\x29\xdf\x61\xb4\xc3\x1d\x27\x46\x26\x4e\xc2\x5c\xb0\xdb\x4b\x9f\xd1\x05\x52\x18\x2e\x52\x6b\x23\x16\xd6\xb4\xdb\x38\xbf\xaf\x6c\x53\x29\xa3\x32\xd1\xba\x49\x7c\x6d\x46\x6d\x85\xec\x2d\xa3\x3e\x77\x08\xd2\x40\xc6\x31\x0a\xb6\xad\x83\x6c\x54\x67\x56\x06\x81\x9f\xa6\x9f\x06\xb7\x15\xa8\xdc\x2b\xa7\xa8\x69\x10\xb3\xea\xe0\x52\xcc\x0c\x62\x76\xa6\xe6\x7a\xd7\x1f\xfd\xe4\xea\xe8\xa5\xc8\x5c\x4d\x3f\x53\x60\xb6\x96\xde\x5e\x5a\x61\xc7\xa4\x13\x29\x34\xd5\x19\xeb\xef\x52\xdd\xb5\x83\x0d\x16\x1c\x01\xad\x3b\xde\xb9\x2c\x31\x8a\xbe\x61\x20\x13\xbe\xfd\xf9\x8a\xfc\xe7\x69\x81\xb0\x1b\x73\xb7\x7e\xe4\x2a\x3f\x5d\xfb\xd1\x21\x1c\xc2\xf5\xd5\xf0\x0a\x8e\x22\x3e\xfd\xaf\xdd\xe2\xe5\x5c\x1e\x17\xb6\xf2\xa7\xe2\x86\x7e\xe7\xd1\xce\xad\xe7\x06\xb4\xbb\x86\x7c\x54\x5b\xbf\xeb\xfc\xdd\xe7\xce\x7b\xcf\x4d\xe8\xa2\xe0\x9c\x2f\x48\x40\x42\x2a\xe6\x5a\x73\x29\x9e\xe8\x83\x33\x7f\xa6\x12\xd3\x49\xd0\x84\x0d\xec\xa6\x49\xb9\x6a\xf5\x4d\x52\xf1\xb6\x89\xd5\xe7\xd7\xf6\x23\xda\x82\x64\xca\x2a\x18\x8f\x9a\x99\x3d\x5d\xab\xfb\xd6\xe9\xe5\x9a\xe2\xa4\xa5\xd2\x0c\xc5\x89\x54\xa8\x96\x5e\x7d\x28\x58\x2e\xa0\xd3\xe2\x2c\x8d\x22\x37\x27\xb7\x46\x13\xba\x39\x76\xf3\x76\x44\xb6\x5a\x91\xa2\xa6\x04\xb9\x97\x22\x2b\xea\x95\x69\x14\xd5\xdb\x4a\x2f\x0a\x1a\xc8\x64\x59\xa6\x9b\x31\x21\xf3\x18\x5b\x7e\x40\xc2\x68\x90\x33\x90\x82\x56\x8a\x08\x64\xc2\x49\x03\x37\x4e\x55\x42\x9a\x90\x54\x43\x07\xeb\x42\x1f\x5a\x05\xa3\x66\xbe\xc5\xb4\x69\x38\x73\x7f\xc7\x6a\x0d\xfc\x98\x92\x08\x03\x17\xcc\xca\xb3\xf1\x09\xa1\x0a\x42\x47\xe1\x1d\xe4\x33\xa9\x56\x6c\xde\x3b\x82\xfb\x82\x06\xc2\x20\x04\x2e\xb4\x41\x11\xd8\x79\xa9\x60\x56\x59\x26\x44\x93\xd7\x6d\x60\xbc\xe6\x35\x18\xcb\x54\xb8\xba\x8e\x1f\xd5\xf9\xa7\x18\x74\xac\xa3\x6c\xe4\x31\xd8\x63\x34\x41\x13\xf5\x64\xc7\x8c\x49\x6c\xd3\x8d\x47\x92\x8d\x4c\xce\x0c\xf3\x36\x17\x6d\x6b\x3d\x9f\x25\x09\x09\x66\xd5\x5c\x5a\xad\x3c\x63\x3e\x4b\xf3\xee\xb2\x19\xfe\xac\xae\xc8\xeb\x12\x0b\x90\x3b\xd4\x4e\x67\x57\x53\xc7\xae\xb1\x82\xac\xdc\x33\x36\x31\x5b\xe5\xb7\x5f\x09\x5e\xc8\xd8\x64\x3d\x6a\xef\xf1\x60\xd5\x0a\xae\x21\x45\x54\xce\x8a\xfc\x48\x11\x41\xd0\x14\xa0\xb9\x9b\x52\xaa\xe2\x32\x45\x51\xec\xf3\x5c\x88\x75\x1e\x4f\x91\x55\x5f\x64\xb8\x45\x10\x0a\xb9\x9f\x5a\x12\xe9\x5a\xf6\x3c\x48\x54\x78\x5a\x4f\x41\xca\x02\x77\xfe\xc0\xb5\xd9\x89\x4f\x83\x90\x82\x3b\x0d\x3c\x77\x29\x20\x37\x6d\x1b\x44\x9f\xb5\x7f\x79\xf8\x0a\x21\x36\xf0\xb3\xc7\xeb\x11\xbd\x81\x22\x34\x34\xe4\x6a\x07\x3c\x37\x60\x01\x62\x5c\x51\x60\xa4\x5a\x56\x3b\xe1\x37\xec\x83\x1d\x66\x95\x5c\x7c\x26\xf7\xd4\xd0\x43\x6a\xb9\x4a\x2c\x8b\x5d\x5c\x76\xd9\xe1\xf1\x05\x99\xde\x6a\x4b\xc3\xf7\x93\x0f\x29\x69\x7b\xec\x6d\x43\xbb\xd0\x3a\x75\x76\x36\x7c\x3f\x81\xbf\x53\xb2\x76\xb6\xe6\xa0\xdc\xbc\xb0\x1c\xaf\xa8\xc5\xec\x6f\x5e\xc2\xf5\x89\x94\x58\x97\x41\x35\xa7\x4a\x36\xb6\xc1\xdd\xfe\xb6\x87\xdf\xcf\x12\x51\xe8\x7b\xaa\x7c\x1a\xaa\x77\x67\x95\x0a\xc3\xe3\x76\x1e\xfd\xee\xfa\x7a\xf4\x96\x4c\xf9\x7d\x62\x14\x5f\xac\xd1\x72\x97\xb8\x0a\xb7\xe4\x48\x1f\x5b\x02\x92\x48\xcf\x28\x73\x98\x6f\x97\x2a\xd5\xa5\x38\x2f\xec\xc8\xab\x57\xbf\x36\xc3\x3a\x55\xd1\xbe\xb4\x17\x4d\xaa\x07\xfe\x95\xa0\x0d\xe3\x6d\x7b\x11\x3d\x05\xfb\x91\xd4\xe6\xdf\x93\xab\xf7\xdb\xc0\x5f\x2b\x14\x3a\xe6\xf6\xee\x01\x3b\x0e\xd2\xd5\x1d\x7d\x9d\xe0\x66\xfc\x47\x6e\xf1\x2a\xcd\xd2\x1c\xab\x91\x0c\x02\x70\xef\xda\x7e\xc2\x8e\x17\x3c\x83\x7a\xd6\x66\x7d\xd6\x72\xbb\x02\xd3\xa7\x16\xd5\x66\x05\xf6\x59\x35\x39\x99\xbc\xf3\x45\xd3\x4d\x07\x4a\x1d\x65\xc8\x8a\xb8\x20\x05\x60\x16\x45\x20\x94\xda\xb8\xa2\xee\x64\xf2\x6e\xa7\xd6\xa3\x48\xa7\x91\x81\x23\x6d\xd8\x55\x6a\x40\x8a\x68\x79\xfc\x12\x6e\x34\x69\x98\x4a\x13\x42\x82\x5a\xdf\x4b\xc5\xdc\xc2\x3b\x5a\x3a\xfd\x92\x30\x3c\x40\x77\x9f\x48\xb7\xbf\xee\x41\xf1\xf6\xd8\x67\x82\x8d\xa4\x6a\x12\x08\x83\x46\x75\xe4\x54\x93\x6a\x58\x71\xca\x05\x6f\x30\xf5\x8e\xf6\xee\x38\xa9\x30\xa0\x67\x08\xc2\x13\x52\x0b\x1a\xa1\x09\xaf\x16\xa4\xac\x33\x4f\x76\xdf\xb4\x50\x39\x2e\xea\x7c\x7d\x02\xf7\x34\xd5\x76\x91\xf2\x56\x95\xb1\x2c\xa9\x0c\x1c\x31\x9a\xa1\x35\x9f\x93\x93\xdf\x8e\x5d\x29\xe5\x1f\x1f\x57\x7f\xfc\xed\xd5\x71\xde\x48\x25\x67\xa0\x29\x90\xc2\x15\xbf\x2c\x57\x0b\xec\x06\x45\xb4\xcf\x3e\xaf\xa4\x34\xc4\x80\x8b\x0d\x2e\xd7\x83\x69\x25\xcd\x6c\xaa\x61\x66\x6a\x55\x21\xd3\xed\x0f\xd6\x17\xb8\x9e\xa2\xc1\x0b\x7d\x3d\x18\x59\xb7\xb8\x10\x37\x7a\xe7\x26\x9d\x18\x47\x8e\xef\x43\xd7\x9a\x65\x89\xb0\x90\x2b\x72\x7c\x3d\x18\x79\xd5\x71\x0d\xb8\xc0\x88\x4f\xb3\x1a\x58\xda\x4b\xf0\xae\x03\xba\x3a\x2c\x37\x7d\xbd\x5c\x01\x72\x33\x6c\x0b\xc8\xcd\xf0\x3b\x04\xe4\x2d\x99\x3f\x64\x80\xd1\xc5\x68\x27\xf3\x7c\x4b\xde\xb5\x7d\x39\x4c\xce\xe0\x22\x01\x64\x4c\x91\xb6\x21\xdf\x0a\x6e\x6f\x05\x1b\x7b\x3b\x60\xb4\x15\xf4\x33\xdf\x6e\x37\x68\xae\x9e\xf3\xea\x64\xbb\x3c\x1b\x9c\xf9\x6f\x94\x4a\x67\x05\xb8\x3c\x1b\xe4\xfb\xf8\xa2\x2d\x59\x87\x24\x35\xc3\x20\x7b\xae\x42\x01\x17\xa3\xc5\x49\x3e\xab\x6f\x69\x9f\x2f\xd0\x77\x93\x1e\xd9\xb4\x4b\xea\xde\xb2\xae\xdf\xb9\x60\x23\x25\x83\x37\xcb\xac\x07\x7d\x3b\x1b\x28\x08\xca\x88\x67\xa5\xc7\xec\x46\x50\x32\x08\x48\xeb\x9f\x80\x7b\xb5\xe6\x7f\x80\x00\x85\xf3\xec\x69\x56\xac\xff\xa9\x48\xfd\xad\x6f\x7b\x88\x5c\x91\xba\xa5\x4f\x4b\x5d\xe1\xd2\x4a\x06\xfb\x37\xd2\xb7\x7b\x98\xb6\x7b\xb5\xbb\x33\x84\x36\x18\x45\x13\xf7\xd4\x6f\x29\x00\x0f\x76\x50\xcf\xe6\xe8\x15\x73\x9c\x72\x81\x36\xe9\x75\x0d\x4f\xbe\x4b\x40\x17\x6b\xdb\x3f\xeb\x56\x22\xd9\xec\xbe\x6d\x48\xe0\x18\xd7\x49\x84\xcb\x3a\xd5\xac\xcf\x5e\x21\xb1\x9f\x22\xb9\x47\xad\x1d\x17\xb3\x4c\x2b\xd3\x46\xb9\x27\xe4\x5c\xec\x39\xe0\xaf\xc3\xb5\xf2\x6e\x52\xa6\xa5\xe4\x32\x79\x44\x70\x99\x7c\xb5\x72\x3f\x45\xe7\x63\x8a\xe5\x82\x6a\x65\xbf\x11\x7c\xe5\x8a\x5f\x25\x00\xca\x0a\x81\x2d\x8d\x9e\xcf\x05\x46\xbb\xef\xb2\xc2\x3d\x28\x68\x37\x9a\xb5\x29\xf8\x28\x94\x47\xf8\xee\x43\xb7\xce\x8f\x52\x16\x87\x1f\x0d\xd5\xdd\x33\xfb\x71\x2a\x04\x17\x73\x7b\x31\xee\x50\x9b\xf1\xea\x4d\xa9\xe0\x6e\x5c\xf8\x12\x64\xa2\x48\xdb\x9c\x5c\xcc\x6d\x66\xc5\x17\x04\xa3\x8b\x61\xd1\x6c\x19\x2d\xed\xa1\x84\xd7\xe7\x93\x11\xac\x6b\x3d\x4c\x38\x2b\x21\x75\xf6\x94\xbd\xa6\xb4\x6f\xc9\x8c\x56\x97\x70\x25\x93\xb0\x93\x3d\x95\xe8\xdd\xb0\xf6\x33\x99\xc7\x18\x44\x7f\xc8\x9d\x8b\xc5\x2d\xaa\x6a\x5b\x83\x18\x13\x0b\x19\x89\x05\x97\x4a\xc4\x24\x0c\x2c\x50\x71\xb4\x59\x92\xfd\x84\xce\x5e\x88\xb9\x82\x40\x2a\xc5\x75\x22\x05\xb3\x76\xe8\xba\x50\x37\xba\x53\x7a\xb1\xb8\x85\x3f\xfd\x86\xc5\xc5\x98\x7c\xf2\xd8\x35\xcc\x27\x3c\x0a\x75\xa6\xe3\xa4\x59\xa7\xa1\x65\x80\x74\x6f\x46\x25\xd2\xf5\xf2\x0b\x8e\x09\x45\xb3\xac\x97\xa7\xe2\x47\xab\x8e\x69\xa3\x09\xf3\x86\x80\x9d\xd0\x92\x75\x39\x5b\x1c\x9e\xd6\xf3\xd7\x30\xd2\xb4\xee\xe9\x92\xba\xdd\x6b\x64\x18\xcb\x9d\xa2\xeb\x20\x44\x31\x27\x0f\xce\xaa\x25\xcb\x97\xc9\xec\x09\xbb\x42\xa2\x15\x4d\xde\xbf\xeb\xaa\x25\x34\x97\x92\x5d\xf3\xd2\xd0\xbb\x66\x3c\x11\x6a\x03\xb1\x64\xfe\x27\xa5\x36\x60\x79\x77\xfa\x32\x30\x95\xcb\x1f\x17\x82\x94\x61\x56\x6f\x56\xad\x9f\xb9\x2f\x2d\x26\xcb\xca\x5f\x50\xac\x99\x18\xfa\x3c\xd7\xfd\x10\x75\x17\x48\xd7\xd5\xfb\x25\xed\xcd\x1f\xaf\x16\xc0\x75\xa4\x33\xa1\xf7\x32\xd0\xbd\x41\xee\xa6\x68\x71\x78\x70\x08\x8a\xe6\x5c\x1b\xb5\xec\xef\x7f\x0d\x60\x6c\x4c\xf3\xff\xd0\xb2\xb2\x3b\x6b\xd5\xa7\x58\x1c\xc6\xbf\x3c\xb4\xbc\x75\xf2\xaf\x94\x6b\x3d\x1f\xad\x6f\xba\xea\x2d\x7b\xaf\xbd\xc8\xba\x67\xde\x05\xfa\xe7\x0f\x09\x0a\x46\xac\x46\x0b\x02\x28\x9b\xf4\x7f\x7d\xf4\xae\x8f\x37\xae\x04\x55\xee\x0d\x59\x79\xea\x07\x45\xff\xf1\x37\xc6\x2e\xf0\x1f\xfe\x79\x35\x1e\x96\xc3\xef\x86\x7e\x58\xf4\x53\x2e\xcc\x6f\xff\xec\x19\xfd\x0f\xd5\xe8\x7f\xf8\xe1\xd1\x7f\x7d\xd2\x33\xfa\x5e\xe0\xb2\xe6\x72\xc0\x0d\xe4\xdd\x13\xd3\x32\xa1\xec\xfc\x47\xfa\xf8\x47\xd2\x45\x83\x9f\x33\x3e\x41\x1b\x43\x8a\xbc\x36\xca\xdb\xb0\xb7\x34\xf1\x4d\xe0\xde\x23\x48\xb7\x99\x82\x1e\x47\xaa\xd0\xe5\xd7\x8f\xd7\x97\xa3\x21\x1f\x52\x52\xcb\x72\xf3\xcb\x3a\x16\xbf\x1f\xfb\xbb\xa3\xe5\xd5\xf4\xf3\xd6\x9a\x71\xb6\xef\x98\xcc\xed\x1a\xf4\xdd\x56\x23\xff\x17\x00\x00\xff\xff\xd6\x15\x22\xfa\xd8\x4d\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 19928, mode: os.FileMode(436), modTime: time.Unix(1521079475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(436), modTime: time.Unix(1520713274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

