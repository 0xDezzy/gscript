// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520968804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520968804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520968804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1520054504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x73\xdb\xb6\x93\x7f\xf7\x5f\xb1\xd3\xdc\x4c\xec\x4e\x9b\x26\x6d\x2e\x0f\x7e\xb3\x25\xc7\xd6\x5d\x1d\x2b\x92\xed\x74\xa6\xd3\xe9\xac\x88\x95\x88\x98\x04\x58\x00\x94\xad\xfb\xeb\x6f\x00\x90\xfa\x49\xca\x14\x45\x3a\x76\xf3\xf5\x9b\x05\x80\xc0\x7e\xf6\x07\x76\x17\x0b\xbc\x6a\xe2\xef\xe0\xd5\xc1\x2b\x08\xa4\x22\x48\x30\xb8\xc3\x09\xd9\x1f\x1a\xf9\xf0\xcf\x20\x30\xa6\x63\x38\xd1\x9a\xcc\x01\x00\x23\x1d\x28\x9e\x18\x2e\xc5\x31\x0c\xc8\x28\x4e\x53\xd2\x80\x6e\x62\x62\x80\xb6\x1f\x8c\x95\x8c\xc1\x84\x04\xb7\x97\x40\xf1\x88\x18\x23\x06\x63\x1e\x11\x68\x23\x15\xbd\x39\x00\xc0\xd4\x84\x52\x1d\xc3\x84\xc4\xdb\x80\x33\x82\xc3\xd0\x98\x44\x1f\xff\xf2\xcb\x84\x9b\x30\x1d\xbd\x09\x64\xfc\x4b\xde\x78\x74\x00\x39\x65\xc7\x8e\x4e\xfb\x01\x35\xd1\xc7\x07\x00\x00\x3f\x43\x84\x23\x8a\x8e\xfd\xe4\x9f\x30\x26\xf7\x33\xc0\x44\x9a\x59\x42\xc7\xa0\x8d\xe2\x62\x72\x00\xa0\xc8\xa4\x4a\xac\x0f\xb3\x0b\xeb\xa2\xc1\xb5\x51\xaf\xff\xfc\x6b\x34\x33\xf4\x3a\xfb\xd9\x8f\x3d\x06\xa3\x52\x5a\x1d\x4f\x4a\xad\x0d\x25\xa5\xa4\x2a\x1a\x97\xc3\x39\x40\xc1\x64\x3c\xcc\xd7\xb5\x82\xea\x39\x09\x52\x68\x1c\xaa\xca\xf5\x03\x8c\x92\x10\x41\xa4\x31\x29\x1e\x64\xe4\x80\x1c\x03\x82\x4e\x28\xe0\x63\x4e\x0c\x22\x12\x13\x13\xb6\x05\xad\x36\x2a\x22\xb1\x46\x26\x17\xe6\xc3\xfb\x52\x58\xa7\x18\xa5\xa5\x9c\x78\x04\x99\x4b\xfe\x40\xac\x83\x9a\x2a\x43\x14\xdb\x11\x10\xa0\xa6\xef\x0f\xad\x9e\xd8\x50\xcd\x02\x84\x44\x1a\x8f\x48\xc1\x88\xcc\x3d\x91\x80\x98\x0b\x40\xc1\x20\xc6\x87\xb6\x60\x88\x79\x19\x06\xcb\x9d\xf0\x61\x6f\xa0\xb8\x03\xa0\x14\xa5\x3f\xa4\x3a\x9d\x19\xd2\xeb\x20\xfd\x71\x35\x00\x73\x2f\xc1\xaa\x39\xa0\x52\x38\xd3\x60\xe4\x84\x4c\x48\xaa\x35\x1b\x65\x57\x72\x62\xe7\xda\x66\x6e\xe6\xdd\x47\x15\xba\x57\xc7\x69\x9b\x49\xcb\xc1\xb2\x1a\x97\x0c\x13\x0c\x36\xf1\x72\x4d\x80\x62\x06\xa9\xe0\x81\x64\x04\x41\x88\x0a\x03\x43\x4a\x83\x4c\x4d\xa6\x64\x4e\x6a\x5b\x54\xad\xdd\xac\x7b\x3d\xc5\xba\x1a\x8d\x53\x1d\xa0\x29\x31\x40\xa7\xa8\x97\x4c\x4b\xd6\x57\x2a\x18\xa7\x22\xb0\x3d\x5e\x38\xf5\x5d\x92\x3b\xd0\xcf\xe8\xdf\x87\xc0\x65\xf7\xbf\xd7\x69\xee\x93\x1a\x4b\x15\x03\x0a\xdb\x7a\x78\x04\x21\xea\x10\xa4\x00\x86\x06\xdb\x22\x97\x6d\xf5\x4b\x9a\xa4\x78\x78\x71\xf2\x6e\x0b\xc9\xb6\x79\x0b\xcd\x18\x86\x61\x21\xbd\xb6\xe1\xd9\xd1\x7a\xfa\xe1\xfd\x99\xb0\x06\xac\x40\xae\xe9\xc3\x7b\x20\xd7\x68\xf7\xce\xc5\xd6\xf0\x92\x89\xed\xd2\x16\x62\x19\xe5\xc4\x66\xfa\x6c\xe4\x13\x13\x5e\x43\x83\xab\x3b\xe7\x0f\x14\x9c\x2d\xb9\xe3\x95\x5d\xf4\x6b\x1e\x93\x36\x18\x27\x9b\xae\x95\x71\xb1\x8d\x9e\x69\x43\xf1\x6b\x0d\x41\xaa\x14\x09\x03\x26\x1f\x01\x5c\x00\x25\x32\x08\xc1\x6a\x0f\x9a\xe6\x8c\x03\xfc\xf9\xd7\xae\x8e\x51\xe6\x6f\x95\x50\x79\x81\xd1\x86\xef\x38\x34\x32\x71\x14\xe6\x84\xdd\x5e\xfa\x88\x2e\x90\xc2\x70\x91\x5a\x19\xb1\xb0\xa6\xcd\xda\xf9\x5d\x69\x1b\x49\x19\x15\x91\xd6\x4c\xe0\x6b\x23\x6a\x4b\x64\x6b\x11\xf5\x99\x43\x90\x3a\x32\x8e\x51\xb0\x75\x1e\x64\xad\x3a\x93\x32\x08\x7c\x37\xbd\x1f\xdc\x96\xa0\x62\xad\x1c\xa1\xa6\x4e\xcc\xca\x8d\xcb\xbc\x67\x10\xb3\x13\x35\xd1\x9b\xfa\xe8\x3b\x97\x5b\x2f\x45\xe6\x6a\xf4\x95\x02\xb3\x36\xf4\xf6\xd2\x12\x3b\x20\x9d\x48\xa1\x69\x9b\xb0\x7e\x94\xea\xae\x1e\x6c\x30\xe5\x08\x68\xd5\xf1\xce\x45\x89\x51\xf4\x82\x81\x4c\xf8\xfa\xe7\x4b\xe2\x9f\xfd\x0c\x61\x33\xe2\x6e\xf5\xc8\x65\x7e\x9a\xd6\xa3\x57\xf0\x0a\xae\xaf\xba\x57\x70\x18\xf1\xd1\xdf\x76\x8a\x37\x13\x79\x34\x97\x95\x2f\x8a\x1b\xfa\xc8\xa3\x8d\x5d\xcf\x35\x68\xb7\x0d\x79\xab\xb6\xbc\xd7\xf9\xbd\xcf\xad\xf7\x9e\x9b\xd0\x59\xc1\x09\x9f\x92\x80\x84\x54\xcc\xb5\xe6\x52\xec\xa9\x83\x63\xbf\xa6\x02\xd1\x49\xd0\x84\x15\xe4\xa6\x4a\xba\x6a\xf1\x4d\x52\xf1\xba\x88\x6d\x8f\xaf\xed\x47\xb4\x05\xc9\x14\x65\x30\x1e\x15\x33\xbb\xba\x5a\xfb\xad\xe3\xcb\x35\xc5\x49\x4d\xa6\x19\x8a\x13\xa9\x50\xcd\x3c\xfb\x50\xb0\x9c\x40\xc7\xc5\x71\x1a\x45\xae\x4f\x2e\x8d\x26\x74\x7d\xec\xe4\xf5\x1c\xd9\x72\x46\x8a\x2d\x29\xc8\x9d\x18\x59\x92\xaf\x4c\xa3\x68\xbb\xac\xb4\xc2\xa0\x8e\x4c\x66\x45\xbc\x19\x10\x32\x8f\xb1\xf5\x0f\x48\x18\x0d\x72\x0c\x52\xd0\x82\x11\x81\x4c\x38\x69\xe0\xc6\xb1\x4a\x48\x13\x92\xaa\xa8\x60\x4d\xf0\x43\xab\xa0\x5f\x4d\xb7\x98\x36\x15\x7b\xee\xae\x58\xb5\x81\x1f\x50\x12\x61\xe0\x8c\x59\x71\x34\x3e\x24\x54\x41\xe8\x5c\x78\x07\xf9\x58\xaa\x85\x37\xef\x15\xc1\x7d\x41\x03\x61\x10\x02\x17\xda\xa0\x08\x6c\xbf\x54\x30\xcb\x2c\x13\xa2\xc9\xf3\x36\x30\x58\xd2\x1a\x8c\x65\x2a\x5c\x5e\xc7\xb7\xea\xfc\x53\x0c\x1a\xe6\x51\xd6\xf2\x18\xec\x31\x9a\xa0\x0a\x7b\xb2\x65\xc6\x24\xd6\xdd\x8d\x47\x82\x8d\x8c\xce\x0c\xf3\x3a\x1b\x6d\x6d\x3e\x9f\x24\x09\x09\x66\xd9\x5c\x98\xad\x3c\x61\x3e\x4a\xf3\xea\xb2\x6a\xfe\x2c\xaf\xc8\xf3\x12\xe7\x20\x37\xc8\x9d\xc6\xb6\xa6\x86\x55\x63\x01\x59\xb1\x66\xac\x62\xb6\x88\x6f\x9f\x09\x5e\xc8\xd8\x70\xd9\x6a\xef\x70\x60\x55\x0b\xae\x2e\x45\x54\xec\x15\xf9\x96\xb9\x05\x41\x33\x07\xcd\xed\x94\x52\xcd\x37\x53\x14\xf3\x79\x9e\x0a\xb1\xc6\xed\x29\xb2\xf2\x8d\x0c\xd7\x1c\x84\x39\xdd\xfb\xa6\x44\x9a\xa6\x3d\x37\x12\x25\x9a\xd6\x92\x91\xb2\xc0\x9d\x3d\x70\x6d\x36\xec\x53\x27\xa4\xe0\x4e\x03\xcf\x55\x0a\xc8\x75\x5b\x07\xd1\x47\xed\xdf\x1e\xbe\x39\x11\x2b\xf8\xd9\xe5\xb5\x88\x5e\x47\x11\x1a\xea\x72\xb5\x01\x9e\x6b\xb0\x00\x31\xae\x28\x30\x52\xcd\xca\x95\xf0\x05\xeb\x60\x83\x51\x25\x17\x5f\xc9\x1d\x35\xb4\x96\xa2\xe9\xb9\x19\x7a\xc2\xc8\xbe\x92\xc1\x3a\xcb\x7c\x2b\xe8\x90\xa2\xc8\x1d\x86\x71\xe1\x02\x91\x44\xc9\x29\x67\xc4\xa0\xdf\xeb\x2e\x31\xe8\x76\xa6\x52\x5d\xc8\xa1\xa9\x6d\x79\xfb\xf6\xdd\x0a\x97\xe6\xd4\x95\xb8\xb4\xf9\xac\x55\x5c\x55\x25\x83\x80\xb4\x76\xcb\x81\xca\xfe\xaa\x4a\x85\xe1\x71\x3d\x39\x5f\x20\x37\xa4\x68\x5c\x0d\x39\xbb\x27\x27\xe8\x33\x8e\xf9\x92\xbf\x1d\x7e\xcd\x61\xd2\x8c\x4c\x5a\x89\x17\x64\x5a\x93\xf5\xee\xa7\xe1\xe7\x94\x74\x86\xd8\x2a\xbb\xb4\x4e\x9d\x69\xea\x7e\x1a\xc2\x3f\x29\x59\xd3\xb4\x64\xd3\xb9\x79\x6d\xc3\x82\x79\xfa\x6e\x77\x8b\x24\x5c\x69\x51\x01\x97\x0c\xaa\x09\x95\x3a\xf0\x2b\xee\xfe\x3f\x76\xf1\xbb\x31\x13\x85\xbe\xa7\xd2\xd3\xc4\xed\x3b\xc0\x3e\xca\x71\x71\x7d\xdd\x3f\x27\x53\xec\x82\x18\xc5\xa7\x4b\x91\x9c\xcb\x75\x08\x37\xe4\x50\x1f\x59\x9f\x35\x91\x3e\x08\xa9\xa9\x17\xa5\x58\xa7\x2a\xda\x35\x52\x42\x93\xea\xce\xa6\x0e\x55\x0d\x92\xea\xfa\x2e\xfb\x60\xdf\x97\xda\xfc\xcf\xf0\xea\xd3\x3a\xf0\xd7\x0a\x85\x8e\xb9\x75\x57\xc0\xb6\x83\x74\xa9\x6a\x9f\x5a\xba\x19\xfc\x9e\x4b\xbc\x4a\xb3\xc8\xd8\x72\x24\x83\x00\x9c\x0d\xf3\x1d\x36\xb4\xe0\x09\xd8\xb3\xd4\xeb\xab\x96\xeb\x49\xbb\x36\xb9\xa8\x56\x93\xf6\x4f\xca\xc9\xe1\xf0\xc2\xe7\xd9\x57\x15\x28\x75\x5e\x66\x96\xf7\x07\x29\x00\x33\x2b\x02\xa1\xd4\xc6\x9d\x03\x0c\x87\x17\x1b\xe9\x41\x45\x3a\x8d\x0c\x1c\x6a\xc3\xae\x52\x03\x52\x44\xb3\xa3\x37\x70\xa3\x49\xc3\x48\x9a\x10\x12\xd4\xfa\x5e\x2a\xe6\x06\xde\xd1\xcc\xf1\x97\x84\xe1\x01\x3a\x17\x44\xba\xf9\xf7\xd8\xaf\x4a\x19\x6f\x97\x7d\x22\x58\x5f\xaa\x2a\x86\x30\xa8\x74\xf4\x90\x6a\x52\x15\x93\x94\x39\xe1\x15\xba\xde\xd1\xce\x45\x4a\x25\x02\xf4\x04\x46\x78\x48\x6a\x4a\x7d\x34\xe1\xd5\x94\x94\x55\xe6\xe1\xe6\x31\x28\x2a\x17\xbe\x38\x5d\x1f\xc2\x3d\x8d\xb4\x1d\xa4\xbc\x54\x65\x8e\xb9\x54\x06\x0e\x19\x8d\xd1\x8a\xcf\xfb\xf7\xbf\x1d\xb9\xec\xdb\x7f\xfd\xb1\xf8\xf1\xb7\xb7\x47\x79\xed\x9d\x1c\x83\xa6\x40\x0a\x97\x2f\xb5\xee\x7d\x60\x27\x98\x5b\xfb\xec\xf3\x4a\x4a\x43\x0c\xb8\x58\x71\xff\x5b\x10\xad\xa4\x9a\x4c\x55\x4c\x66\x58\x56\xc8\x74\xfd\x83\x2d\xfa\x98\xfa\xba\xd3\xb7\x6a\xd1\x13\x37\x7a\x63\x27\x1d\x1a\x17\x4f\xdd\x87\xae\x9a\xcf\xc6\x4e\x42\x2e\xe2\xa9\xeb\x4e\xdf\xb3\x8e\x6b\xc0\x29\x46\x7c\x94\xa5\x4d\xd3\x56\x8c\xf7\x36\xa0\xcb\xcd\x72\xd5\x03\xef\x05\x20\x37\xdd\xba\x80\xdc\x74\xff\x85\x80\x9c\x93\xf9\x5d\x06\x18\xf5\xfa\x1b\xc9\x8a\x73\xf2\xaa\xed\x33\xa8\x72\x0c\xbd\x04\x90\x31\x45\xda\x9a\x7c\x4b\xb8\xdd\x15\xac\xed\x6d\xc0\xa3\x2d\x71\x3f\xf3\xe9\x36\x8d\xe6\xe2\x04\x78\x1b\x6d\x97\x27\x9d\x13\xff\x8d\x42\xea\x2c\x01\x97\x27\x9d\x7c\x1e\x9f\xe7\x77\xb1\x16\xa9\x31\x06\xd9\x09\x27\x0a\xe8\xf5\xa7\xef\xf3\x5e\x6d\x53\xfb\x74\x86\xbe\x99\xf0\xc8\x86\x5d\x52\xb7\x16\x75\x7d\xe4\x82\xf5\x95\x0c\x4e\x67\xd9\xb5\x85\xf5\x68\x60\xee\xa0\xf4\x79\x96\xad\xce\x76\x84\x2c\x40\xfe\x09\xb8\x67\x6b\xfe\x03\x04\x28\x9c\x66\x8f\xb2\xf3\x9d\x9f\xe6\xd9\x22\xab\xdb\x1e\x22\x77\xae\x51\x53\xa7\xa5\x2e\x51\x69\x25\x83\xdd\xef\x5e\xd4\xab\x65\xb0\x73\xd5\xcc\x4b\x68\x83\x51\x34\x74\xd5\x21\xd6\x05\xe0\xc1\x06\xea\x59\x1f\xbd\xf0\x1c\x47\x5c\xa0\x0d\x7a\x5d\x8d\x9c\x2f\x2c\xd1\xf3\xb1\xf5\x2b\x01\x4a\x91\xac\xb6\xdf\x56\x74\xe0\x18\xd7\x49\x84\xb3\x6d\xac\x59\xee\xbd\x40\x62\x37\x46\x72\x8f\x5a\x3d\x5f\xcc\x7a\x5a\x19\x37\x8a\x35\x21\xf7\xc5\x9e\x02\xfe\x6d\xb8\x96\xee\x4d\xca\xd4\xa4\x5c\x26\x8f\x10\x2e\x93\x67\x4b\xf7\x3e\x3c\x1f\x50\x2c\xa7\xb4\x95\xf6\x1b\xc1\x17\xaa\xf8\x2c\x01\x50\x96\x08\xac\x29\xf4\x7c\x22\x30\xda\x3c\xca\x17\xee\x0c\x4a\xbb\xd6\xac\xb2\xc5\x5b\xa1\xfd\x73\xa2\x65\x84\xeb\x7c\x29\x45\x76\xf8\x51\x53\xdd\xbc\x67\x3f\x48\x85\xe0\x62\x62\x37\xc6\x0d\xd7\x66\xb0\x38\x86\x9c\xfb\x6e\x5c\xf8\x14\x64\xa2\x48\xdb\x98\x5c\x4c\x6c\x64\xc5\xa7\x04\xfd\x5e\x77\x5e\x9f\x1b\xcd\xec\xa2\x84\xe7\xe7\xde\x08\x6e\xab\x56\x4d\x38\x2b\x70\xea\xec\x2a\x5b\x0d\x69\xcf\xc9\xf4\x17\x9b\x70\xa9\x27\x61\x3b\x7b\x57\xa2\x75\xc1\xda\x4d\x64\x1e\xf3\x20\xda\x43\xee\x4c\x4c\x6f\x51\x95\xcb\x1a\xc4\x98\x58\xc8\x48\x4c\xb9\x54\x22\x26\x61\x60\x8a\x8a\xa3\x8d\x92\xec\x27\x74\x56\x54\xc0\x15\x04\x52\x29\xae\x13\x29\x98\x95\x43\x57\xb8\xbc\x52\xd0\xd4\x8a\xc4\x4d\xfd\xea\x57\x24\x2e\xc6\xe4\x4f\x8f\x5d\xc5\x78\xc2\xa3\xb0\x4d\x74\x1c\x35\xcb\x6e\x68\x11\x20\xcd\x8b\x51\x01\x75\xad\x5c\xfa\x19\x52\x34\xce\xca\xbf\x4a\xee\x39\xfb\x33\x2a\x13\xe6\x35\x24\x1b\xa6\x25\x2b\x8c\xb7\x38\xec\x57\x26\x5a\xd1\xd2\xd4\x2e\x03\x94\xba\xde\x01\x76\x18\xcb\x8d\xa4\x6b\x27\x44\x31\x21\x0f\xce\xa2\x8a\xcf\xa7\xc9\xec\x0a\x9b\x42\xa2\x96\x9b\xbc\x7b\xa1\x5e\x4d\x68\x2e\x25\xbb\xe6\x85\xa6\x77\x49\x78\x22\xd4\x06\x62\xc9\xfc\x2d\x64\x6b\xb0\xbc\x3a\x7d\x1b\x98\x8a\xe9\x8f\xe7\x84\x14\x61\xb6\x5d\xac\x6a\x57\x46\x5c\x5a\x4c\x66\xa5\x97\x6e\x96\x44\x0c\x7d\x9c\xeb\xee\x2e\x6f\x02\xe9\x0a\xc1\xbf\xa5\xbc\xf9\xe5\x6d\x05\x70\x19\xe9\x8c\xe8\x9d\x04\xb4\x36\xc8\xe7\x64\x2e\x7c\x4a\x6b\x8b\x88\x86\x52\x9b\xdc\x47\xb0\xff\xc7\x18\x84\x5c\xd4\x3b\xd9\xad\x66\xc5\xf2\x19\x9f\xc4\x92\x35\x93\xc0\x79\x75\xf0\x0a\x14\x4d\xb8\x36\x6a\xd6\xde\xa3\x1b\x8c\x0d\x68\xf2\xbf\x34\x2b\x2d\x6e\x5c\x94\xf9\xce\x17\xe3\x4f\x61\x6a\xee\xc0\xf9\x57\x8a\x35\x20\x6f\xdd\x5e\xb3\xd8\x5a\x26\x63\xeb\xa6\xde\x7c\x14\x32\x47\xff\xec\x21\x41\xc1\x88\x6d\xe1\x82\x00\xca\x3a\xfd\x87\x1f\xad\xf3\xe3\xd4\xa5\xe3\x8a\xb5\x21\x4b\xd5\x7d\xa7\xe8\x3f\x7e\xde\xda\x04\xfe\xdd\x2f\x57\x83\x6e\x31\xfc\xae\xe9\xbb\x45\x3f\xe5\xc2\xfc\xf6\x6b\xcb\xe8\x7f\x2e\x47\xff\xf3\x77\x8f\xfe\x87\xf7\x2d\xa3\xef\x09\x2e\xba\x9b\x01\xb8\x82\xbc\xf3\x9e\x66\x09\x65\xeb\x3f\xd4\x47\xdf\x13\x2f\x2a\xdc\x06\xde\x83\x1b\x5d\x8a\x3c\x37\x8a\x6f\x31\xac\x71\xe2\x45\xe0\xde\x22\x48\xb7\x19\x83\x1e\x47\x6a\xce\xcb\xe7\x8f\xd7\xb7\x73\x43\x3e\xa7\xa4\x66\xc5\xe2\x97\x55\x6f\xbe\x44\xf9\xdb\x5a\xc6\xf5\x08\x9a\x77\x34\xbb\x1a\x7d\x5d\x1b\x33\xc8\x56\x37\x20\x73\xbb\xc4\xa0\xe7\x7a\xc6\xaf\x0d\x61\xe4\xea\xfc\x1c\xf6\x70\xf8\x63\x2a\x0c\x69\x43\xec\xc7\xa3\xc6\xe3\xba\x4b\xbc\xa3\x1b\xd1\xa5\x51\x3a\x99\x64\x19\xd3\x15\x39\xb2\xed\x2b\x0f\x70\xcc\x0f\xf7\x53\x01\x6c\x3e\x0c\x46\x33\x40\x63\x5c\x78\x3e\x01\xcc\x5a\x48\x81\x91\xc0\x8d\xf6\x85\xf7\x35\x45\x2f\xc3\xa3\x4a\xf4\x7e\xef\x1e\x55\x58\x63\x59\x59\x69\x4e\x63\x6a\x68\x31\x2a\x47\x70\x40\x53\x52\xda\x83\xe8\x61\xb1\x10\xb9\x1a\x22\xd0\x64\x2c\x72\xeb\x4c\xb0\xbf\x31\xca\xd1\x5c\x0c\x24\xf5\x2f\x46\xb1\xa7\xbb\x19\x91\x7d\x7f\x76\xb6\xb1\x4f\x70\x1d\x48\x8b\x25\xdc\x13\x2e\x17\x8e\x15\x8a\x27\xd7\x30\x22\xff\x24\x98\xfb\xea\x1e\x65\x26\x3b\x40\xc7\xf5\xa9\x9d\xb4\xbb\x98\xf3\x49\x31\x74\xf7\xde\x7a\xe3\x2f\x5c\xd0\x39\x99\x1b\xc1\x1f\x3e\xf2\x88\x3e\x61\xbc\xfd\x9e\x5c\x5e\x63\xe6\x6e\xc9\xb9\xeb\xd8\xd9\xeb\x79\xec\x77\x3e\x9a\x3f\xa3\xe6\xde\x2a\x21\x06\x3f\xa4\x82\x3f\xb8\x57\x2e\xfe\xb6\xb3\xfe\xed\xef\xd6\xfd\xf0\x06\xae\x43\xee\x70\x47\xd0\x28\xd8\x48\x3e\x40\x60\xbf\x6f\x6d\x00\xcb\x78\x97\x97\x08\x15\xb1\x2b\x3f\xb6\xb8\xe7\x26\x74\x05\xa7\x96\x8c\xe5\x63\x9d\x27\xe1\x20\x2a\xfa\x42\xd9\xa9\x6f\x4f\x7c\xf1\xd9\xc6\xa7\x67\xe2\xd0\x23\x78\x93\x55\x47\x97\x71\xce\x48\xd0\x44\xeb\xa8\xe6\x35\xd5\xee\x15\x04\xe4\xee\xd8\x50\x93\xe2\xa4\xb3\x50\x80\x07\x18\xcd\x99\x94\x5d\x33\xdf\xe3\x60\x70\x57\x78\x7b\xe2\x24\xa3\xef\x1b\x29\x48\xa7\x7f\xd3\x91\xa9\x30\x3d\x7d\xc1\x27\x21\xa9\xeb\x10\xc5\x95\xd8\x30\xdd\x85\x20\x67\xd5\x1f\xf7\x64\x69\x01\x29\x20\x44\x0d\x68\x20\x22\xd4\x06\x7e\x85\x4e\xff\x46\xc3\xa1\x74\xa7\xaf\xa4\x8f\xe0\x70\x45\x19\x8e\x9e\x33\xcc\x6b\x28\x0d\x4e\x2e\x4f\x62\x0f\xd3\x29\x45\xf2\xfe\xdd\xf9\x69\x03\x08\xbd\x3b\x3f\xb5\x52\xa8\x30\x7e\x49\xd0\x34\xe3\x75\x59\xf7\x2e\x91\xd1\x2c\x96\x2a\x79\x22\x07\x2f\x3f\x50\xe9\x9f\xf5\xf3\x89\x79\x90\x3d\x8c\x50\x18\x31\xb8\x87\x6d\xdc\xdb\xd8\x2c\x37\xc5\xa9\xe0\x82\x1b\x8c\xf8\xff\x11\x03\x9d\x60\xe0\x6e\xe5\x2f\x3d\x5c\xe0\x9e\x4e\xf1\xdf\xca\xd2\x9e\xf5\x59\x39\xc7\xa7\xe4\xe8\x2b\x7f\x33\x60\x87\xa8\x60\xfb\x03\x87\xed\x59\x1b\xf7\x54\xd0\xa3\xc0\xbb\x5e\x1e\xf6\xec\x28\xff\xe5\xe0\x5d\x19\xe4\xb6\xef\xb0\x1e\xfc\x7f\x00\x00\x00\xff\xff\xa2\x42\x0b\xb7\xbd\x5e\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 24253, mode: os.FileMode(420), modTime: time.Unix(1525999034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1518913673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

