// Code generated by go-bindata.
// sources:
// ../../templates/entrypoint.go.tmpl
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4f\x6f\xdb\x3e\x0c\xbd\xeb\x53\x10\x46\x7e\x80\x8c\xa6\x4a\x9a\xe3\x0f\xe8\xa1\x6b\xbb\xad\xc0\x5a\x0c\x1b\xd6\x1d\xb2\xac\x90\x6d\x5a\x15\x12\x4b\x89\x24\xa7\x29\x0c\x7f\xf7\x81\x92\xdb\xfc\x41\x2f\x06\x49\x93\x8f\x8f\xe4\xd3\x5a\x96\x4b\xa9\x10\x1a\xa9\x0d\x63\xba\x59\x5b\x17\x80\x33\x80\xac\x78\x0d\xe8\x33\xb2\x4a\xdb\xac\x1d\x7a\x3f\xa9\x57\x32\x60\x0c\x69\x3b\xd1\xb6\x0d\x7a\x15\x3d\xff\x6a\xca\x64\x04\x57\x5a\xb3\xcd\x18\x39\x4a\x87\xe7\xb6\x10\xa5\x6d\x26\x0a\xcd\xb4\xd4\x15\x4e\x94\x2f\x9d\x5e\x87\x09\x1a\xa5\x0d\x66\x2c\x67\xac\x6e\x4d\x19\xdb\xf3\x1c\x3a\x06\xb0\x95\x0e\x5e\x14\x10\xa6\xf8\x2d\x75\xf8\xe2\x6c\xbb\x66\x00\x5d\x77\x0e\x4e\x1a\x85\x30\x7a\x1a\xc3\x68\xdb\xc0\xff\x97\x30\x12\x8f\xf7\x1e\xfa\x9e\x01\xbc\x28\x71\x55\x55\xfc\x22\x67\x00\xca\x02\xc1\x0e\x88\x00\x15\xd6\x48\xa8\xe2\xc6\x1a\xe4\x79\x8c\x29\x8f\x84\x90\x98\x88\x07\x7c\xe1\x59\xd7\x11\xae\xb8\xbb\x81\xbe\xcf\xde\xb3\xc4\xb5\x43\x19\xf0\xf1\x7e\x28\xec\xba\x43\x1e\xd8\x14\x58\x45\x2a\xdb\x46\xdc\x92\xe3\xe1\x3c\x12\x4a\xc5\x57\x55\x75\x17\xb7\x9a\xe0\x63\xba\xf8\xac\x57\x68\x64\x83\xd4\x67\x0c\xfb\xf8\x83\x6c\xf0\xab\xf4\xcf\xd0\xf7\xef\xbd\xd0\x54\x47\x80\xdf\xac\xac\x7e\xc6\x2d\x72\x72\x13\xb8\x9f\x1f\x91\x17\xca\x67\x0b\x9e\xef\x47\xb8\xdd\x61\xd9\x06\xfc\xbe\x92\x26\x4e\xd1\xc7\xef\x01\x7a\x5a\x20\xed\x9b\xe7\xac\x1f\xae\xa2\xf8\x12\x5c\x6b\x70\x0c\x05\xcc\x17\x64\xe5\xe0\x83\xd3\x46\xc5\xbd\xd6\xd6\x81\x1e\xc3\x13\x4d\x9f\x36\x52\x0c\xfb\x2e\xe6\x7a\x01\x7f\x2f\x61\x19\xbd\x25\x99\x14\xa2\xc6\x0c\x60\x43\x05\x09\x87\x4f\x77\xb3\x19\x51\xf1\x03\xce\xa0\x20\xf1\xcb\x6c\x5a\x1b\x90\x6f\xe0\xec\x2d\xb5\xc8\xe1\x0c\x36\x94\xec\x30\xb4\xce\x80\x27\xa2\xc7\xd7\x38\x51\xc5\x89\x66\x3e\xba\x55\xdf\xa7\x59\x3f\x3c\x02\xcf\x61\xbe\xa0\x87\x10\xe7\x7a\xe3\x98\x94\x2f\x7e\xa0\xac\xae\x56\x2b\x1e\x5f\x05\x09\x88\x02\xe8\x78\x7c\x38\xe4\x7f\x6a\xeb\x1a\x1d\x4f\x08\xdd\x70\xcf\x77\x42\xba\xda\x8d\x61\x54\x44\x3a\xa9\xf1\xf5\xf0\xce\x70\x7f\xf0\x54\xa1\x6b\x68\x6c\x15\x4b\xe0\x62\x76\xf4\x13\xd6\x4e\x9b\x50\x43\xf6\xc7\x50\x20\x83\xa3\xc2\x43\xed\x1c\x65\x4f\x77\xff\x4d\x67\xbb\x31\x64\xc4\xe0\x2d\x63\x90\x43\xf4\xfa\x3c\x3f\xd9\xf4\x81\x58\xf6\xe6\xbf\x00\x00\x00\xff\xff\xba\xc2\x56\xbf\x3f\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1087, mode: os.FileMode(420), modTime: time.Unix(1519703855, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1511857680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

