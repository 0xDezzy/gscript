// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiler/templates/entrypoint.go.tmpl
// compiler/templates/obfstring.go.tmpl
// compiler/templates/preload.gs
// compiler/templates/vm_file.go.tmpl
package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _entrypointGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\xaf\xc2\x01\x89\xd8\x72\x9b\x63\xc0\x87\x96\xa4\x7f\x68\x53\x0a\x6d\xd2\x43\x48\xcd\x5a\x1a\x8b\xc5\xf6\xae\x3c\xbb\x92\x1d\x84\xbe\x7b\x19\xad\x02\x71\x0a\xa5\x14\x27\x17\x69\x77\x34\xfb\x9b\xf7\x76\xc4\x54\x2a\x5f\xa9\x92\xb0\x51\xda\x44\xd1\xb2\x36\x79\xbf\x4c\x52\xb4\x11\xd0\x28\xc6\xae\x84\xbb\x37\x79\xf6\x53\x69\xff\x81\x6d\x5d\x45\x40\xdb\x4e\xc0\xca\x94\x84\xd1\x7c\x8c\x51\xc5\x1a\xe7\x33\x8c\xb2\x6b\xa3\xb7\xdf\x58\x5b\xd6\x5e\x93\x43\xd7\xfd\x99\xdb\x6c\x24\x35\xd1\xa6\xa0\x3d\x46\xd9\x77\xcb\x9e\x8a\x9b\x2b\xd7\x53\xd2\x70\x64\x57\x66\x6f\x8b\x22\x79\x93\x46\x40\x69\x21\xaa\x06\x41\x40\x41\x4b\x12\x51\xd9\x85\x35\x94\xa4\x7d\x4c\xb5\xad\x80\xb3\x4f\x17\xe8\x3a\xc1\x7f\xa5\xdd\xe3\xd0\x90\xa6\x97\x4f\x32\x67\x33\x18\xbd\x1e\xc0\x00\x93\xaf\xd9\xf4\x9b\xae\x7f\x12\xb3\xd0\x0e\x0e\x65\xc3\xe6\x7d\x6d\x72\xaf\xad\xf9\x4c\xf7\x88\xf5\xa6\xb2\xec\xe7\xca\x39\xf2\x2e\x3e\xa8\x28\x8c\x57\x87\x75\x0e\x79\x97\xd9\x17\x5b\x96\xc4\xd9\x25\xb3\xe5\x65\x12\xf7\x6f\x04\xa4\x36\x25\x02\x15\x4b\xcb\xb8\xb9\xc2\x89\x3b\xc7\x49\x13\x8f\x11\x3f\xa6\xc4\x63\x29\x94\xfe\xcd\xc8\xbf\xf8\xa8\x98\xd6\x56\x15\xc7\x71\x20\x82\x07\xa0\xd8\x78\x56\xe1\x43\x03\x8c\xf2\xba\xa1\x63\x37\x20\x50\x9f\xfd\xf2\x07\x0f\x2e\x67\x5d\xf9\x63\x7b\x08\xd4\x17\xf9\x89\x68\x4f\x79\xed\x8f\xd4\x85\x00\x13\x07\xff\x27\x3b\x48\x68\x5b\x90\x29\x30\x79\x98\x2e\x32\xcb\x9e\x7e\xe8\x86\xf1\x57\x26\x2b\x70\x6d\x68\x8c\x05\x6e\xef\x64\x95\xc2\x79\x16\x09\xa2\x5c\x6e\xb0\x9f\x76\x61\xa6\x2d\x06\x3b\x8b\x5b\x7d\x87\x5f\x33\xac\xfa\xdd\x4a\x96\x12\x8a\x82\x8a\xad\x1c\x08\x90\xe4\xf5\xfe\xec\x4c\x4a\xbb\x31\xe6\x43\x38\xb7\xa6\xc9\xae\xcd\xb6\xb6\x9e\x92\x2d\x4e\x1f\x52\x17\x29\x4e\xb1\x95\xe4\xe0\x0a\x4e\x54\x4e\xa7\x98\x4c\x26\xf8\xa1\x4c\xb9\xa6\x02\x1f\x95\x66\x87\x77\xb4\xb6\xbb\x68\x3a\x8d\xa2\xe8\x77\x00\x00\x00\xff\xff\x08\x2f\x9c\x10\xd3\x05\x00\x00")

func entrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_entrypointGoTmpl,
		"entrypoint.go.tmpl",
	)
}

func entrypointGoTmpl() (*asset, error) {
	bytes, err := entrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "entrypoint.go.tmpl", size: 1491, mode: os.FileMode(420), modTime: time.Unix(1531038670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _obfstringGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xbd\x4a\x04\x41\x10\x04\xe0\xf8\xe6\x29\x8a\x61\xcc\xee\xc7\x4c\x10\x2e\xbb\xc4\x17\x30\xf1\x0c\xda\x9b\xde\x75\x40\x7b\x96\xde\x5e\x59\x19\xfa\xdd\xc5\x09\x16\xc1\xb4\xfb\xab\xaa\xd3\x09\xad\x21\x1d\x9f\x2e\x70\xc7\xad\x8a\x51\x91\x19\x24\x60\xb9\xe9\xf7\x64\x9c\xa1\x3c\x29\xcf\x2c\x46\x56\xaa\xa0\x0e\xb0\x77\xc6\x6c\x5a\x64\x44\xec\xf1\x67\xfa\x58\x18\xee\x31\x7c\x91\xfe\x6d\x3c\xe3\xe5\x55\x17\xe1\x16\x76\xad\x1d\xa0\x24\x23\x23\x95\xbc\xee\x91\xde\xf0\x78\x46\x3a\x5e\xc8\x08\x07\xf7\xb0\xeb\xa4\x0c\xf8\xac\xb9\x1b\x3c\x6c\x77\x4c\x5a\xc4\x06\xc4\xab\x5c\x2d\x62\xd3\x2c\xf9\xbf\xb9\x5f\xef\xd6\x3d\xe2\xef\x42\xff\xb5\xd6\x9d\x7b\xf0\x9f\x00\x00\x00\xff\xff\xdf\x60\x4c\x83\xf0\x00\x00\x00")

func obfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_obfstringGoTmpl,
		"obfstring.go.tmpl",
	)
}

func obfstringGoTmpl() (*asset, error) {
	bytes, err := obfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "obfstring.go.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1531036671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _preloadGs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x6f\xea\x30\x14\xc5\xf7\x7c\x8a\x23\x26\xfb\xc1\x8b\xc2\x5b\xde\x90\x52\x89\x3f\x5d\x3a\x94\x01\xb6\xb6\x83\x81\xeb\xe0\xd6\xd8\xd1\xb5\xd3\x2a\xaa\xf8\xee\x15\x09\xa0\x06\x51\xb5\x63\x6e\xce\xf9\xdd\xa3\x7b\xac\x2b\xb7\x8e\xc6\x3b\x2c\x22\x1b\x57\x2c\xfd\xa4\x8e\x34\x66\x56\xb5\x08\x12\x1f\x09\xf0\xa6\x18\x1b\x15\x15\x46\x78\x7c\xce\x13\x40\x7b\x86\x38\x4c\x0d\x46\xc8\x72\x18\xdc\x20\xa4\x96\x5c\x11\xb7\x39\x4c\xbf\xdf\xfa\xd0\xb8\xd2\xb2\x0a\x5b\x11\xd2\xf5\x56\xf1\xd4\x6f\x68\x1c\x85\x91\xf2\x80\xd9\x27\x00\x53\xac\xd8\x35\xc2\x3c\xd9\x27\xc9\x39\xcd\x39\xc5\xd2\xb7\xc1\x84\x6a\xa9\x47\x47\x3b\x4c\x35\xfb\xdd\xf4\x48\x4e\x55\x59\xda\x5a\xb4\x7f\x06\x50\xb2\x4b\x9c\x55\xbb\x52\xf8\xd5\x4b\x07\xd3\x7b\x72\x3d\xf4\x71\xbf\x98\x3f\xa4\xa1\x31\x1a\x5d\x1f\x54\x03\xb8\xca\xda\x01\xfe\x5d\x50\x26\xa4\x3d\xd3\x8c\x4a\xeb\x6b\xd1\x41\x45\xae\xe8\x62\xe3\x15\x95\x56\x36\x5c\xc8\xc6\x3a\x12\xff\x8e\x38\x77\x77\xcc\x9e\x7f\x44\x2e\x2c\x51\x29\x02\xad\xbd\xdb\x7c\x69\x31\x44\xc5\x11\x23\x38\x7a\xc7\x4c\x45\x12\x32\x2d\x28\x2e\xcd\x8e\x84\xfc\xae\xd8\x21\xfd\xef\x74\x6a\x34\x84\xb8\x06\xc0\xdf\x96\x2f\x71\x8b\xd3\x6a\xfc\xc1\x30\xcb\x32\x79\x32\x03\x2b\x26\xf5\x9a\x37\x1f\xfb\xe6\x0d\x74\x0f\xb6\xaa\x8a\xa9\x77\xc1\x5b\xba\x7a\x8a\xcf\x00\x00\x00\xff\xff\xf8\xdd\x34\xe2\xad\x02\x00\x00")

func preloadGsBytes() ([]byte, error) {
	return bindataRead(
		_preloadGs,
		"preload.gs",
	)
}

func preloadGs() (*asset, error) {
	bytes, err := preloadGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preload.gs", size: 685, mode: os.FileMode(420), modTime: time.Unix(1530143358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vm_fileGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x73\xdb\xb8\x11\x7f\x36\xff\x8a\x2d\x6b\x77\xa8\x1b\x9a\x4e\xae\x9d\x76\xc6\x6d\x3a\xe3\x58\xba\x34\x4d\x62\x67\x2c\x5f\x6e\x3a\x3e\x8f\x03\x91\x4b\x0a\x31\x09\xb0\x00\x64\x5b\xf1\xe8\x7f\xef\x2c\x00\x7e\xc9\x92\x63\xdf\xe5\xa1\x4f\x16\x81\xc5\x7e\xfc\xf6\x13\x70\xcd\xd2\x6b\x56\x20\x54\x8c\x8b\x20\xe0\x55\x2d\x95\x81\x28\x00\x08\x67\x4b\x83\x3a\x0c\x76\xc2\x54\x56\xb5\x42\xad\x0f\x8a\xaf\xbc\x0e\x69\x2b\x55\xcb\xda\xc8\x03\x46\xfb\xdd\x67\xca\xeb\x39\x2a\x3a\x81\x22\x95\x19\x17\xc5\xc1\x8c\x69\xfc\xeb\x5f\x2c\x51\x5e\x19\xda\xe2\x32\x0c\xe8\xb3\xe0\x66\xbe\x98\x25\xa9\xac\x0e\x0a\x14\x2f\x52\x9e\xe1\x41\xa1\x53\xc5\x6b\x73\x80\xa2\xe0\x02\xc3\x35\x32\x25\x67\xa8\xcc\xb5\xe2\x15\x8a\x03\x69\x8c\x63\x74\x7f\x0f\x8a\x89\x02\x61\x57\xe8\x18\x76\xeb\xeb\x02\x0e\x5f\xc1\x6e\xf2\x46\x7e\x74\x96\xbd\x5e\x9e\xb0\x0a\x75\xcd\x52\x84\xd5\x2a\x00\x38\x38\x80\xb7\xd6\x4c\x2e\x0a\xc8\xb0\x46\x91\xa1\x48\x97\xd0\x20\x71\x7f\x6f\xd9\x24\x74\x0c\x56\x2b\xc8\xa5\x02\xc1\x0c\xbf\xc1\x1e\x35\xe9\xd6\x10\x3a\x6e\x1f\x99\x99\xc3\x6a\x15\x3a\x9d\x50\x64\x24\x6d\x14\x04\xa9\x14\x9a\x10\xbd\xbf\xdf\x6f\x34\xbd\x8a\x61\x17\xab\x19\x66\x4e\xd5\x09\xfd\xd4\xad\x72\xc4\xd6\xee\x26\x6f\xc7\x24\x7f\x2e\xcb\x4c\x83\x99\x23\x64\xcc\x30\xab\x8e\xdd\xce\x30\x83\x9c\x97\xd8\x3b\x70\xaa\x78\xe1\xd5\x76\x6a\x0c\x18\xbd\x82\xcf\xdd\xd2\x98\x78\xad\x56\x9f\x03\xab\x58\xa7\xae\x57\xc0\x1f\xb9\x55\xac\x76\xb2\x0b\x14\xa8\xb9\x86\x4f\x1f\xac\x06\x96\xa6\x11\x65\x96\x35\xf6\x4f\x69\xa3\x16\xa9\x81\xfb\x00\x60\x02\x3f\x38\x6f\x26\x13\xfb\x27\x00\x78\x07\x17\x97\x14\x5b\xc1\xca\x4a\x3b\xc1\xdb\xde\xd1\x54\x21\x33\x38\x14\xa9\x16\xc2\xf0\x0a\xad\x5c\x17\x21\x43\xf1\xf9\x42\xa4\x43\x36\xd1\x08\x7e\xe8\x31\x25\x45\x0c\x12\xd8\x5e\x97\x13\xbc\x8d\xc2\x3e\x8f\x30\x76\xee\x74\x07\xc2\x18\xfe\xfc\x22\x86\x70\x72\x87\xe9\xc2\x60\x38\x0a\x00\x24\x1d\xff\x53\x47\x43\x3c\x01\x26\x87\x60\x30\x0e\x00\x08\x6f\x85\x66\xa1\x04\x48\x6f\x98\xa5\xfd\x69\x21\x52\xc3\xa5\x78\x87\x4b\x08\x5d\x76\x5d\x31\xad\xd1\xe8\x90\x34\x73\x2b\x1a\xdc\x12\x70\x61\xe4\xf3\x4d\x8f\x64\xdf\xda\xd1\x53\x04\x47\x23\x40\xa5\xc8\x8f\x83\x14\x42\x9e\x6d\x0c\xcd\xfd\x41\x6c\xf2\xcc\x45\xd3\xb6\xb8\x93\xc9\xc4\xe7\x84\xbe\x08\xbb\x13\xe1\x25\xbc\x02\x52\x38\x1a\xf9\x08\x00\x07\xe2\xc1\x01\xfc\x2c\x28\xfb\x50\xd9\x80\xab\xe9\x2f\x37\x73\x70\xa9\x93\x61\x5a\x32\x85\x19\xb0\x99\xbc\x41\x7b\xc2\x23\xdd\x19\x3d\x8e\xd6\x82\x7d\xe4\x7d\xe2\x53\xd1\x19\xe0\x8f\x09\x5e\x6e\x75\x51\xad\xb0\x94\x2c\x1b\x38\x87\x1c\xd2\x38\xc2\xef\x43\xc9\x67\x8a\xa9\xe5\xef\x75\x4c\x4f\xdc\xc0\x25\x4d\x28\x25\x93\xe4\xbd\x64\xd9\xd4\x4a\x88\x1a\xf2\xa4\xd0\x61\x3c\x84\xf9\xea\xea\xe3\xd9\xe4\xfd\xe9\xd1\x38\xbc\x8c\x46\xa3\x6f\x45\xa0\xd3\xd8\x1a\x49\xfc\x9c\x89\x1b\xcc\x78\x18\x90\x9f\x3e\x3c\x33\xe6\x3a\x51\x4f\x31\x70\x2d\x27\xd7\x4c\x9c\x9c\x9c\x9f\xfd\xe7\xe3\xe9\xdb\x93\xf3\xc7\xad\x44\x9f\xb7\x64\x81\xff\xfd\xa0\x88\x31\x63\x57\x50\x18\xb5\x84\x5a\x72\x61\x20\xca\x30\xe7\x02\x33\x98\x2d\xe1\x06\x95\xe6\x52\xc4\xb0\xd0\x0b\x56\x96\x4b\x18\x63\x5d\xca\x25\x49\x7d\xa2\xfd\x3d\x25\x06\x96\x5f\xc5\xf4\x41\xe9\x45\xd6\x1d\xb3\xb2\x6c\x8e\xfd\xc2\xcd\xfc\x9c\x57\x28\x17\x26\x0a\x9d\x3c\x5b\x7a\x3c\x56\xa8\xd4\xb7\xfc\xea\xda\x94\x0b\x5e\xf1\x05\x53\x1f\xbc\xd9\x52\xb0\x8a\xa7\xd6\x8e\x92\x8b\x6b\xcc\x9a\x86\x96\x7b\x26\x1b\x4a\x8f\x2f\xf4\xbf\xbf\xea\x74\x4a\x0d\x70\xb8\x61\xca\x02\x61\x57\x02\xb0\xbf\x5f\xd9\xdc\x74\xa5\x66\x7f\x1f\x5e\x4f\xde\xbc\x3d\x81\x93\xa3\xf3\xb7\x9f\x26\xf0\xf1\xe8\xf8\xdd\xd1\x9b\x09\xbc\xfd\xf0\xf1\xf4\xec\x7c\xfa\xdc\xd6\xbf\xff\xb0\xf7\x6f\xec\xdf\xb0\x10\x19\x52\xc3\x6f\x0e\x12\x95\xf0\xdd\xf9\x4a\xd4\xed\xa7\xed\x07\x4d\x3f\xb1\x26\x7a\xa9\xae\xa8\x75\x4c\x0f\xb7\x4d\x0a\xb1\x25\x24\x15\x7b\x24\x6d\xf0\xdb\xcd\xe9\xb2\x9a\xc9\xf2\x9c\xcd\x4a\x3c\x84\x8a\xd5\x17\xda\x28\x2e\x8a\xcb\x1f\x06\x82\x09\xf5\xfb\x55\xdc\x95\x3c\x0f\x4b\xce\xb3\xbb\x18\x76\x73\x0b\x0b\x31\x7f\x6f\x9d\x4f\xe4\xbd\x9a\x7e\x94\xd1\xa8\xd6\x86\x82\x4b\x06\x54\xfd\xb9\xa7\xdd\x5b\xd3\x32\xa1\xef\xbc\xf5\x3a\xa1\x62\x24\x68\xab\x34\x18\xd2\xda\x82\x96\x5f\xb5\xa8\xd9\x03\x3c\xbb\xdb\x08\xa0\xb5\x63\x1d\x94\x01\x7b\x0f\x0b\xad\x1c\x82\x4c\x7a\xed\xd8\x52\xda\x9f\x0d\x0e\x7d\x67\x25\x3d\x20\x2f\x36\xb0\xa5\xd6\xd4\xe9\x39\x50\x73\xbd\x89\x50\x08\xd9\xdc\x22\xd0\x3c\x3e\xcd\xe8\xb8\xa9\x5c\x36\x91\xdd\xd5\xb2\x41\xb4\xb8\x9a\x67\x95\x0c\xe3\x81\xce\x94\xfa\x3c\xb7\xa7\xff\x60\x13\xc3\xb7\xcb\x5e\x39\xd8\xd0\xe3\x5c\xe6\x4c\x4e\xc6\xdb\xf3\x66\x73\x3d\xb1\xd8\x9d\x8e\xdf\xf9\x6d\x5f\x39\xd0\xce\xf6\x84\xd2\x35\xba\x6e\xb7\x5e\x47\xed\x4c\xe1\x4a\xc2\x80\xcf\xb0\xcb\x3f\xe8\xd8\xa7\xe3\xb3\xf1\x06\xf1\x67\x63\xea\xfa\x86\xf1\xc7\x15\x40\x61\x97\x69\x28\x70\xf2\xa9\x9a\xac\xf1\x79\xe5\xe5\xdf\x07\x3b\xbd\xd9\xdb\xa5\xc4\xcc\x55\x8a\x71\xcb\xfd\x1d\x2e\x8f\x94\x62\x4b\x8b\xe2\x8e\x3d\xc0\x73\xa8\x64\x66\x4f\xc0\xdf\xda\x75\xa8\x15\x17\x26\x87\xf0\x57\xf1\xab\x6d\x6b\x9e\xba\xf1\xc0\x80\xe6\xc5\xdd\xde\x5d\x0c\x21\xc9\xb3\x7b\xdd\xc5\x60\xdd\xf2\x31\xf0\xd6\x60\x39\xcc\xc7\xc1\xc0\xef\x07\xc5\x47\x2b\x73\x7f\x2c\xd2\xe0\x2a\xc6\xc0\x19\xb3\xb6\x05\x31\xd4\x34\x0c\x1f\xdb\x9b\x5b\xb4\xe6\xbf\x6f\x04\xa0\x47\x77\xe5\xa3\x30\x9b\xbd\x24\x8e\x02\x6f\x23\x7b\x73\x4c\x5e\x2f\xf2\x1c\xd5\xc8\x6e\xfd\xb8\x79\x6b\x47\xab\x94\x76\xdc\xea\x09\xde\x9e\x21\xcb\x50\x45\x8e\x75\xa4\xad\x0a\xe4\x5a\x7e\x03\x17\xa4\xeb\xeb\x52\xa6\xd7\x53\xfe\x15\xdd\x0d\x02\xc8\x3a\x64\x15\xf1\x70\xb7\x4f\x62\x72\xfa\xd3\xeb\x68\x16\x03\xbf\xb9\x38\xbc\x1c\x05\x3b\x16\x51\xb4\xe6\xba\xeb\x28\xd1\x8c\xdd\x62\xe4\x57\xa6\x26\x9b\xf8\x3b\x6b\x0c\x5a\xa5\x24\x17\x45\xea\xd4\xb1\x85\xca\xb3\x9f\x5a\x79\x6e\xfd\x7e\x7a\xe8\xe5\xc7\x70\x76\x08\x5e\xce\xca\xa1\xd6\xb5\x79\x2e\x93\x63\x59\x2f\xa3\x6c\xf6\x32\xee\x98\x8e\xfe\xfe\x34\x60\x77\x8a\xaf\xaa\x65\x45\x17\xf0\x1e\x4c\xd9\xec\xe5\x28\xd8\x59\x77\xd1\xce\xce\x3a\x9f\x9d\x55\xb0\xe3\xf5\xe9\xab\xf3\x63\x0c\xc5\x57\xf5\x64\x0e\xc5\x57\x95\x1c\x97\x52\x63\x34\x0a\x1a\x82\x6c\xf6\x63\xf2\x9a\x9c\x17\x35\xd3\xd8\xd8\x4e\xeb\x14\xc0\xe3\xde\xd4\xe1\x1a\x0f\xb4\x25\xf7\x17\x37\xe6\xeb\xa0\x6b\x56\x57\x6d\xa7\x72\x6d\x4a\x25\xae\x4f\xad\x56\xc3\x4c\xe9\x55\xfa\x26\x67\xec\x4c\xa3\x86\x19\xe3\xc8\xda\x51\x60\x7b\xc7\x7a\x64\x9a\x59\x97\x17\x91\x31\x20\x8d\x91\x2d\x03\x9a\xdf\x46\x6e\xe9\x13\x2b\x17\x2e\xbf\xa8\xa9\xaa\x62\x51\xa1\x30\x30\x65\x82\x9b\x25\x1c\xcf\x31\xbd\xd6\x2e\x34\x4a\x14\x96\x53\xd2\x10\xbd\xe7\xda\x8c\xe0\x9f\x24\xb4\x44\xe1\xf4\x3e\x52\x85\x6e\xee\xae\xe0\xe7\xe4\xa2\x40\x95\x4c\x68\x5e\xca\xa3\xd0\x48\x09\x15\x13\x4b\x60\x9e\x8b\x86\x9a\xaa\x43\x46\x2d\xb8\x85\x62\x4f\xd3\xa4\xbb\xa7\x9b\x0b\xee\x5a\x37\x05\xab\x07\x19\x81\xea\xbd\x4c\x19\x6d\xb8\xc4\x6f\xa3\xd1\x52\x9c\x92\x81\x1f\xd8\x35\x1e\x2f\xb4\x91\x95\xd5\x21\x0a\x5b\x29\x76\x86\x23\x11\xdb\x95\xb2\xad\xb1\x39\x10\x36\xd7\xb3\xed\x68\xfc\xe3\xf9\x68\xe4\x78\xfb\x7f\x07\xc6\x46\x9d\x36\x61\x31\x18\xdc\x98\xeb\x52\xcc\xa6\x43\x6b\x7f\xdb\xe0\xdd\x00\xd1\x65\x53\x1b\x6c\x7f\x24\xab\x58\x3b\xb7\x50\xe5\x64\xbd\x25\x1b\xd5\x2c\x99\xdc\x99\x29\x2f\x1c\x89\xea\xef\xb7\x75\x66\xe0\x8f\xa8\x47\x31\x4a\x26\x77\x34\xc2\x44\xdb\x7a\xc3\x06\xd7\xa4\x72\x51\x66\x20\xa4\x01\xb4\x67\x5b\x3c\x60\x2f\x03\x99\x6f\x74\xcf\x40\xa9\xe7\xfa\x6a\x5d\x87\x08\x95\xfa\xcd\x5e\xcc\x2b\x93\x4c\x5d\x3f\xef\x9b\x62\x14\x13\xba\x64\x06\x07\xd6\x58\xc7\x16\x12\x6e\xa8\x14\x0c\xcd\x18\x35\x21\xaf\x6f\xb9\x49\xe7\x70\x43\x38\x0f\xd0\x4f\x22\xb3\xac\x71\x64\x81\x4c\x99\xc6\x75\x6f\x1d\x5a\x13\x06\xfe\x7c\xc0\x61\xed\x88\x6d\xbe\x98\xb3\x45\x69\xdc\x69\x54\xea\x83\xb6\xd7\xa4\x81\x5d\x6d\x00\xd9\x97\xbc\x8a\xeb\x8a\x99\x74\x7e\x48\x0e\xc3\x94\xa6\xac\x3d\x1d\x43\x21\x0d\xec\x9d\x37\xb9\xd3\x93\x12\xc6\x70\xb3\x19\xf9\x3c\x0a\xd9\x80\x75\x2a\x85\xbf\x59\x3b\x80\x0f\x9d\xbb\x9d\x5a\xbf\xd9\x47\xdd\xf1\xd5\xe0\xf5\xb5\x9f\x52\x8a\x20\x8a\x61\x57\xb5\x39\x75\xe6\xe7\xdc\xad\x69\xe5\x08\x5c\x52\xa9\x41\x52\xa9\xde\x92\x75\x93\x1a\x24\xd5\x60\x20\xb7\xdb\x68\xde\xa3\x20\xc9\x6d\x45\x6b\xa4\x37\x34\x3c\x87\xc2\xb4\x94\x2f\xda\xd7\x60\x0a\x71\xdb\xe4\xd6\xae\x62\x9e\x73\x9e\xbc\x41\x81\x8a\x19\x74\x0c\xa7\x76\xda\x83\x50\x85\xdd\x1b\xdd\x93\xda\x60\x34\xe4\x76\xa4\x8a\x86\x15\x0b\x7d\x24\x39\x2d\xf1\xbf\xad\x96\x2f\x5b\x2d\xa7\x5c\x14\x25\xb6\xbe\x93\xc2\xe0\x9d\x81\x7d\x60\xc6\x60\x55\x1b\xaa\xc2\x7e\xcf\xcc\x99\xfd\xb4\x37\x23\x85\xe6\x13\x2b\x87\x65\xc7\xfa\xfc\x5c\xda\x6e\x1a\xa9\x17\xdb\x0a\xcd\x96\x48\xf6\x52\x6c\x02\xf6\xa3\x2d\x67\xbc\x5c\x28\xec\xe2\xcd\x97\x86\x2d\x25\x23\x8f\x9e\x17\x92\xeb\x71\xfd\x20\x28\x3d\x0b\x67\xb0\x0f\x91\x52\x77\xff\x91\x38\x9f\x73\xdd\x55\xc2\x39\xd3\x50\x2d\x4a\xc3\xeb\x16\x54\x0d\xfb\xfe\x4d\x87\x9c\x62\x0b\x0d\x83\x7f\x4f\x81\xd9\x5b\x8b\xbd\x0f\x6c\xf4\x41\x2a\xab\x9a\x19\x3e\xe3\x25\x37\xcb\x00\xe0\x8b\x3e\x9d\x7d\xd9\x80\xf8\xe9\x8c\x78\x47\x9f\x2f\x2e\x3f\x6f\x98\x08\x1f\x41\xbc\xab\x89\x15\xbb\x46\x60\xc2\xab\x24\x2d\x43\xab\x59\x6b\x0a\xd3\x9a\x17\xc2\x96\x03\xa7\x66\xf8\x7d\xe0\x6f\x5e\x67\x37\x61\xff\xa0\x0a\xc4\xb0\x7b\xb5\xbd\x08\xf8\xa4\x77\xc3\xdc\x5a\xea\xbb\x01\xda\x22\x98\x4c\xd1\x3f\x57\xfa\xed\x30\x1e\x54\x85\x67\x86\x6d\x07\x22\xcb\x32\xc0\x12\x7b\xfd\xd1\x16\xce\xbd\x73\x4a\x9a\x2f\xba\x01\x83\x00\xa2\x60\x1e\xf9\x2e\xa3\x9a\x66\xa9\x06\x5f\xdf\x3d\xd0\x1f\x43\x7a\x58\x7a\x3b\x2c\x9b\x17\x03\xaa\x2b\x99\x8f\x8b\x2e\x25\x1c\x9c\x2e\xdd\x47\x1b\x8a\xe7\x37\xd2\x44\x34\x95\x45\xbb\x99\xc0\x4a\x6b\x29\x98\xc8\x1a\x39\x0b\xe1\x9f\x77\x93\xae\x74\x7e\x97\xb2\xd8\x3c\x65\x13\x5e\x3f\x37\x42\x36\xda\xb3\x0a\x3a\x80\xe8\x52\x73\xce\x28\x63\x33\xf8\x17\xe3\x4a\xc3\x0c\x4b\x79\x1b\xd8\xf7\x9b\xfd\xff\x05\x00\x00\xff\xff\x9c\x8e\x8b\x16\x96\x1d\x00\x00")

func vm_fileGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_vm_fileGoTmpl,
		"vm_file.go.tmpl",
	)
}

func vm_fileGoTmpl() (*asset, error) {
	bytes, err := vm_fileGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vm_file.go.tmpl", size: 7574, mode: os.FileMode(420), modTime: time.Unix(1531038719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"entrypoint.go.tmpl": entrypointGoTmpl,
	"obfstring.go.tmpl": obfstringGoTmpl,
	"preload.gs": preloadGs,
	"vm_file.go.tmpl": vm_fileGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"entrypoint.go.tmpl": &bintree{entrypointGoTmpl, map[string]*bintree{}},
	"obfstring.go.tmpl": &bintree{obfstringGoTmpl, map[string]*bintree{}},
	"preload.gs": &bintree{preloadGs, map[string]*bintree{}},
	"vm_file.go.tmpl": &bintree{vm_fileGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

