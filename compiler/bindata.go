// Code generated by go-bindata.
// sources:
// ../../templates/builtin.yml
// ../../templates/embed.go.tmpl
// ../../templates/entrypoint.go.tmpl
// ../../templates/example.gs
// ../../templates/functions.yml
// ../../templates/obfstring.go.tmpl
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuiltinYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6b\xe3\x40\x10\xc5\xfb\xfd\x14\x0f\x5c\xf8\xae\xb0\x7d\xc5\x71\xc5\x76\x77\x97\x2a\x90\xa4\xb0\x49\x63\x5c\x8c\x56\x63\x69\x1d\x79\x57\xec\x8e\x0c\x22\xe4\xbb\x07\xfd\xb1\x12\xe4\x38\x21\x60\xab\x12\x6f\x78\x33\xf3\x7e\xb3\x93\x4b\x7c\x6a\xa2\x26\x30\x3e\x30\x4a\x32\x4f\x94\x71\x23\x5c\xa4\xf1\x0c\x8e\xf6\xac\xb1\x94\x60\x5d\xb6\xf2\xff\x6a\xe1\xbf\x21\x50\xad\x80\x94\xa3\x09\xb6\x14\xeb\x9d\xc6\x7f\xef\x0e\x1c\x24\x82\x70\x4b\x07\xea\x2a\x88\xad\x0d\xe2\x41\x48\x6a\x61\x50\xe3\x9d\x2b\x80\x2a\xc9\x7d\xd0\xc8\xd8\xfd\x32\x36\x65\xfc\xc8\x45\xca\xa8\x17\x8b\xcc\x4a\x5e\x25\x73\xe3\xf7\x8b\x63\xf1\xa7\xc2\x31\x99\x46\x52\xd9\x42\xac\x6b\x7a\x84\x2c\x6a\x05\x00\x33\x14\x94\x70\xa1\x41\xdd\xa2\xad\x08\x64\x5e\xea\x92\x75\xbf\x86\x02\x02\x4b\x15\xdc\xd8\x94\x92\xd0\xc8\x31\x5d\x6f\x9a\x7d\xa7\xbd\xdc\xf9\x34\x24\x54\x3c\x30\x19\x58\xac\xfc\x30\xf5\x1c\x93\xb7\xf0\x1d\x8c\x13\x46\x57\x64\xf2\x79\xbc\x8f\x91\x7c\xc1\xf1\x2c\x93\x65\xc1\x5c\x8e\x39\xb4\x22\x24\x67\x3c\xde\x61\xeb\x43\xfb\x1b\x4b\x36\x76\x6b\x39\x45\x64\xe3\x5d\x1a\xaf\x48\xa0\x9f\x30\x4a\x63\x9d\xfc\xf9\xfd\x8e\x00\xd6\x9b\x21\xc7\x4d\xb5\x3f\x89\xd1\x68\xa3\xf7\xed\x93\x1d\x1b\x69\x3a\xb5\x47\x5d\x3e\xdc\xf7\xd2\x15\xc3\xf8\x64\x77\x1a\x84\xc3\x96\x0c\x3f\xbf\x9c\x3d\xe8\x2e\x7a\xf7\xcd\x9b\xaa\xd7\x00\x00\x00\xff\xff\xcf\xf2\x8b\xc9\x9c\x04\x00\x00"

func templatesBuiltinYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuiltinYml,
		"templates/builtin.yml",
	)
}

func templatesBuiltinYml() (*asset, error) {
	bytes, err := templatesBuiltinYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builtin.yml", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEmbedGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x04\x31\x10\x85\xf7\x7d\x8a\xc7\x90\x45\x02\x33\x39\x80\xe0\x42\x50\x70\xe3\x20\x8a\x6e\x44\x86\x8c\x29\xdb\x82\x4e\x7a\xac\xa4\xc7\x9f\x90\xbb\x4b\x9a\x06\x45\x74\x57\x55\xef\x7b\x1f\x55\xca\x06\xe2\x62\x4f\x50\xbb\x35\xd4\x41\x18\x27\xa7\x50\xf6\x2e\xf2\xeb\xb5\xf0\x28\x9c\x99\x12\x6a\xed\x7e\x91\xc7\xd0\x40\xcd\xd1\xd3\x3b\x94\xbd\x1d\x25\x93\xbf\xbf\x4a\xb3\xc3\xfc\x51\xa0\xb0\x27\x3f\xcb\x8f\xc1\x5e\xb4\x65\xd6\x3e\x4f\xf1\x09\xa5\x2c\xb9\xdd\xba\x40\x97\x2e\xbd\xa0\x56\x6d\xf0\xf0\xb8\xff\xc8\x84\xd2\x01\xb2\xc6\xae\xb5\xfb\x4f\x3e\xd8\x2d\xbd\xdd\x90\xf3\x24\x3a\x65\xe1\xd8\xa7\x1f\x97\xd5\xb7\xec\xdc\x65\x87\x5a\x57\xc6\x74\x40\x5a\x04\x3c\x4e\x99\x07\xdb\xe8\xb3\x61\xd0\xd2\x32\xa1\x3c\x49\x44\xea\xda\xd7\xa0\xe8\xb1\xa9\xff\x8c\x5f\x01\x00\x00\xff\xff\xd5\xe3\xa7\x72\x31\x01\x00\x00"

func templatesEmbedGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEmbedGoTmpl,
		"templates/embed.go.tmpl",
	)
}

func templatesEmbedGoTmpl() (*asset, error) {
	bytes, err := templatesEmbedGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/embed.go.tmpl", size: 305, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEntrypointGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x4f\xdb\x40\x10\xbd\xfb\x57\x8c\xac\xa8\xb2\x45\xd8\x50\x8e\x48\x39\xa0\x12\x28\x12\x50\xa4\x14\x38\x20\x8a\xd6\xf6\x64\x19\x25\xde\x75\xf6\x23\xa1\x8d\xfc\xdf\xab\x59\x3b\x40\xc2\xa1\xbd\x44\x3b\xb3\x6f\xe6\xbd\x79\x3b\x4e\x23\xcb\xb9\x54\x08\xb5\x24\x9d\x24\x54\x37\xc6\x7a\xc8\x12\x80\xb4\x34\x75\x63\xd1\xb9\x91\xfa\x43\x4d\xca\x19\x32\x23\x32\xc1\xd3\x22\x46\xee\xb7\x2e\xbb\x83\xb7\xa5\xd1\xab\xed\x99\xb4\x72\x69\xc2\x81\x22\xff\x12\x0a\x51\x9a\x7a\xa4\x50\x1f\x95\x54\xe1\x48\xb9\xd2\x52\xe3\x47\xa8\x15\x69\xe4\x9a\xcd\xe6\x10\x68\x06\xb8\x84\x81\x98\x68\x59\x2c\xf0\xca\x28\x45\x5a\x81\xb7\x01\xa1\x6d\xff\xd5\x6a\xd1\xc1\xd3\x3d\x9c\x23\x1b\x1a\x87\x9a\xef\x6d\x70\x1d\x15\xa0\xae\xb8\x65\x9e\x24\xb3\xa0\xcb\x38\x76\x96\xc3\x26\x01\x58\x49\x0b\x6b\x05\x3c\x96\x78\x90\xe4\x2f\xac\x09\x4d\xaf\xcf\x4a\xad\x10\x06\xcf\x43\x18\x34\x96\xe0\x64\x0c\x03\x71\xa7\x69\x79\x6b\xc9\x58\xf2\x84\xae\xd3\xb9\x87\x5d\xd5\x0c\xcd\x48\x57\xf8\x0a\x03\x31\x35\xd6\x63\x75\x7f\xed\x62\x97\xbc\x2b\x59\x2b\x71\x5a\x55\xd9\xd7\x3c\x01\x50\x06\x58\x55\x2f\x08\xa0\xc2\x19\xb2\x28\x71\x66\x34\x66\x79\xcc\x29\x87\xdc\xb4\xf3\x4f\xdc\xe0\x3a\x4b\x37\x1b\xa6\x12\x97\x67\xd0\xb6\x69\x87\xfa\x1f\x53\x63\x2f\xc1\x79\xb4\xe2\xdc\xd8\x5a\x7a\x8f\x16\xc6\xf0\xa5\x77\x54\x5c\x4c\x27\x6f\xf9\xcd\xa7\x92\x1f\xc1\xc3\x18\xb6\xd8\x2b\xa3\x1e\x2c\x31\xf0\x46\xd6\x78\x02\xbb\xaa\x3e\x15\x5f\xe1\x0a\x17\x5d\xb9\x0d\x4e\x9c\x61\x11\x54\xcc\xbd\xc9\xef\x5f\x6a\x5b\xf7\xcd\xa2\xf4\x78\x7f\xfd\x6e\x83\x98\xa2\xff\x49\x35\x9a\xe0\xb3\x9e\xac\x0f\xa1\x6d\xb7\x36\x7c\x7c\x0e\xac\x0b\xac\xe2\xe3\xad\x6a\x31\xe1\xc0\xc1\xe1\x07\x8a\xd3\xaa\xba\x8c\x1f\x40\x67\x69\x84\x8b\x73\x5a\xa0\x96\x35\x7b\x96\x0e\xe1\x3d\xcf\x53\x7e\x97\xee\xe5\x23\x17\x4b\x3e\xdc\xf1\x56\x56\xd3\xb8\xa4\x7b\x8f\x34\x8c\xd7\x1d\x99\x7b\xdc\xb9\x13\xca\xa5\x4f\x59\xfe\x3e\xe5\xe4\x15\xcb\xe0\xf1\x76\x21\x75\x9c\xbd\x8d\xbf\x3b\x6c\x6b\x15\x37\x76\xff\xa2\xed\x97\x5c\x65\x73\xb0\x41\xe3\x10\x0a\x78\x7c\xe2\x53\x0e\xdd\x87\x1a\xf7\x6c\x66\x2c\xd0\x10\x9e\xd9\x99\xce\xad\xa2\xdf\xbf\xe2\x91\x9e\xe0\xd7\x18\xe6\x31\x9a\xf3\x91\x53\x2c\x22\x01\x58\x72\x41\xd7\x27\x3b\x7a\x3d\x3e\x66\x76\xd7\xf7\xe9\xff\x13\xc4\x9d\x5e\x06\xe3\x31\x5b\xc2\xc1\x16\x5a\xe4\x70\x00\x4b\x06\x5b\xf4\xc1\x6a\x70\x49\x9b\xfc\x0d\x00\x00\xff\xff\xe8\x29\xf6\xc4\x87\x04\x00\x00"

func templatesEntrypointGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEntrypointGoTmpl,
		"templates/entrypoint.go.tmpl",
	)
}

func templatesEntrypointGoTmpl() (*asset, error) {
	bytes, err := templatesEntrypointGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/entrypoint.go.tmpl", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesExampleGs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\x23\x37\x10\x7e\xf7\x5f\xf1\x9d\x9f\x9c\x34\xf5\x96\x42\x5f\x12\xae\x90\x4b\xcd\x35\x34\x39\x97\xb8\xb4\x14\x0e\x8e\xd9\xdd\xd9\x5d\xa5\x5a\xcd\x56\x1a\xd9\x59\x8e\xfb\xdf\x8b\xb4\x76\xea\xb4\xe9\x4b\x52\x83\x61\x91\x66\x3e\xe9\xfb\xa1\x29\x0a\x7c\xfd\x92\xdf\xac\x28\xf0\x7e\xf5\x61\xb5\xb9\xde\x60\x53\x79\x33\x28\x56\xae\x35\x8e\xd3\x46\xa7\x3a\x84\xf3\xa2\x68\x8d\x76\xb1\x5c\x56\xd2\x17\x2d\xbb\x6f\x2a\x53\x73\xd1\x86\x5c\x3d\x2b\x8a\x54\xb9\x7a\xa0\x7e\xb0\xbc\x87\x48\x2b\xe9\x7f\xfa\x41\x94\xcf\xb1\x6c\x03\x1a\x63\x39\x80\x3c\xe3\x3e\x06\xc5\x3d\x6d\x69\x02\x78\x83\x95\xbb\x97\xf1\xcd\xec\xc5\x0c\x5e\xde\x59\x14\xb8\x5a\xdf\xfe\x7c\x7d\xb3\xba\xc3\xed\xe5\xd5\xdd\x7a\x83\xc5\x1d\xf7\xb2\x65\x54\xd2\xf7\xec\x14\xe4\x6a\xf4\x52\x9b\x66\x84\x0a\x62\xe0\x93\xd4\x55\x14\xa6\x1f\xc4\xeb\x79\x31\x90\x76\x85\x4a\x61\xa5\x22\x5b\x24\x96\x4b\x7e\xe0\xe3\x9a\x4f\xd1\xdb\xf3\x83\x92\x3b\x2e\x83\x51\xce\x52\xee\x8c\x76\xcf\xf4\x5d\x3b\x94\xa2\x1d\xa4\x81\x76\x12\x18\x3c\x69\x1b\xce\x30\x4a\x44\x45\x0e\x9e\xd5\x1b\xde\x32\xb4\x63\x50\x08\x9c\x15\x2f\x47\xc4\x60\x5c\x8b\xcb\xb4\xb2\x98\x1f\x40\xe7\x27\x58\x78\xd6\xe8\x5d\x40\x39\x2a\x83\xbc\xa7\xf1\x64\xf9\x3a\xe1\xde\xdf\xac\xdf\x5d\xde\x6c\x66\x5b\xf2\x50\x0e\xfa\x29\x7d\xbc\xc5\xbc\x63\x6b\xe5\x0c\x3b\xf1\xb6\x9e\x5f\xfc\xbd\xed\x62\x8f\xb7\xf8\xee\xe2\x75\xa7\xfe\xb8\x5e\xff\xb4\x49\x1f\xbf\x4b\xf4\x68\x8c\x23\x8b\x29\x47\xe8\x53\xae\x4c\x52\x2a\x1b\xa7\x1d\x07\x46\xcf\xda\x49\x1d\x96\x59\xd8\x06\xe4\xc6\xfd\x12\x0e\x8a\x34\x64\x03\x9f\x65\x25\x7f\xbd\xc5\xce\x58\x8b\x8a\x29\x64\x2b\xf8\x81\xab\xa8\x46\x5c\x8e\x81\x13\x45\x25\x4e\x8d\x8b\x9c\xc2\x90\x5a\x42\x2c\x03\xff\x19\xd9\x65\x07\x9a\xe8\xaa\x54\x1e\x5e\xa9\xed\x3b\x6e\xc4\xf3\x0f\x3c\x58\x19\x17\x27\x30\x01\x3d\x53\xe2\x24\x20\x6b\x65\x97\x83\x90\x8e\x97\x21\x25\x2c\x3a\xa3\x63\xea\x53\x81\x71\x5b\x0e\x6a\x5a\xd2\x29\x1d\x4a\xbe\x65\x45\x18\x83\x72\x9f\x0a\x6a\x56\xf6\xbd\x71\x0c\xd3\x24\x9c\xcc\x73\xcb\x0e\xbb\xfd\x09\x83\x97\x8a\xb9\x3e\x30\x7c\xbc\x45\x50\x1e\x96\x49\x77\xf4\xa6\xed\xf4\x3c\x33\xc4\x55\xc7\xd5\x1f\xa9\x36\xf0\x01\x11\x1d\xed\xa3\xe9\x53\x21\xc8\x57\x9d\x51\xae\x34\x7a\x5e\x3e\xdf\x45\x03\x55\x1d\x27\xa2\xc6\x05\x25\x6b\xb9\xfe\x8f\xca\x31\xf9\x3e\xd0\x68\x85\x6a\x74\x14\x40\xd6\x33\xd5\x23\x4a\x66\x87\xda\xcb\x30\xa4\xde\x83\x13\xff\x94\xf2\xf3\x0c\xb8\x91\xf6\xda\x35\xb2\x98\xff\xd2\xa5\x03\x03\xc8\x1d\xde\x58\x7a\x74\x84\x9a\xcb\xd8\xe6\x09\x40\xae\x5e\xce\x4f\x2e\xa6\xa6\xdf\xc8\xbb\x7d\x53\x8e\x89\x38\x3b\x22\x74\xb2\xc3\xae\x63\x97\x99\xc7\x30\x11\xff\x38\xf7\xd1\x7d\x9c\xa7\x78\xfc\x0b\x66\xe5\xbd\xf8\xc5\xfc\x5a\x27\x94\x53\x27\x7a\x8a\xc1\x1b\xa7\x13\x8e\x8f\x0e\x8d\x97\x1e\x94\xae\x30\x18\xcb\x35\x4a\xe3\xc8\x8f\x7b\x8c\x29\xb9\x50\x1f\xf9\x62\xf6\xe5\x75\x49\x3b\xce\xd8\xae\x63\xcf\x99\x06\x55\x1a\xc9\xda\x11\x75\xde\x7e\x22\x7a\xf6\xe5\x8e\x7b\xee\x4b\xf6\xc9\x98\xa3\xeb\x24\x83\x8c\xee\xbb\x02\x42\xac\x2a\x0e\xa1\x89\xd6\x8e\x47\x96\x3c\x31\xc3\x34\x8b\xc7\xf1\xf0\x3d\xbe\x9d\x16\x8f\x3c\x3a\x1e\x2d\xf8\xea\x71\xd2\x64\x21\xbe\xfc\xcf\x62\x5c\x36\xca\xfe\xf1\x76\xf9\xa5\x85\xe9\xa9\x09\x2a\xcb\xe4\x10\x07\x88\xc7\x96\xac\xa9\xd3\x03\x9b\x88\xa6\x71\x73\x44\xef\x29\xca\xe7\x67\xee\x38\xfb\x2b\x00\x00\xff\xff\x39\x5b\xcd\x08\xad\x07\x00\x00"

func templatesExampleGsBytes() ([]byte, error) {
	return bindataRead(
		_templatesExampleGs,
		"templates/example.gs",
	)
}

func templatesExampleGs() (*asset, error) {
	bytes, err := templatesExampleGsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/example.gs", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionsYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x73\xdb\xb6\xf2\x7f\xf7\xa7\xd8\x69\xfe\x33\xb1\x3b\x6d\x9a\xb4\xf9\xe7\xc1\x6f\xb6\x94\x38\x3a\xa7\x8e\x15\xc9\x76\x3a\xd3\xe9\x74\x56\xc4\x4a\x44\x4c\x02\x2c\x00\xca\xd6\xf9\xf4\x67\x00\x90\xba\x92\x32\x45\x91\xbe\x24\x47\x8f\x02\x48\x60\x7f\x7b\xc1\xde\xc0\x17\x4d\xfc\x0e\x5e\x1c\xbc\x80\x40\x2a\x82\x04\x83\x1b\x9c\x90\xfd\xa3\x91\x17\xff\x0c\x02\x63\x3a\x86\x13\xad\xc9\x1c\x00\x30\xd2\x81\xe2\x89\xe1\x52\x1c\xc3\x80\x8c\xe2\x34\x25\x0d\xe8\x16\x26\x06\x68\xe7\xc1\x58\xc9\x18\x4c\x48\x70\x7d\x0e\x14\x8f\x88\x31\x62\x30\xe6\x11\x81\x36\x52\xd1\xab\x03\x00\x4c\x4d\x28\xd5\x31\x4c\x48\xbc\x0e\x38\x23\x38\x0c\x8d\x49\xf4\xf1\x2f\xbf\x4c\xb8\x09\xd3\xd1\xab\x40\xc6\xbf\xe4\x83\x47\x07\x90\x53\x76\xec\xe8\xb4\x2f\x50\x13\x7d\x7c\x00\x00\xf0\x33\x44\x38\xa2\xe8\xd8\x2f\xfe\x09\x63\x72\x7f\x03\x4c\xa4\x99\x25\x74\x0c\xda\x28\x2e\x26\x07\x00\x8a\x4c\xaa\xc4\xfa\x63\x76\x63\x5d\x34\xb8\xf6\xd4\xcb\x3f\xff\x1a\xcd\x0c\xbd\xcc\xfe\xf6\xcf\x1e\x83\x51\x29\xad\x3e\x4f\x4a\xad\x3d\x4a\x4a\x49\x55\xf4\x5c\x0e\xe7\x00\x05\x93\xf1\x30\xdf\xd7\x0a\xaa\x67\x24\x48\xa1\x71\xa8\x2a\x37\x0f\x30\x4a\x42\x04\x91\xc6\xa4\x78\x90\x91\x03\x72\x0c\x08\x3a\xa1\x80\x8f\x39\x31\x88\x48\x4c\x4c\xd8\x16\xb4\xda\xa8\x88\xc4\x1a\x99\x5c\x98\x77\x6f\x4b\x61\x9d\x62\x94\x96\x72\xe2\x1e\x64\xce\xf9\x1d\xb1\x0e\x6a\xaa\x0c\x51\x6c\x9f\x80\x00\x35\x7d\x7f\x68\xf5\xc4\x86\x6a\x16\x20\x24\xd2\x78\x44\x0a\x46\x64\x6e\x89\x04\xc4\x5c\x00\x0a\x06\x31\xde\xb5\x05\x43\xcc\xcb\x30\x58\x9e\x84\x77\x7b\x03\xc5\x1d\x00\xa5\x28\xfd\x21\xd5\xe9\xcc\x90\x5e\x07\xe9\x8f\x8b\x01\x98\x5b\x09\x56\xcd\x01\x95\xc2\x99\x06\x23\x27\x64\x42\x52\xad\xd9\x28\xbb\x93\x13\xbb\xd6\x36\x73\x33\x9f\x3e\xaa\x30\xbd\x3a\x4e\xdb\x4c\x5a\x0e\x96\xd5\xb8\x64\x98\x60\xb0\x89\x97\x1b\x02\x14\x33\x48\x05\x0f\x24\x23\x08\x42\x54\x18\x18\x52\x1a\x64\x6a\x32\x25\x73\x52\xdb\xa2\x6a\xed\x66\xdd\xeb\x29\xd6\xc5\x68\x9c\xea\x00\x4d\x89\x01\x3a\x45\xbd\x64\x5a\xb2\xb9\x52\xc1\x38\x15\x81\x9d\xf1\xcc\xa9\xef\x92\xdc\x81\x7e\x46\xdf\x1e\x02\xe7\xdd\xff\x5f\xa7\xb9\x4f\x6a\x2c\x55\x0c\x28\xec\xe8\xe1\x11\x84\xa8\x43\x90\x02\x18\x1a\x6c\x8b\x5c\xb6\xd5\x2f\x69\x92\xe2\xe1\xc7\x93\x37\x5b\x48\xb6\xc3\x5b\x68\xc6\x30\x0c\x0b\xe9\xb5\x03\x4f\x8e\xd6\xd3\x77\x6f\xdf\x0b\x6b\xc0\x0a\xe4\x9a\xde\xbd\x05\x72\x83\xf6\xec\x5c\x1c\x0d\xcf\x99\xd8\x2e\x6d\x21\x96\x51\x4e\x6c\xa6\xcf\x46\x3e\x30\xe1\x35\x34\xb8\xba\x73\x7e\x47\xc1\xfb\x25\x77\xbc\xb2\x8b\x7e\xc9\x63\xd2\x06\xe3\x64\xd3\xb5\x32\x2e\xb6\xd1\x33\x6d\x28\x7e\xa9\x21\x48\x95\x22\x61\xc0\xe4\x4f\x00\x17\x40\x89\x0c\x42\xb0\xda\x83\xa6\x39\xe3\x00\x7f\xfe\xb5\xab\x63\x94\xf9\x5b\x25\x54\x7e\xc4\x68\xc3\x77\x1c\x1a\x99\x38\x0a\x73\xc2\xae\xcf\x7d\x44\x17\x48\x61\xb8\x48\xad\x8c\x58\x58\xd3\x66\xed\xfc\xae\xb4\x8d\xa4\x8c\x8a\x48\x6b\x26\xf0\xb5\x11\xb5\x25\xb2\xb5\x88\xfa\xbd\x43\x90\x3a\x32\x8e\x51\xb0\x75\x1e\x64\xa3\x3a\x93\x32\x08\xfc\x34\xbd\x1f\xdc\x96\xa0\x62\xad\x1c\xa1\xa6\x4e\xcc\xca\x8d\xcb\x7c\x66\x10\xb3\x13\x35\xd1\x9b\xfa\xe8\x27\x97\x5b\x2f\x45\xe6\x62\xf4\x95\x02\xb3\xf6\xe8\xf5\xb9\x25\x76\x40\x3a\x91\x42\xd3\x36\x61\xfd\x20\xd5\x4d\x3d\xd8\x60\xca\x11\xd0\xaa\xe3\x8d\x8b\x12\xa3\xe8\x19\x03\x99\xf0\xf5\xd7\x97\xc4\x3f\xfb\x19\xc2\x66\xc4\xdd\xea\x91\xcb\xfc\x34\xad\x47\x2f\xe0\x05\x5c\x5e\x74\x2f\xe0\x30\xe2\xa3\xbf\xed\x12\xaf\x26\xf2\x68\x2e\x2b\x5f\x14\x37\xf4\x81\x47\x1b\xa7\x9e\x1b\xd0\xee\x18\xf2\x56\x6d\xf9\xac\xf3\x67\x9f\xdb\xef\x2d\x37\xa1\xb3\x82\x13\x3e\x25\x01\x09\xa9\x98\x6b\xcd\xa5\xd8\x53\x07\xc7\x7e\x4f\x05\xa2\x93\xa0\x09\x2b\xc8\x4d\x95\x74\xd5\xe2\x9d\xa4\xe2\x75\x11\xdb\x1e\x5f\xdb\x97\x68\x0b\x92\x29\xca\x60\xdc\x2b\x66\x76\x77\xb5\xce\x5b\xc7\x97\x4b\x8a\x93\x9a\x4c\x33\x14\x27\x52\xa1\x9a\x79\xf6\xa1\x60\x39\x81\x8e\x8b\xe3\x34\x8a\xdc\x9c\x5c\x1a\x4d\xe8\xe6\xd8\xc5\xeb\x39\xb2\xe5\x8c\x14\x5b\x52\x90\x3b\x31\xb2\x24\x5f\x99\x46\xd1\x76\x59\x69\x85\x41\x1d\x99\xcc\x8a\x78\x33\x20\x64\x1e\x63\xeb\x1f\x90\x30\x1a\xe4\x18\xa4\xa0\x05\x23\x02\x99\x70\xd2\xc0\x8d\x63\x95\x90\x26\x24\x55\x51\xc1\x9a\xe0\x87\x56\x41\xbf\x9a\x6e\x31\x6d\x2a\xce\xdc\x5d\xb1\x6a\x03\x3f\xa0\x24\xc2\xc0\x19\xb3\xe2\x68\x7c\x48\xa8\x82\xd0\xb9\xf0\x0e\xf2\xb1\x54\x0b\x6f\xde\x2b\x82\x7b\x83\x06\xc2\x20\x04\x2e\xb4\x41\x11\xd8\x79\xa9\x60\x96\x59\x26\x44\x93\xe7\x6d\x60\xb0\xa4\x35\x18\xcb\x54\xb8\xbc\x8e\x1f\xd5\xf9\xab\x18\x34\xcc\xa3\x6c\xe4\x3e\xd8\x63\x34\x41\x15\xf6\x64\xdb\x8c\x49\xac\xbb\x1b\xf7\x04\x1b\x19\x9d\x19\xe6\x75\x0e\xda\xda\x7c\x3e\x49\x12\x12\xcc\xb2\xb9\x30\x5b\x79\xc2\x7c\x94\xe6\xd5\x65\xd5\xfc\x59\x5e\x91\xe7\x25\xce\x41\x6e\x90\x3b\x8d\x1d\x4d\x0d\xab\xc6\x02\xb2\x62\xcd\x58\xc5\x6c\x11\xdf\x3e\x11\xbc\x90\xb1\xe1\xb2\xd5\xde\xa1\x60\x55\x0b\xae\x2e\x45\x54\xec\x15\xf9\x91\xb9\x05\x41\x33\x07\xcd\x9d\x94\x52\xcd\x0f\x53\x14\xf3\x75\x1e\x0a\xb1\xc6\xed\x29\xb2\xf2\x83\x0c\xd7\x1c\x84\x39\xdd\xfb\xa6\x44\x9a\xa6\x3d\x37\x12\x25\x9a\xd6\x92\x91\xb2\xc0\xbd\xbf\xe3\xda\x6c\xd8\xa7\x4e\x48\xc1\x8d\x06\x9e\xab\x14\x90\x9b\xb6\x0e\xa2\x8f\xda\x1f\x1f\xbe\x39\x11\x2b\xf8\xd9\xed\xb5\x88\x5e\x47\x11\x1a\xea\x72\xb5\x01\x9e\x1b\xb0\x00\x31\xae\x28\x30\x52\xcd\xca\x95\xf0\x19\xeb\x60\x83\x51\x25\x17\x5f\xc9\x95\x1a\x5a\x4b\xd1\xf4\xdc\x0a\x3d\x61\x64\x5f\xc9\x60\x9d\x65\x7e\x14\x74\x48\x51\xe4\x8a\x61\x5c\xb8\x40\x24\x51\x72\xca\x19\x31\xe8\xf7\xba\x4b\x0c\xba\x9e\xa9\x54\x17\x72\x68\x6a\x47\x5e\xbf\x7e\xb3\xc2\xa5\x39\x75\x25\x2e\x6d\xbe\x6a\x15\x57\x55\xc9\x20\x20\xad\xdd\x76\xa0\xb2\xbf\xaa\x52\x61\x78\x5c\x4f\xce\x17\xc8\x0d\x29\x1a\x57\x43\xce\x9e\xc9\x09\xfa\x8c\x63\xbe\xe5\xc7\xc3\xaf\x39\x4c\x9a\x91\x49\x2b\xf1\x82\x4c\x6b\xb2\xde\xfd\x34\xfc\x9c\x92\xce\x10\x5b\x65\x97\xd6\xa9\x33\x4d\xdd\x4f\x43\xf8\x27\x25\x6b\x9a\x96\x6c\x3a\x37\x2f\x6d\x58\x30\x4f\xdf\xed\x6e\x91\x84\x6b\x2d\x2a\xe0\x92\x41\x35\xa1\x52\x07\x7e\xc5\xdd\xff\xc7\x6e\x7e\x37\x66\xa2\xd0\xb7\x54\x5a\x4d\xdc\x7e\x02\xec\xa3\x1c\x1f\x2f\x2f\xfb\x67\x64\x8a\x5d\x10\xa3\xf8\x74\x29\x92\x73\xb9\x0e\xe1\x1e\x39\xd4\x47\xd6\x67\x4d\xa4\x0f\x42\x6a\xea\x45\x29\xd6\xa9\x8a\x76\x8d\x94\xd0\xa4\xba\xb3\xa9\x43\x55\x83\xa4\xba\xbe\xcb\x3e\xd8\xf7\xa5\x36\xff\x1a\x5e\x7c\x5a\x07\xfe\x52\xa1\xd0\x31\xb7\xee\x0a\xd8\x71\x90\x2e\x55\xed\x53\x4b\x57\x83\xdf\x73\x89\x57\x69\x16\x19\x5b\x8e\x64\x10\x80\xb3\x61\x7e\xc2\x86\x16\x3c\x00\x7b\x96\x66\x7d\xd5\x72\x3d\x69\xd7\x26\x17\xd5\x6a\xd2\xfe\x41\x39\x39\x1c\x7e\xf4\x79\xf6\x55\x05\x4a\x9d\x97\x99\xe5\xfd\x41\x0a\xc0\xcc\x8a\x40\x28\xb5\x71\x75\x80\xe1\xf0\xe3\x46\x7a\x50\x91\x4e\x23\x03\x87\xda\xb0\x8b\xd4\x80\x14\xd1\xec\xe8\x15\x5c\x69\xd2\x30\x92\x26\x84\x04\xb5\xbe\x95\x8a\xb9\x07\x6f\x68\xe6\xf8\x4b\xc2\xf0\x00\x9d\x0b\x22\xdd\xfa\x7b\x9c\x57\xa5\x8c\xb7\xdb\x3e\x11\xac\x2f\x55\x15\x43\x18\x54\x2a\x3d\xa4\x9a\x54\xc5\x24\x65\x4e\x78\x85\xa9\x37\xb4\x73\x93\x52\x89\x00\x3d\x80\x11\x1e\x92\x9a\x52\x1f\x4d\x78\x31\x25\x65\x95\x79\xb8\x59\x06\x45\xe5\xc2\x17\xa7\xeb\x43\xb8\xa5\x91\xb6\x0f\x29\x2f\x55\x99\x63\x2e\x95\x81\x43\x46\x63\xb4\xe2\xf3\xf6\xed\x6f\x47\x2e\xfb\xf6\x7f\x7f\x2c\xfe\xfc\xed\xf5\x51\xde\x7b\x27\xc7\xa0\x29\x90\xc2\xe5\x4b\xad\x7b\x1f\xd8\x05\xe6\xd6\x3e\x7b\xbd\x92\xd2\x10\x03\x2e\x56\xdc\xff\x16\x44\x2b\xa9\x26\x53\x15\x93\x19\x96\x15\x32\x5d\x7f\x61\x8b\x3e\xa6\xbe\xec\xf4\xad\x5a\xf4\xc4\x95\xde\x38\x49\x87\xc6\xc5\x53\xb7\xa1\xeb\xe6\xb3\xb1\x93\x90\x8b\x78\xea\xb2\xd3\xf7\xac\xe3\x1a\x70\x8a\x11\x1f\x65\x69\xd3\xb4\x15\xe3\xbd\x0d\xe8\x72\xb3\x5c\xb5\xe0\xbd\x00\xe4\xaa\x5b\x17\x90\xab\xee\x37\x08\xc8\x19\x99\xdf\x65\x80\x51\xaf\xbf\x91\xac\x38\x23\xaf\xda\x3e\x83\x2a\xc7\xd0\x4b\x00\x19\x53\xa4\xad\xc9\xb7\x84\xdb\x53\xc1\xda\xde\x06\x3c\xda\x12\xf7\x33\x5f\x6e\xd3\x68\x2e\x2a\xc0\xdb\x68\x3b\x3f\xe9\x9c\xf8\x77\x14\x52\x67\x09\x38\x3f\xe9\xe4\xeb\xf8\x3c\xbf\x8b\xb5\x48\x8d\x31\xc8\x2a\x9c\x28\xa0\xd7\x9f\xbe\xcd\x67\xb5\x4d\xed\xc3\x19\xfa\x66\xc2\x23\x1b\x76\x49\xdd\x5a\xd4\xf5\x81\x0b\xd6\x57\x32\x38\x9d\x65\xd7\x16\xd6\xa3\x81\xb9\x83\xd2\xe7\x59\xb6\x3a\x3b\x11\xb2\x00\xf9\x27\xe0\x9e\xad\xf9\x1f\x10\xa0\x70\x9a\x3d\xca\xea\x3b\x3f\xcd\xb3\x45\x56\xb7\x3d\x44\xae\xae\x51\x53\xa7\xa5\x2e\x51\x69\x25\x83\xdd\xef\x5e\xd4\xeb\x65\xb0\x6b\xd5\xcc\x4b\x68\x83\x51\x34\x74\xdd\x21\xd6\x05\xe0\xc1\x06\xea\xd9\x1c\xbd\xf0\x1c\x47\x5c\xa0\x0d\x7a\x5d\x8f\x9c\x6f\x2c\xd1\xf3\x67\xeb\x77\x02\x94\x22\x59\xed\xbc\xad\xe8\xc0\x31\xae\x93\x08\x67\xdb\x58\xb3\x3c\x7b\x81\xc4\x6e\x8c\xe4\x1e\xb5\x7a\xbe\x98\xf5\xb4\x32\x6e\x14\x6b\x42\xee\x8b\x3d\x04\xfc\xdb\x70\x2d\x3d\x9b\x94\xa9\x49\xb9\x4c\xee\x21\x5c\x26\x4f\x96\xee\x7d\x78\x3e\xa0\x58\x4e\x69\x2b\xed\x57\x82\x2f\x54\xf1\x49\x02\xa0\x2c\x11\x58\x53\xe8\xf9\x44\x60\xb4\x59\xca\x17\xae\x06\xa5\xdd\x68\xd6\xd9\xe2\xad\xd0\xfe\x39\xd1\x32\xc2\x75\xbe\x95\x22\x3b\x7c\xaf\xa9\x6e\xde\xb3\x1f\xa4\x42\x70\x31\xb1\x07\xe3\x86\x6b\x33\x58\x94\x21\xe7\xbe\x1b\x17\x3e\x05\x99\x28\xd2\x36\x26\x17\x13\x1b\x59\xf1\x29\x41\xbf\xd7\x9d\xf7\xe7\x46\x33\xbb\x29\xe1\xf9\xb9\x37\x82\xdb\xba\x55\x13\xce\x0a\x9c\x3a\xbb\xcb\x56\x43\xda\x33\x32\xfd\xc5\x21\x5c\xea\x49\xd8\xc9\xde\x95\x68\x5d\xb0\x76\x13\x99\xfb\x3c\x88\xf6\x90\x7b\x2f\xa6\xd7\xa8\xca\x65\x0d\x62\x4c\x2c\x64\x24\xa6\x5c\x2a\x11\x93\x30\x30\x45\xc5\xd1\x46\x49\xf6\x15\x3a\x6b\x2a\xe0\x0a\x02\xa9\x14\xd7\x89\x14\xcc\xca\xa1\x6b\x5c\x5e\x69\x68\x6a\x45\xe2\xa6\x7e\xf7\x2b\x12\x17\x63\xf2\xa7\xc7\xae\x62\x3c\xe1\x51\xd8\x26\x3a\x8e\x9a\x65\x37\xb4\x08\x90\xe6\xc5\xa8\x80\xba\x56\x2e\xfd\x0c\x29\x1a\x67\xed\x5f\x25\xf7\x9c\x7d\x8d\xca\x84\x79\x0f\xc9\x86\x69\xc9\x1a\xe3\x2d\x0e\xfb\xb5\x89\x56\xb4\x34\xb5\xdb\x00\xa5\xae\x57\xc0\x0e\x63\xb9\x91\x74\xed\x84\x28\x26\xe4\xc1\x59\x74\xf1\xf9\x34\x99\xdd\x61\x53\x48\xd4\x72\x93\x77\x6f\xd4\xab\x09\xcd\xb9\x64\x97\xbc\xd0\xf4\x2e\x09\x4f\x84\xda\x40\x2c\x99\xbf\x85\x6c\x0d\x96\x57\xa7\xc7\x81\xa9\x98\xfe\x78\x4e\x48\x11\x66\xdb\xc5\xaa\x76\x67\xc4\xb9\xc5\x64\x56\x7a\xe9\x66\x49\xc4\xd0\xc7\xb9\xee\xee\xf2\x26\x90\xae\x11\xfc\x31\xe5\xcd\x6f\x6f\x2b\x80\xcb\x48\x67\x44\xef\x24\xa0\x3b\x83\xdc\x4c\xd2\xe2\xc5\xc1\x0b\x50\x34\xe1\xda\xa8\x59\x7b\x1f\x9a\x60\x6c\x40\x93\x7f\xd3\xac\xb4\xa1\x6f\xd1\xda\x3a\xdf\x8c\xaf\x3c\xd4\x3c\x75\xf2\xb7\x14\x73\x3d\x1f\xdd\xde\xa7\xd7\x5a\xf4\xbe\xf5\x20\x6b\xde\xf3\x9e\xa3\xff\xfe\x2e\x41\xc1\x88\x6d\xe1\x82\x00\xca\x26\xfd\x8f\x1f\xad\xf3\xe3\xd4\xa5\xa0\x8a\xb5\x21\x4b\x4f\x7d\xa7\xe8\xdf\x5f\x63\x6c\x02\xff\xee\x97\x8b\x41\xb7\x18\x7e\x37\xf4\xdd\xa2\x9f\x72\x61\x7e\xfb\xb5\x65\xf4\x3f\x97\xa3\xff\xf9\xbb\x47\xff\xdd\xdb\x96\xd1\xf7\x04\x17\xdd\x47\x00\x5c\x41\xde\x95\x98\x66\x09\x65\xfb\x3f\xd4\x47\xdf\x13\x2f\x2a\xdc\x80\xdd\x83\x1b\x5d\x8a\x3c\x37\x8a\x3b\xf7\xd7\x38\xf1\x2c\x70\x6f\x11\xa4\xeb\x8c\x41\xf7\x23\x35\xe7\xe5\xd3\xc7\xeb\xf1\xdc\x90\xcf\x29\xa9\x59\xb1\xf8\x65\x1d\x8b\xdf\x8e\xfc\xdd\xd0\xec\x62\xf4\x75\xed\x99\x41\xb6\xee\x80\xcc\xf5\x12\xf4\x4f\xb5\x62\xad\x0d\x61\xe4\xba\xd6\x1c\xaa\x70\xf8\x63\x2a\x0c\x69\x43\xec\xc7\xa3\xc6\x23\xb6\x73\xbc\xa1\x2b\xd1\xa5\x51\x3a\x99\x64\xf9\xbf\x15\x09\xb1\xe3\x2b\x9f\x93\x98\x97\xaa\x53\x01\x6c\xfe\x18\x8c\x66\x80\xc6\x60\x10\xba\xfc\x7d\x36\x42\x0a\x8c\x04\x6e\xb4\x6f\x23\xaf\x29\x54\x19\x1e\x55\x32\x6a\xb7\xee\x13\x01\x6b\x2c\x2b\x6b\x34\x69\x4c\xc1\x2c\x46\xe5\x08\x0e\x68\x4a\x4a\x7b\x10\x3d\x2c\x16\x22\xd7\x11\x03\x9a\x8c\x45\x6e\x9d\x09\xf6\x3f\x46\x39\x9a\x8b\x07\x49\x7d\xc3\x28\xf6\x74\x37\x23\xb2\xef\x2b\x41\x1b\x27\x00\xd7\x81\xb4\x58\xc2\x2d\xe1\x72\x1b\x54\xa1\x78\x72\x0d\x23\xf2\x1f\xb8\x72\x6f\xdd\xa3\x69\x62\x07\xe8\xb8\x3e\xb5\x8b\x76\x17\x6b\x3e\x28\x86\xee\x16\x57\x6f\xfc\x85\x0b\x3a\x23\x73\x25\xf8\xdd\x07\x1e\xd1\x27\x8c\xb7\xdf\xfa\xca\x3b\xa6\xdc\x9d\x2f\x77\xb9\x38\xfb\x16\x1c\xfb\x9d\x8f\xe6\x1f\x05\x73\x5f\xde\x20\x06\x3f\xa4\x82\xdf\xb9\x6f\x36\xfc\x6d\x57\xfd\xdb\xdf\x14\xfb\xe1\x15\x5c\x86\xdc\xe1\x8e\xa0\x51\xb0\x91\xbc\x83\xc0\xbe\xdf\xda\x00\x96\xf1\x2e\x6f\x78\x29\x62\x57\x9e\x84\xbf\xe5\x26\x74\xed\x93\x96\x8c\xe5\x22\xc5\x83\x70\x10\x15\x7d\xa1\xac\x86\xd9\x13\x76\x0b\x8f\xc2\xc4\xa1\x47\xf0\x2a\xeb\xf5\x2d\xe3\x9c\x91\xa0\x89\xd6\x51\xcd\x3b\x84\xdd\x9d\x7e\xe4\xae\x08\xa6\x49\x71\xd2\x99\x93\xcf\x03\x8c\xe6\x4c\xca\x2e\x4d\xef\x51\xe6\xda\x15\xde\x9e\x38\xc9\xe8\x7b\x24\x05\xe9\xf4\xaf\x3a\x32\x15\xa6\xa7\x3f\xf2\x49\x48\xea\x32\x44\x71\x21\x36\x4c\x77\x21\xc8\x59\x2f\xc3\x2d\x59\x5a\x40\x0a\x08\x51\x03\x1a\x88\x08\xb5\x81\x5f\xa1\xd3\xbf\xd2\x70\x28\x5d\x2d\x91\xf4\x11\x1c\xae\x28\xc3\xd1\x53\x86\x79\x0d\xa5\xc1\xc9\xf9\x49\xec\x61\x3a\xa5\x48\xde\xbe\x39\x3b\x6d\x00\xa1\x37\x67\xa7\x56\x0a\x15\xc6\xcf\x09\x9a\x66\xbc\x2e\xeb\xde\x25\x32\x9a\xc5\x52\x25\x0f\xe4\xe0\xe5\x15\xac\xfe\xfb\x7e\xbe\x30\x0f\xb2\x6b\xfe\x85\xb1\x80\xfb\x4c\x8b\xfb\xd2\x33\xcb\x4d\x71\x2a\xb8\xe0\x06\x23\xfe\x1f\x62\xa0\x13\x0c\xdc\x1d\xf3\xa5\x6b\xf8\xee\x43\x20\xfe\x5d\x59\x42\xb3\x3e\x2b\xe7\xf8\x94\x14\x72\xf2\x1b\xf0\x3b\x44\x05\xdb\x3f\xd7\xd7\x9e\xb5\x71\x1f\xbe\xb9\x17\x78\x37\xcb\xc3\x9e\x15\xa6\x9f\x0f\xde\x95\x41\x6e\xfb\x46\xe6\xc1\x7f\x03\x00\x00\xff\xff\xd0\xe5\x1b\x71\x8b\x5d\x00\x00"

func templatesFunctionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionsYml,
		"templates/functions.yml",
	)
}

func templatesFunctionsYml() (*asset, error) {
	bytes, err := templatesFunctionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/functions.yml", size: 23947, mode: os.FileMode(420), modTime: time.Unix(1522700654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesObfstringGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x0a\xc2\x30\x10\xc6\xf1\xb9\x79\x8a\x8f\x10\xb7\xb6\xb8\x09\x42\xb7\x2e\x3e\x83\x75\x88\x24\x95\x0c\x9e\x72\x44\x09\x1c\xf7\xee\xe2\x0d\x5d\xba\x7e\xdf\x0f\xfe\xdf\xc8\x10\x41\x18\x2f\x33\x54\x31\xe1\x7a\xe3\x0f\x65\x71\x9d\xc8\x00\x8e\xf4\xc8\x08\x25\xb5\x1e\xe1\x8e\xf3\x84\x30\xce\xb1\x46\x0c\xaa\xae\x33\x52\x56\x3c\x5f\xc9\x0c\x4e\xdb\x8e\x37\x17\xaa\x2b\xfc\x42\x4b\xf5\xd8\x74\xa6\xb4\x37\xc7\x76\x68\x3d\xfc\xbf\x60\x9f\x88\x39\x55\xa7\xbf\x00\x00\x00\xff\xff\xbc\x7b\x31\xf2\x9f\x00\x00\x00"

func templatesObfstringGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesObfstringGoTmpl,
		"templates/obfstring.go.tmpl",
	)
}

func templatesObfstringGoTmpl() (*asset, error) {
	bytes, err := templatesObfstringGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/obfstring.go.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(1520831575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builtin.yml": templatesBuiltinYml,
	"templates/embed.go.tmpl": templatesEmbedGoTmpl,
	"templates/entrypoint.go.tmpl": templatesEntrypointGoTmpl,
	"templates/example.gs": templatesExampleGs,
	"templates/functions.yml": templatesFunctionsYml,
	"templates/obfstring.go.tmpl": templatesObfstringGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builtin.yml": &bintree{templatesBuiltinYml, map[string]*bintree{}},
		"embed.go.tmpl": &bintree{templatesEmbedGoTmpl, map[string]*bintree{}},
		"entrypoint.go.tmpl": &bintree{templatesEntrypointGoTmpl, map[string]*bintree{}},
		"example.gs": &bintree{templatesExampleGs, map[string]*bintree{}},
		"functions.yml": &bintree{templatesFunctionsYml, map[string]*bintree{}},
		"obfstring.go.tmpl": &bintree{templatesObfstringGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

